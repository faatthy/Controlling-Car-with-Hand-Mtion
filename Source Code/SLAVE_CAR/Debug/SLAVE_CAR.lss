
SLAVE_CAR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003e7c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000013c  00800060  00003e7c  00003f10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080019c  0080019c  0000404c  2**0
                  ALLOC
  3 .stab         00004224  00000000  00000000  0000404c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ca4  00000000  00000000  00008270  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00009f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a2a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000c6b1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000da37  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000ec10  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000edd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f0c6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000fa34  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 fe 0a 	jmp	0x15fc	; 0x15fc <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 55 0a 	jmp	0x14aa	; 0x14aa <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec e7       	ldi	r30, 0x7C	; 124
      68:	fe e3       	ldi	r31, 0x3E	; 62
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 39       	cpi	r26, 0x9C	; 156
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e9       	ldi	r26, 0x9C	; 156
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 3b       	cpi	r26, 0xB4	; 180
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a1 1a 	call	0x3542	; 0x3542 <main>
      8a:	0c 94 3c 1f 	jmp	0x3e78	; 0x3e78 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a3 e9       	ldi	r26, 0x93	; 147
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 89 1e 	jmp	0x3d12	; 0x3d12 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	83 e9       	ldi	r24, 0x93	; 147
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a5 1e 	jmp	0x3d4a	; 0x3d4a <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	63 e9       	ldi	r22, 0x93	; 147
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 95 1e 	jmp	0x3d2a	; 0x3d2a <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 b1 1e 	jmp	0x3d62	; 0x3d62 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 99 1e 	jmp	0x3d32	; 0x3d32 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 b5 1e 	jmp	0x3d6a	; 0x3d6a <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 91 1e 	jmp	0x3d22	; 0x3d22 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 ad 1e 	jmp	0x3d5a	; 0x3d5a <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e5 56       	subi	r30, 0x65	; 101
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <UART_voidInit>:
#include "../../LIBRARY/stdTypes.h"
#include"../DIO/DIO_int.h"
#include"UART_priv.h"
#include "UART_conf.h"
void UART_voidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	00 d0       	rcall	.+0      	; 0xe34 <UART_voidInit+0x6>
     e34:	0f 92       	push	r0
     e36:	cd b7       	in	r28, 0x3d	; 61
     e38:	de b7       	in	r29, 0x3e	; 62


#if SPEED_MODE == NORMAL
	UCSRA &=~(1<<1);
#elif SPEED_MODE == DOUBLE
	UCSRA |= (1<<1);
     e3a:	ab e2       	ldi	r26, 0x2B	; 43
     e3c:	b0 e0       	ldi	r27, 0x00	; 0
     e3e:	eb e2       	ldi	r30, 0x2B	; 43
     e40:	f0 e0       	ldi	r31, 0x00	; 0
     e42:	80 81       	ld	r24, Z
     e44:	82 60       	ori	r24, 0x02	; 2
     e46:	8c 93       	st	X, r24
#endif

#if UART_MODE == TRANSCIEVER
	UCSRB |=(3<<3);
     e48:	aa e2       	ldi	r26, 0x2A	; 42
     e4a:	b0 e0       	ldi	r27, 0x00	; 0
     e4c:	ea e2       	ldi	r30, 0x2A	; 42
     e4e:	f0 e0       	ldi	r31, 0x00	; 0
     e50:	80 81       	ld	r24, Z
     e52:	88 61       	ori	r24, 0x18	; 24
     e54:	8c 93       	st	X, r24
#endif

	u8 Local_u8UCSRC=0;
     e56:	1b 82       	std	Y+3, r1	; 0x03
#if DATA_LEN == EIGHT
	Local_u8UCSRC |= (3<<1);
     e58:	8b 81       	ldd	r24, Y+3	; 0x03
     e5a:	86 60       	ori	r24, 0x06	; 6
     e5c:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if PARITY_STATE == NO_PARITY
	Local_u8UCSRC &= ~ (3<<4);
     e5e:	8b 81       	ldd	r24, Y+3	; 0x03
     e60:	8f 7c       	andi	r24, 0xCF	; 207
     e62:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if STOP_STATE == ONE_STOP_BIT
	Local_u8UCSRC &= ~(1<<3);
     e64:	8b 81       	ldd	r24, Y+3	; 0x03
     e66:	87 7f       	andi	r24, 0xF7	; 247
     e68:	8b 83       	std	Y+3, r24	; 0x03
#endif

#if CLOCK_MODE == ASYCH
	Local_u8UCSRC &=~(1<<6);
     e6a:	8b 81       	ldd	r24, Y+3	; 0x03
     e6c:	8f 7b       	andi	r24, 0xBF	; 191
     e6e:	8b 83       	std	Y+3, r24	; 0x03
#endif
	Local_u8UCSRC |=(1<<7);
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	80 68       	ori	r24, 0x80	; 128
     e74:	8b 83       	std	Y+3, r24	; 0x03
	UCSRC = Local_u8UCSRC;
     e76:	e0 e4       	ldi	r30, 0x40	; 64
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	8b 81       	ldd	r24, Y+3	; 0x03
     e7c:	80 83       	st	Z, r24

	u16 Local_u16UBRR = BUAD(BAUDRATE);
     e7e:	8f ec       	ldi	r24, 0xCF	; 207
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	9a 83       	std	Y+2, r25	; 0x02
     e84:	89 83       	std	Y+1, r24	; 0x01

	Local_u16UBRR &=~(1<<15);
     e86:	89 81       	ldd	r24, Y+1	; 0x01
     e88:	9a 81       	ldd	r25, Y+2	; 0x02
     e8a:	9f 77       	andi	r25, 0x7F	; 127
     e8c:	9a 83       	std	Y+2, r25	; 0x02
     e8e:	89 83       	std	Y+1, r24	; 0x01

	UBRRL  = (u8)Local_u16UBRR;
     e90:	e9 e2       	ldi	r30, 0x29	; 41
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	89 81       	ldd	r24, Y+1	; 0x01
     e96:	80 83       	st	Z, r24
	UBRRH  = (u8)(Local_u16UBRR>>8);
     e98:	e0 e4       	ldi	r30, 0x40	; 64
     e9a:	f0 e0       	ldi	r31, 0x00	; 0
     e9c:	89 81       	ldd	r24, Y+1	; 0x01
     e9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ea0:	89 2f       	mov	r24, r25
     ea2:	99 27       	eor	r25, r25
     ea4:	80 83       	st	Z, r24
	DIO_voidSetPinDirection(DIO_u8GROUP_D , DIO_u8PIN0 , DIO_u8INPUT);
     ea6:	83 e0       	ldi	r24, 0x03	; 3
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	40 e0       	ldi	r20, 0x00	; 0
     eac:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(DIO_u8GROUP_D , DIO_u8PIN1 , DIO_u8OUTPUT);
     eb0:	83 e0       	ldi	r24, 0x03	; 3
     eb2:	61 e0       	ldi	r22, 0x01	; 1
     eb4:	41 e0       	ldi	r20, 0x01	; 1
     eb6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>

	return;
}
     eba:	0f 90       	pop	r0
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	cf 91       	pop	r28
     ec2:	df 91       	pop	r29
     ec4:	08 95       	ret

00000ec6 <UART_voidSendChar>:

void UART_voidSendChar(u8 Copy_u8Data)
{
     ec6:	df 93       	push	r29
     ec8:	cf 93       	push	r28
     eca:	0f 92       	push	r0
     ecc:	cd b7       	in	r28, 0x3d	; 61
     ece:	de b7       	in	r29, 0x3e	; 62
     ed0:	89 83       	std	Y+1, r24	; 0x01

	while (!((UCSRA>>UDRE)&1));
     ed2:	eb e2       	ldi	r30, 0x2B	; 43
     ed4:	f0 e0       	ldi	r31, 0x00	; 0
     ed6:	80 81       	ld	r24, Z
     ed8:	82 95       	swap	r24
     eda:	86 95       	lsr	r24
     edc:	87 70       	andi	r24, 0x07	; 7
     ede:	88 2f       	mov	r24, r24
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	81 70       	andi	r24, 0x01	; 1
     ee4:	90 70       	andi	r25, 0x00	; 0
     ee6:	00 97       	sbiw	r24, 0x00	; 0
     ee8:	a1 f3       	breq	.-24     	; 0xed2 <UART_voidSendChar+0xc>
	UDR = Copy_u8Data;
     eea:	ec e2       	ldi	r30, 0x2C	; 44
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	89 81       	ldd	r24, Y+1	; 0x01
     ef0:	80 83       	st	Z, r24
	 * UDR = Copy_u8Data;
	 * while( ! ((UCSRA>>TXC) & 1 ) );
	 * UCSRA |= (1<<TXC);
	 */
	return;
}
     ef2:	0f 90       	pop	r0
     ef4:	cf 91       	pop	r28
     ef6:	df 91       	pop	r29
     ef8:	08 95       	ret

00000efa <UART_voidRecieveChar>:

void UART_voidRecieveChar(u8 *Copy_pu8Data)
{
     efa:	df 93       	push	r29
     efc:	cf 93       	push	r28
     efe:	00 d0       	rcall	.+0      	; 0xf00 <UART_voidRecieveChar+0x6>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	9a 83       	std	Y+2, r25	; 0x02
     f06:	89 83       	std	Y+1, r24	; 0x01


	while (!((UCSRA>>RXC)&1));
     f08:	eb e2       	ldi	r30, 0x2B	; 43
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	88 23       	and	r24, r24
     f10:	dc f7       	brge	.-10     	; 0xf08 <UART_voidRecieveChar+0xe>
	*Copy_pu8Data = UDR;
     f12:	ec e2       	ldi	r30, 0x2C	; 44
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	80 83       	st	Z, r24

	return;
}
     f1e:	0f 90       	pop	r0
     f20:	0f 90       	pop	r0
     f22:	cf 91       	pop	r28
     f24:	df 91       	pop	r29
     f26:	08 95       	ret

00000f28 <UART_voidSendString>:

void UART_voidSendString(const u8* Copy_pcData)
{
     f28:	df 93       	push	r29
     f2a:	cf 93       	push	r28
     f2c:	00 d0       	rcall	.+0      	; 0xf2e <UART_voidSendString+0x6>
     f2e:	cd b7       	in	r28, 0x3d	; 61
     f30:	de b7       	in	r29, 0x3e	; 62
     f32:	9a 83       	std	Y+2, r25	; 0x02
     f34:	89 83       	std	Y+1, r24	; 0x01
     f36:	17 c0       	rjmp	.+46     	; 0xf66 <UART_voidSendString+0x3e>


	while (*Copy_pcData != '\0')
	{
		while (!((UCSRA>>UDRE)&1));
     f38:	eb e2       	ldi	r30, 0x2B	; 43
     f3a:	f0 e0       	ldi	r31, 0x00	; 0
     f3c:	80 81       	ld	r24, Z
     f3e:	82 95       	swap	r24
     f40:	86 95       	lsr	r24
     f42:	87 70       	andi	r24, 0x07	; 7
     f44:	88 2f       	mov	r24, r24
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	81 70       	andi	r24, 0x01	; 1
     f4a:	90 70       	andi	r25, 0x00	; 0
     f4c:	00 97       	sbiw	r24, 0x00	; 0
     f4e:	a1 f3       	breq	.-24     	; 0xf38 <UART_voidSendString+0x10>
		UDR = *Copy_pcData;
     f50:	ac e2       	ldi	r26, 0x2C	; 44
     f52:	b0 e0       	ldi	r27, 0x00	; 0
     f54:	e9 81       	ldd	r30, Y+1	; 0x01
     f56:	fa 81       	ldd	r31, Y+2	; 0x02
     f58:	80 81       	ld	r24, Z
     f5a:	8c 93       	st	X, r24
		Copy_pcData++;
     f5c:	89 81       	ldd	r24, Y+1	; 0x01
     f5e:	9a 81       	ldd	r25, Y+2	; 0x02
     f60:	01 96       	adiw	r24, 0x01	; 1
     f62:	9a 83       	std	Y+2, r25	; 0x02
     f64:	89 83       	std	Y+1, r24	; 0x01

void UART_voidSendString(const u8* Copy_pcData)
{


	while (*Copy_pcData != '\0')
     f66:	e9 81       	ldd	r30, Y+1	; 0x01
     f68:	fa 81       	ldd	r31, Y+2	; 0x02
     f6a:	80 81       	ld	r24, Z
     f6c:	88 23       	and	r24, r24
     f6e:	21 f7       	brne	.-56     	; 0xf38 <UART_voidSendString+0x10>
		UDR = *Copy_pcData;
		Copy_pcData++;
	}

	return;
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	cf 91       	pop	r28
     f76:	df 91       	pop	r29
     f78:	08 95       	ret

00000f7a <UART_voidRecieveString>:


void UART_voidRecieveString(char * Copy_pcData)
{
     f7a:	df 93       	push	r29
     f7c:	cf 93       	push	r28
     f7e:	00 d0       	rcall	.+0      	; 0xf80 <UART_voidRecieveString+0x6>
     f80:	00 d0       	rcall	.+0      	; 0xf82 <UART_voidRecieveString+0x8>
     f82:	cd b7       	in	r28, 0x3d	; 61
     f84:	de b7       	in	r29, 0x3e	; 62
     f86:	9c 83       	std	Y+4, r25	; 0x04
     f88:	8b 83       	std	Y+3, r24	; 0x03


	u8 Local_u8Data=0 , Local_u8Index=0;
     f8a:	1a 82       	std	Y+2, r1	; 0x02
     f8c:	19 82       	std	Y+1, r1	; 0x01

	while (1)
	{
		while (!((UCSRA>>RXC)&1));
     f8e:	eb e2       	ldi	r30, 0x2B	; 43
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	88 23       	and	r24, r24
     f96:	dc f7       	brge	.-10     	; 0xf8e <UART_voidRecieveString+0x14>
		Local_u8Data = UDR;
     f98:	ec e2       	ldi	r30, 0x2C	; 44
     f9a:	f0 e0       	ldi	r31, 0x00	; 0
     f9c:	80 81       	ld	r24, Z
     f9e:	8a 83       	std	Y+2, r24	; 0x02

		if (Local_u8Data == '\r' || Local_u8Data == '\n' || Local_u8Data == '\0')
     fa0:	8a 81       	ldd	r24, Y+2	; 0x02
     fa2:	8d 30       	cpi	r24, 0x0D	; 13
     fa4:	31 f0       	breq	.+12     	; 0xfb2 <UART_voidRecieveString+0x38>
     fa6:	8a 81       	ldd	r24, Y+2	; 0x02
     fa8:	8a 30       	cpi	r24, 0x0A	; 10
     faa:	19 f0       	breq	.+6      	; 0xfb2 <UART_voidRecieveString+0x38>
     fac:	8a 81       	ldd	r24, Y+2	; 0x02
     fae:	88 23       	and	r24, r24
     fb0:	81 f4       	brne	.+32     	; 0xfd2 <UART_voidRecieveString+0x58>
		{
			Copy_pcData[Local_u8Index]='\0';
     fb2:	89 81       	ldd	r24, Y+1	; 0x01
     fb4:	28 2f       	mov	r18, r24
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	8b 81       	ldd	r24, Y+3	; 0x03
     fba:	9c 81       	ldd	r25, Y+4	; 0x04
     fbc:	fc 01       	movw	r30, r24
     fbe:	e2 0f       	add	r30, r18
     fc0:	f3 1f       	adc	r31, r19
     fc2:	10 82       	st	Z, r1
		Local_u8Index++;
	}


	return;
}
     fc4:	0f 90       	pop	r0
     fc6:	0f 90       	pop	r0
     fc8:	0f 90       	pop	r0
     fca:	0f 90       	pop	r0
     fcc:	cf 91       	pop	r28
     fce:	df 91       	pop	r29
     fd0:	08 95       	ret
		if (Local_u8Data == '\r' || Local_u8Data == '\n' || Local_u8Data == '\0')
		{
			Copy_pcData[Local_u8Index]='\0';
			break;
		}
		Copy_pcData[Local_u8Index]=Local_u8Data;
     fd2:	89 81       	ldd	r24, Y+1	; 0x01
     fd4:	28 2f       	mov	r18, r24
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	8b 81       	ldd	r24, Y+3	; 0x03
     fda:	9c 81       	ldd	r25, Y+4	; 0x04
     fdc:	fc 01       	movw	r30, r24
     fde:	e2 0f       	add	r30, r18
     fe0:	f3 1f       	adc	r31, r19
     fe2:	8a 81       	ldd	r24, Y+2	; 0x02
     fe4:	80 83       	st	Z, r24
		Local_u8Index++;
     fe6:	89 81       	ldd	r24, Y+1	; 0x01
     fe8:	8f 5f       	subi	r24, 0xFF	; 255
     fea:	89 83       	std	Y+1, r24	; 0x01
     fec:	d0 cf       	rjmp	.-96     	; 0xf8e <UART_voidRecieveString+0x14>

00000fee <Pwm1_voidInit>:
#include"../DIO/DIO_int.h"
#include"TIMER1_priv.h"
#include"TIMER1_conf.h"
#include "../../HAL/LCD/LCD_int.h"
#include "util/delay.h"
void Pwm1_voidInit(void){
     fee:	df 93       	push	r29
     ff0:	cf 93       	push	r28
     ff2:	cd b7       	in	r28, 0x3d	; 61
     ff4:	de b7       	in	r29, 0x3e	; 62

#if PWM1_MODE ==FAST_PWM
	TCCR1A&=~(1<<0);
     ff6:	af e4       	ldi	r26, 0x4F	; 79
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ef e4       	ldi	r30, 0x4F	; 79
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	8e 7f       	andi	r24, 0xFE	; 254
    1002:	8c 93       	st	X, r24
	TCCR1A|=(1<<1);
    1004:	af e4       	ldi	r26, 0x4F	; 79
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	ef e4       	ldi	r30, 0x4F	; 79
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	82 60       	ori	r24, 0x02	; 2
    1010:	8c 93       	st	X, r24
	TCCR1B|=(1<<3);
    1012:	ae e4       	ldi	r26, 0x4E	; 78
    1014:	b0 e0       	ldi	r27, 0x00	; 0
    1016:	ee e4       	ldi	r30, 0x4E	; 78
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	88 60       	ori	r24, 0x08	; 8
    101e:	8c 93       	st	X, r24
	TCCR1B|=(1<<4);
    1020:	ae e4       	ldi	r26, 0x4E	; 78
    1022:	b0 e0       	ldi	r27, 0x00	; 0
    1024:	ee e4       	ldi	r30, 0x4E	; 78
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	80 81       	ld	r24, Z
    102a:	80 61       	ori	r24, 0x10	; 16
    102c:	8c 93       	st	X, r24
#endif

#if OUTPUT_MODE==NON_INVERTED
	TCCR1A|=(1<<7);
    102e:	af e4       	ldi	r26, 0x4F	; 79
    1030:	b0 e0       	ldi	r27, 0x00	; 0
    1032:	ef e4       	ldi	r30, 0x4F	; 79
    1034:	f0 e0       	ldi	r31, 0x00	; 0
    1036:	80 81       	ld	r24, Z
    1038:	80 68       	ori	r24, 0x80	; 128
    103a:	8c 93       	st	X, r24
	TCCR1A&=~(1<<6);
    103c:	af e4       	ldi	r26, 0x4F	; 79
    103e:	b0 e0       	ldi	r27, 0x00	; 0
    1040:	ef e4       	ldi	r30, 0x4F	; 79
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	80 81       	ld	r24, Z
    1046:	8f 7b       	andi	r24, 0xBF	; 191
    1048:	8c 93       	st	X, r24
#endif
	DIO_voidSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN5,DIO_u8OUTPUT);
    104a:	83 e0       	ldi	r24, 0x03	; 3
    104c:	65 e0       	ldi	r22, 0x05	; 5
    104e:	41 e0       	ldi	r20, 0x01	; 1
    1050:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>


	//CHANNEL 2 INIT
  DIO_voidSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN4,DIO_u8OUTPUT);
    1054:	83 e0       	ldi	r24, 0x03	; 3
    1056:	64 e0       	ldi	r22, 0x04	; 4
    1058:	41 e0       	ldi	r20, 0x01	; 1
    105a:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	TCCR1A|=(1<<5);
    105e:	af e4       	ldi	r26, 0x4F	; 79
    1060:	b0 e0       	ldi	r27, 0x00	; 0
    1062:	ef e4       	ldi	r30, 0x4F	; 79
    1064:	f0 e0       	ldi	r31, 0x00	; 0
    1066:	80 81       	ld	r24, Z
    1068:	80 62       	ori	r24, 0x20	; 32
    106a:	8c 93       	st	X, r24
	TCCR1A&=~(1<<4);
    106c:	af e4       	ldi	r26, 0x4F	; 79
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	ef e4       	ldi	r30, 0x4F	; 79
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8f 7e       	andi	r24, 0xEF	; 239
    1078:	8c 93       	st	X, r24
    LCD_voidInit();
    107a:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_voidInit>
	return;
}
    107e:	cf 91       	pop	r28
    1080:	df 91       	pop	r29
    1082:	08 95       	ret

00001084 <Pwm1_voidSetFrequency>:

void Pwm1_voidSetFrequency(u16 Copy_u16Frequency){
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	df 93       	push	r29
    108a:	cf 93       	push	r28
    108c:	00 d0       	rcall	.+0      	; 0x108e <Pwm1_voidSetFrequency+0xa>
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	9a 83       	std	Y+2, r25	; 0x02
    1094:	89 83       	std	Y+1, r24	; 0x01

	ICR1 = ((CRYSTAL_FREQUENCY * 1000000) / (Copy_u16Frequency* TIMER1_PRESCALER));
    1096:	06 e4       	ldi	r16, 0x46	; 70
    1098:	10 e0       	ldi	r17, 0x00	; 0
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	9a 81       	ldd	r25, Y+2	; 0x02
    109e:	00 24       	eor	r0, r0
    10a0:	96 95       	lsr	r25
    10a2:	87 95       	ror	r24
    10a4:	07 94       	ror	r0
    10a6:	96 95       	lsr	r25
    10a8:	87 95       	ror	r24
    10aa:	07 94       	ror	r0
    10ac:	98 2f       	mov	r25, r24
    10ae:	80 2d       	mov	r24, r0
    10b0:	9c 01       	movw	r18, r24
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	50 e0       	ldi	r21, 0x00	; 0
    10b6:	80 e0       	ldi	r24, 0x00	; 0
    10b8:	94 e2       	ldi	r25, 0x24	; 36
    10ba:	a4 ef       	ldi	r26, 0xF4	; 244
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	bc 01       	movw	r22, r24
    10c0:	cd 01       	movw	r24, r26
    10c2:	0e 94 38 1e 	call	0x3c70	; 0x3c70 <__divmodsi4>
    10c6:	da 01       	movw	r26, r20
    10c8:	c9 01       	movw	r24, r18
    10ca:	f8 01       	movw	r30, r16
    10cc:	91 83       	std	Z+1, r25	; 0x01
    10ce:	80 83       	st	Z, r24
	LCD_voidWritInteger(ICR1);
    10d0:	e6 e4       	ldi	r30, 0x46	; 70
    10d2:	f0 e0       	ldi	r31, 0x00	; 0
    10d4:	80 81       	ld	r24, Z
    10d6:	91 81       	ldd	r25, Z+1	; 0x01
    10d8:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_voidWritInteger>
	return;
}
    10dc:	0f 90       	pop	r0
    10de:	0f 90       	pop	r0
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	1f 91       	pop	r17
    10e6:	0f 91       	pop	r16
    10e8:	08 95       	ret

000010ea <Pwm1_voidSetOCR1A>:
void Pwm1_voidSetOCR1A(u16 Copy_u16DutyCycle){
    10ea:	df 93       	push	r29
    10ec:	cf 93       	push	r28
    10ee:	00 d0       	rcall	.+0      	; 0x10f0 <Pwm1_voidSetOCR1A+0x6>
    10f0:	cd b7       	in	r28, 0x3d	; 61
    10f2:	de b7       	in	r29, 0x3e	; 62
    10f4:	9a 83       	std	Y+2, r25	; 0x02
    10f6:	89 83       	std	Y+1, r24	; 0x01


	OCR1A = Copy_u16DutyCycle;
    10f8:	ea e4       	ldi	r30, 0x4A	; 74
    10fa:	f0 e0       	ldi	r31, 0x00	; 0
    10fc:	89 81       	ldd	r24, Y+1	; 0x01
    10fe:	9a 81       	ldd	r25, Y+2	; 0x02
    1100:	91 83       	std	Z+1, r25	; 0x01
    1102:	80 83       	st	Z, r24
	//LCD_voidWritInteger(OCR1A);


		return;
	}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	cf 91       	pop	r28
    110a:	df 91       	pop	r29
    110c:	08 95       	ret

0000110e <Pwm1_voidSetOCR1B>:
void Pwm1_voidSetOCR1B(u16 Copy_u16DutyCycle){
    110e:	df 93       	push	r29
    1110:	cf 93       	push	r28
    1112:	00 d0       	rcall	.+0      	; 0x1114 <Pwm1_voidSetOCR1B+0x6>
    1114:	cd b7       	in	r28, 0x3d	; 61
    1116:	de b7       	in	r29, 0x3e	; 62
    1118:	9a 83       	std	Y+2, r25	; 0x02
    111a:	89 83       	std	Y+1, r24	; 0x01


		OCR1B = Copy_u16DutyCycle;
    111c:	e8 e4       	ldi	r30, 0x48	; 72
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	89 81       	ldd	r24, Y+1	; 0x01
    1122:	9a 81       	ldd	r25, Y+2	; 0x02
    1124:	91 83       	std	Z+1, r25	; 0x01
    1126:	80 83       	st	Z, r24


		return;
	}
    1128:	0f 90       	pop	r0
    112a:	0f 90       	pop	r0
    112c:	cf 91       	pop	r28
    112e:	df 91       	pop	r29
    1130:	08 95       	ret

00001132 <Pwm1_voidStart>:


void Pwm1_voidStart(void){
    1132:	df 93       	push	r29
    1134:	cf 93       	push	r28
    1136:	cd b7       	in	r28, 0x3d	; 61
    1138:	de b7       	in	r29, 0x3e	; 62

		TCCR1B|=(1<<0);
	#elif TIMER1_PRESCALER==PRESCLNG_8
		TCCR1B|=(1<<1);
	#elif TIMER1_PRESCALER==PRESCLNG_64
		TCCR1B|=(3<<0);
    113a:	ae e4       	ldi	r26, 0x4E	; 78
    113c:	b0 e0       	ldi	r27, 0x00	; 0
    113e:	ee e4       	ldi	r30, 0x4E	; 78
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	80 81       	ld	r24, Z
    1144:	83 60       	ori	r24, 0x03	; 3
    1146:	8c 93       	st	X, r24
		TCCR1B|=(7<<0);

	#endif

		return;
}
    1148:	cf 91       	pop	r28
    114a:	df 91       	pop	r29
    114c:	08 95       	ret

0000114e <Pwm1_voidStop>:
void Pwm1_voidStop(void){
    114e:	df 93       	push	r29
    1150:	cf 93       	push	r28
    1152:	cd b7       	in	r28, 0x3d	; 61
    1154:	de b7       	in	r29, 0x3e	; 62
	TCCR1B&=~(7<<0);
    1156:	ae e4       	ldi	r26, 0x4E	; 78
    1158:	b0 e0       	ldi	r27, 0x00	; 0
    115a:	ee e4       	ldi	r30, 0x4E	; 78
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	80 81       	ld	r24, Z
    1160:	88 7f       	andi	r24, 0xF8	; 248
    1162:	8c 93       	st	X, r24
	return;
}
    1164:	cf 91       	pop	r28
    1166:	df 91       	pop	r29
    1168:	08 95       	ret

0000116a <TIMER0_voidInit>:
static void (*ptr_ovf)(void)=NULL;
static void (*ptr_Ctc)(void)=NULL;

u16 Timer0_Num_OVF = 0;
u8 Timer0_Init_Value = 0;
void TIMER0_voidInit(void){
    116a:	df 93       	push	r29
    116c:	cf 93       	push	r28
    116e:	cd b7       	in	r28, 0x3d	; 61
    1170:	de b7       	in	r29, 0x3e	; 62


#if TIMER0_MODE==NORMAL_MODE
	TCCR0=0X00;
    1172:	e3 e5       	ldi	r30, 0x53	; 83
    1174:	f0 e0       	ldi	r31, 0x00	; 0
    1176:	10 82       	st	Z, r1
	TIMSK|=(1<<0);
    1178:	a9 e5       	ldi	r26, 0x59	; 89
    117a:	b0 e0       	ldi	r27, 0x00	; 0
    117c:	e9 e5       	ldi	r30, 0x59	; 89
    117e:	f0 e0       	ldi	r31, 0x00	; 0
    1180:	80 81       	ld	r24, Z
    1182:	81 60       	ori	r24, 0x01	; 1
    1184:	8c 93       	st	X, r24
	TCCR0|=(1<<3);
//	TIMSK|=(1<<1);

#endif
	return ;
}
    1186:	cf 91       	pop	r28
    1188:	df 91       	pop	r29
    118a:	08 95       	ret

0000118c <TIMER0_voidStart>:
void TIMER0_voidStart(void){
    118c:	df 93       	push	r29
    118e:	cf 93       	push	r28
    1190:	cd b7       	in	r28, 0x3d	; 61
    1192:	de b7       	in	r29, 0x3e	; 62

	TCCR0&=~(7<<0);
    1194:	a3 e5       	ldi	r26, 0x53	; 83
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	e3 e5       	ldi	r30, 0x53	; 83
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	88 7f       	andi	r24, 0xF8	; 248
    11a0:	8c 93       	st	X, r24
#if TIMER0_PRES ==PRES_0
	//do nothing
#elif TIMER0_PRES==PRES_1
	TCCR0|=(1<<0);
    11a2:	a3 e5       	ldi	r26, 0x53	; 83
    11a4:	b0 e0       	ldi	r27, 0x00	; 0
    11a6:	e3 e5       	ldi	r30, 0x53	; 83
    11a8:	f0 e0       	ldi	r31, 0x00	; 0
    11aa:	80 81       	ld	r24, Z
    11ac:	81 60       	ori	r24, 0x01	; 1
    11ae:	8c 93       	st	X, r24

#endif
#endif
	return ;

	}
    11b0:	cf 91       	pop	r28
    11b2:	df 91       	pop	r29
    11b4:	08 95       	ret

000011b6 <TIMER0_voidStop>:
void TIMER0_voidStop(void){
    11b6:	df 93       	push	r29
    11b8:	cf 93       	push	r28
    11ba:	cd b7       	in	r28, 0x3d	; 61
    11bc:	de b7       	in	r29, 0x3e	; 62
	TCCR0&=~(7<<0);
    11be:	a3 e5       	ldi	r26, 0x53	; 83
    11c0:	b0 e0       	ldi	r27, 0x00	; 0
    11c2:	e3 e5       	ldi	r30, 0x53	; 83
    11c4:	f0 e0       	ldi	r31, 0x00	; 0
    11c6:	80 81       	ld	r24, Z
    11c8:	88 7f       	andi	r24, 0xF8	; 248
    11ca:	8c 93       	st	X, r24
	return;
}
    11cc:	cf 91       	pop	r28
    11ce:	df 91       	pop	r29
    11d0:	08 95       	ret

000011d2 <TIMER0_voidDelay>:
void TIMER0_voidDelay(u16 copy_u16millisec){
    11d2:	ef 92       	push	r14
    11d4:	ff 92       	push	r15
    11d6:	0f 93       	push	r16
    11d8:	1f 93       	push	r17
    11da:	df 93       	push	r29
    11dc:	cf 93       	push	r28
    11de:	cd b7       	in	r28, 0x3d	; 61
    11e0:	de b7       	in	r29, 0x3e	; 62
    11e2:	62 97       	sbiw	r28, 0x12	; 18
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	9a 8b       	std	Y+18, r25	; 0x12
    11f0:	89 8b       	std	Y+17, r24	; 0x11

	u16 local_u16Num_ov,local_u16TimeInitial;
	double local_doubleTimeMaxDelay,local_doubleTimetick;
	u32 local_u32OverFlowCounnt=0;
    11f2:	19 82       	std	Y+1, r1	; 0x01
    11f4:	1a 82       	std	Y+2, r1	; 0x02
    11f6:	1b 82       	std	Y+3, r1	; 0x03
    11f8:	1c 82       	std	Y+4, r1	; 0x04

	local_doubleTimetick = 1024.0/16000.0;   // pres/F_CPU
    11fa:	8f e6       	ldi	r24, 0x6F	; 111
    11fc:	92 e1       	ldi	r25, 0x12	; 18
    11fe:	a3 e8       	ldi	r26, 0x83	; 131
    1200:	bd e3       	ldi	r27, 0x3D	; 61
    1202:	8d 83       	std	Y+5, r24	; 0x05
    1204:	9e 83       	std	Y+6, r25	; 0x06
    1206:	af 83       	std	Y+7, r26	; 0x07
    1208:	b8 87       	std	Y+8, r27	; 0x08

	local_doubleTimeMaxDelay= 256.0*1024.0/16000.0; //ms		Tmaxdelay = Ttick * 2^8
    120a:	8f e6       	ldi	r24, 0x6F	; 111
    120c:	92 e1       	ldi	r25, 0x12	; 18
    120e:	a3 e8       	ldi	r26, 0x83	; 131
    1210:	b1 e4       	ldi	r27, 0x41	; 65
    1212:	89 87       	std	Y+9, r24	; 0x09
    1214:	9a 87       	std	Y+10, r25	; 0x0a
    1216:	ab 87       	std	Y+11, r26	; 0x0b
    1218:	bc 87       	std	Y+12, r27	; 0x0c
	if(copy_u16millisec<local_doubleTimeMaxDelay){
    121a:	89 89       	ldd	r24, Y+17	; 0x11
    121c:	9a 89       	ldd	r25, Y+18	; 0x12
    121e:	cc 01       	movw	r24, r24
    1220:	a0 e0       	ldi	r26, 0x00	; 0
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	bc 01       	movw	r22, r24
    1226:	cd 01       	movw	r24, r26
    1228:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    122c:	dc 01       	movw	r26, r24
    122e:	cb 01       	movw	r24, r22
    1230:	bc 01       	movw	r22, r24
    1232:	cd 01       	movw	r24, r26
    1234:	29 85       	ldd	r18, Y+9	; 0x09
    1236:	3a 85       	ldd	r19, Y+10	; 0x0a
    1238:	4b 85       	ldd	r20, Y+11	; 0x0b
    123a:	5c 85       	ldd	r21, Y+12	; 0x0c
    123c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1240:	88 23       	and	r24, r24
    1242:	54 f5       	brge	.+84     	; 0x1298 <TIMER0_voidDelay+0xc6>
		local_u16TimeInitial = (local_doubleTimeMaxDelay-copy_u16millisec)/local_doubleTimetick;
    1244:	89 89       	ldd	r24, Y+17	; 0x11
    1246:	9a 89       	ldd	r25, Y+18	; 0x12
    1248:	cc 01       	movw	r24, r24
    124a:	a0 e0       	ldi	r26, 0x00	; 0
    124c:	b0 e0       	ldi	r27, 0x00	; 0
    124e:	bc 01       	movw	r22, r24
    1250:	cd 01       	movw	r24, r26
    1252:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1256:	9b 01       	movw	r18, r22
    1258:	ac 01       	movw	r20, r24
    125a:	69 85       	ldd	r22, Y+9	; 0x09
    125c:	7a 85       	ldd	r23, Y+10	; 0x0a
    125e:	8b 85       	ldd	r24, Y+11	; 0x0b
    1260:	9c 85       	ldd	r25, Y+12	; 0x0c
    1262:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1266:	dc 01       	movw	r26, r24
    1268:	cb 01       	movw	r24, r22
    126a:	bc 01       	movw	r22, r24
    126c:	cd 01       	movw	r24, r26
    126e:	2d 81       	ldd	r18, Y+5	; 0x05
    1270:	3e 81       	ldd	r19, Y+6	; 0x06
    1272:	4f 81       	ldd	r20, Y+7	; 0x07
    1274:	58 85       	ldd	r21, Y+8	; 0x08
    1276:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    127a:	dc 01       	movw	r26, r24
    127c:	cb 01       	movw	r24, r22
    127e:	bc 01       	movw	r22, r24
    1280:	cd 01       	movw	r24, r26
    1282:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1286:	dc 01       	movw	r26, r24
    1288:	cb 01       	movw	r24, r22
    128a:	9e 87       	std	Y+14, r25	; 0x0e
    128c:	8d 87       	std	Y+13, r24	; 0x0d
		local_u16Num_ov = 1;
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	90 e0       	ldi	r25, 0x00	; 0
    1292:	98 8b       	std	Y+16, r25	; 0x10
    1294:	8f 87       	std	Y+15, r24	; 0x0f
    1296:	72 c0       	rjmp	.+228    	; 0x137c <TIMER0_voidDelay+0x1aa>

	}else if(copy_u16millisec == (int)local_doubleTimeMaxDelay){
    1298:	69 85       	ldd	r22, Y+9	; 0x09
    129a:	7a 85       	ldd	r23, Y+10	; 0x0a
    129c:	8b 85       	ldd	r24, Y+11	; 0x0b
    129e:	9c 85       	ldd	r25, Y+12	; 0x0c
    12a0:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
    12a4:	dc 01       	movw	r26, r24
    12a6:	cb 01       	movw	r24, r22
    12a8:	9c 01       	movw	r18, r24
    12aa:	89 89       	ldd	r24, Y+17	; 0x11
    12ac:	9a 89       	ldd	r25, Y+18	; 0x12
    12ae:	28 17       	cp	r18, r24
    12b0:	39 07       	cpc	r19, r25
    12b2:	39 f4       	brne	.+14     	; 0x12c2 <TIMER0_voidDelay+0xf0>
		local_u16TimeInitial=0;
    12b4:	1e 86       	std	Y+14, r1	; 0x0e
    12b6:	1d 86       	std	Y+13, r1	; 0x0d
		local_u16Num_ov=1;
    12b8:	81 e0       	ldi	r24, 0x01	; 1
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	98 8b       	std	Y+16, r25	; 0x10
    12be:	8f 87       	std	Y+15, r24	; 0x0f
    12c0:	5d c0       	rjmp	.+186    	; 0x137c <TIMER0_voidDelay+0x1aa>
	}else{
		local_u16Num_ov = ceil((double)copy_u16millisec/local_doubleTimeMaxDelay);
    12c2:	89 89       	ldd	r24, Y+17	; 0x11
    12c4:	9a 89       	ldd	r25, Y+18	; 0x12
    12c6:	cc 01       	movw	r24, r24
    12c8:	a0 e0       	ldi	r26, 0x00	; 0
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	bc 01       	movw	r22, r24
    12ce:	cd 01       	movw	r24, r26
    12d0:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    12d4:	dc 01       	movw	r26, r24
    12d6:	cb 01       	movw	r24, r22
    12d8:	bc 01       	movw	r22, r24
    12da:	cd 01       	movw	r24, r26
    12dc:	29 85       	ldd	r18, Y+9	; 0x09
    12de:	3a 85       	ldd	r19, Y+10	; 0x0a
    12e0:	4b 85       	ldd	r20, Y+11	; 0x0b
    12e2:	5c 85       	ldd	r21, Y+12	; 0x0c
    12e4:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    12e8:	dc 01       	movw	r26, r24
    12ea:	cb 01       	movw	r24, r22
    12ec:	bc 01       	movw	r22, r24
    12ee:	cd 01       	movw	r24, r26
    12f0:	0e 94 c0 1e 	call	0x3d80	; 0x3d80 <ceil>
    12f4:	dc 01       	movw	r26, r24
    12f6:	cb 01       	movw	r24, r22
    12f8:	bc 01       	movw	r22, r24
    12fa:	cd 01       	movw	r24, r26
    12fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1300:	dc 01       	movw	r26, r24
    1302:	cb 01       	movw	r24, r22
    1304:	98 8b       	std	Y+16, r25	; 0x10
    1306:	8f 87       	std	Y+15, r24	; 0x0f
		local_u16TimeInitial= (1<<8) - ((double)copy_u16millisec/local_doubleTimetick)/local_u16Num_ov;
    1308:	89 89       	ldd	r24, Y+17	; 0x11
    130a:	9a 89       	ldd	r25, Y+18	; 0x12
    130c:	cc 01       	movw	r24, r24
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	bc 01       	movw	r22, r24
    1314:	cd 01       	movw	r24, r26
    1316:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    131a:	dc 01       	movw	r26, r24
    131c:	cb 01       	movw	r24, r22
    131e:	bc 01       	movw	r22, r24
    1320:	cd 01       	movw	r24, r26
    1322:	2d 81       	ldd	r18, Y+5	; 0x05
    1324:	3e 81       	ldd	r19, Y+6	; 0x06
    1326:	4f 81       	ldd	r20, Y+7	; 0x07
    1328:	58 85       	ldd	r21, Y+8	; 0x08
    132a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	7c 01       	movw	r14, r24
    1334:	8d 01       	movw	r16, r26
    1336:	8f 85       	ldd	r24, Y+15	; 0x0f
    1338:	98 89       	ldd	r25, Y+16	; 0x10
    133a:	cc 01       	movw	r24, r24
    133c:	a0 e0       	ldi	r26, 0x00	; 0
    133e:	b0 e0       	ldi	r27, 0x00	; 0
    1340:	bc 01       	movw	r22, r24
    1342:	cd 01       	movw	r24, r26
    1344:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    1348:	9b 01       	movw	r18, r22
    134a:	ac 01       	movw	r20, r24
    134c:	c8 01       	movw	r24, r16
    134e:	b7 01       	movw	r22, r14
    1350:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    1354:	dc 01       	movw	r26, r24
    1356:	cb 01       	movw	r24, r22
    1358:	9c 01       	movw	r18, r24
    135a:	ad 01       	movw	r20, r26
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	70 e0       	ldi	r23, 0x00	; 0
    1360:	80 e8       	ldi	r24, 0x80	; 128
    1362:	93 e4       	ldi	r25, 0x43	; 67
    1364:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    1368:	dc 01       	movw	r26, r24
    136a:	cb 01       	movw	r24, r22
    136c:	bc 01       	movw	r22, r24
    136e:	cd 01       	movw	r24, r26
    1370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1374:	dc 01       	movw	r26, r24
    1376:	cb 01       	movw	r24, r22
    1378:	9e 87       	std	Y+14, r25	; 0x0e
    137a:	8d 87       	std	Y+13, r24	; 0x0d

	}
	LCD_voidWritInteger(local_u16Num_ov);
    137c:	8f 85       	ldd	r24, Y+15	; 0x0f
    137e:	98 89       	ldd	r25, Y+16	; 0x10
    1380:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_voidWritInteger>
	LCD_voidWritInteger(local_u16TimeInitial);
    1384:	8d 85       	ldd	r24, Y+13	; 0x0d
    1386:	9e 85       	ldd	r25, Y+14	; 0x0e
    1388:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_voidWritInteger>
	TCNT0 = local_u16TimeInitial;
    138c:	e2 e5       	ldi	r30, 0x52	; 82
    138e:	f0 e0       	ldi	r31, 0x00	; 0
    1390:	8d 85       	ldd	r24, Y+13	; 0x0d
    1392:	80 83       	st	Z, r24
	TIMER0_voidStart();
    1394:	0e 94 c6 08 	call	0x118c	; 0x118c <TIMER0_voidStart>
    1398:	1b c0       	rjmp	.+54     	; 0x13d0 <TIMER0_voidDelay+0x1fe>

	while(local_u32OverFlowCounnt<local_u16Num_ov){

		while(((TIFR>>0)&1)==0);
    139a:	e8 e5       	ldi	r30, 0x58	; 88
    139c:	f0 e0       	ldi	r31, 0x00	; 0
    139e:	80 81       	ld	r24, Z
    13a0:	88 2f       	mov	r24, r24
    13a2:	90 e0       	ldi	r25, 0x00	; 0
    13a4:	81 70       	andi	r24, 0x01	; 1
    13a6:	90 70       	andi	r25, 0x00	; 0
    13a8:	00 97       	sbiw	r24, 0x00	; 0
    13aa:	b9 f3       	breq	.-18     	; 0x139a <TIMER0_voidDelay+0x1c8>

		TIFR|=(1<<0);
    13ac:	a8 e5       	ldi	r26, 0x58	; 88
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	e8 e5       	ldi	r30, 0x58	; 88
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	81 60       	ori	r24, 0x01	; 1
    13b8:	8c 93       	st	X, r24

		local_u32OverFlowCounnt++;
    13ba:	89 81       	ldd	r24, Y+1	; 0x01
    13bc:	9a 81       	ldd	r25, Y+2	; 0x02
    13be:	ab 81       	ldd	r26, Y+3	; 0x03
    13c0:	bc 81       	ldd	r27, Y+4	; 0x04
    13c2:	01 96       	adiw	r24, 0x01	; 1
    13c4:	a1 1d       	adc	r26, r1
    13c6:	b1 1d       	adc	r27, r1
    13c8:	89 83       	std	Y+1, r24	; 0x01
    13ca:	9a 83       	std	Y+2, r25	; 0x02
    13cc:	ab 83       	std	Y+3, r26	; 0x03
    13ce:	bc 83       	std	Y+4, r27	; 0x04
	LCD_voidWritInteger(local_u16Num_ov);
	LCD_voidWritInteger(local_u16TimeInitial);
	TCNT0 = local_u16TimeInitial;
	TIMER0_voidStart();

	while(local_u32OverFlowCounnt<local_u16Num_ov){
    13d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d2:	98 89       	ldd	r25, Y+16	; 0x10
    13d4:	9c 01       	movw	r18, r24
    13d6:	40 e0       	ldi	r20, 0x00	; 0
    13d8:	50 e0       	ldi	r21, 0x00	; 0
    13da:	89 81       	ldd	r24, Y+1	; 0x01
    13dc:	9a 81       	ldd	r25, Y+2	; 0x02
    13de:	ab 81       	ldd	r26, Y+3	; 0x03
    13e0:	bc 81       	ldd	r27, Y+4	; 0x04
    13e2:	82 17       	cp	r24, r18
    13e4:	93 07       	cpc	r25, r19
    13e6:	a4 07       	cpc	r26, r20
    13e8:	b5 07       	cpc	r27, r21
    13ea:	b8 f2       	brcs	.-82     	; 0x139a <TIMER0_voidDelay+0x1c8>
		TIFR|=(1<<0);

		local_u32OverFlowCounnt++;
	}

	TCCR0=0x00;
    13ec:	e3 e5       	ldi	r30, 0x53	; 83
    13ee:	f0 e0       	ldi	r31, 0x00	; 0
    13f0:	10 82       	st	Z, r1
	return ;
}
    13f2:	62 96       	adiw	r28, 0x12	; 18
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	1f 91       	pop	r17
    1404:	0f 91       	pop	r16
    1406:	ff 90       	pop	r15
    1408:	ef 90       	pop	r14
    140a:	08 95       	ret

0000140c <TIMER0_voidCallBack>:





void TIMER0_voidCallBack(void (*fun)(void)){
    140c:	df 93       	push	r29
    140e:	cf 93       	push	r28
    1410:	00 d0       	rcall	.+0      	; 0x1412 <TIMER0_voidCallBack+0x6>
    1412:	cd b7       	in	r28, 0x3d	; 61
    1414:	de b7       	in	r29, 0x3e	; 62
    1416:	9a 83       	std	Y+2, r25	; 0x02
    1418:	89 83       	std	Y+1, r24	; 0x01

#if TIMER0_MODE==NORMAL_MODE
	ptr_ovf=fun;
    141a:	89 81       	ldd	r24, Y+1	; 0x01
    141c:	9a 81       	ldd	r25, Y+2	; 0x02
    141e:	90 93 9d 01 	sts	0x019D, r25
    1422:	80 93 9c 01 	sts	0x019C, r24
#elif TIMER0_MODE==CTC_MODE
	ptr_Ctc=fun;
#endif
	return ;

}
    1426:	0f 90       	pop	r0
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <PWM0_voidInit>:
void PWM0_voidInit(void){
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	cd b7       	in	r28, 0x3d	; 61
    1436:	de b7       	in	r29, 0x3e	; 62

#if PWM0_MODE==FAST_PWM_MODE
TCCR0|=(1<<3);
    1438:	a3 e5       	ldi	r26, 0x53	; 83
    143a:	b0 e0       	ldi	r27, 0x00	; 0
    143c:	e3 e5       	ldi	r30, 0x53	; 83
    143e:	f0 e0       	ldi	r31, 0x00	; 0
    1440:	80 81       	ld	r24, Z
    1442:	88 60       	ori	r24, 0x08	; 8
    1444:	8c 93       	st	X, r24
TCCR0|=(1<<6);
    1446:	a3 e5       	ldi	r26, 0x53	; 83
    1448:	b0 e0       	ldi	r27, 0x00	; 0
    144a:	e3 e5       	ldi	r30, 0x53	; 83
    144c:	f0 e0       	ldi	r31, 0x00	; 0
    144e:	80 81       	ld	r24, Z
    1450:	80 64       	ori	r24, 0x40	; 64
    1452:	8c 93       	st	X, r24
#elif PWM0_MODE==PHASE_PWM_MODE
TCCR0|=(1<<6);

#endif
#if OUTPUT_MODE==NON_INVERTED
TCCR0|=(1<<5);
    1454:	a3 e5       	ldi	r26, 0x53	; 83
    1456:	b0 e0       	ldi	r27, 0x00	; 0
    1458:	e3 e5       	ldi	r30, 0x53	; 83
    145a:	f0 e0       	ldi	r31, 0x00	; 0
    145c:	80 81       	ld	r24, Z
    145e:	80 62       	ori	r24, 0x20	; 32
    1460:	8c 93       	st	X, r24
TCCR0|=(3<<4);

#endif
return;

	}
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <PWM0_voidSetDuty>:
void PWM0_voidSetDuty(u8 Copy_u8Duty){
    1468:	df 93       	push	r29
    146a:	cf 93       	push	r28
    146c:	0f 92       	push	r0
    146e:	cd b7       	in	r28, 0x3d	; 61
    1470:	de b7       	in	r29, 0x3e	; 62
    1472:	89 83       	std	Y+1, r24	; 0x01

	if(Copy_u8Duty < 0)
			Copy_u8Duty = 0;
		else if(Copy_u8Duty > 100)
    1474:	89 81       	ldd	r24, Y+1	; 0x01
    1476:	85 36       	cpi	r24, 0x65	; 101
    1478:	10 f0       	brcs	.+4      	; 0x147e <PWM0_voidSetDuty+0x16>
			Copy_u8Duty = 100;
    147a:	84 e6       	ldi	r24, 0x64	; 100
    147c:	89 83       	std	Y+1, r24	; 0x01

			#endif
		#endif

return;
}
    147e:	0f 90       	pop	r0
    1480:	cf 91       	pop	r28
    1482:	df 91       	pop	r29
    1484:	08 95       	ret

00001486 <PWM0_voidStart>:
void PWM0_voidStart(){
    1486:	df 93       	push	r29
    1488:	cf 93       	push	r28
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStart();
    148e:	0e 94 c6 08 	call	0x118c	; 0x118c <TIMER0_voidStart>
	return;
}
    1492:	cf 91       	pop	r28
    1494:	df 91       	pop	r29
    1496:	08 95       	ret

00001498 <PWM0_voidStop>:
void PWM0_voidStop(){
    1498:	df 93       	push	r29
    149a:	cf 93       	push	r28
    149c:	cd b7       	in	r28, 0x3d	; 61
    149e:	de b7       	in	r29, 0x3e	; 62
	TIMER0_voidStop();
    14a0:	0e 94 db 08 	call	0x11b6	; 0x11b6 <TIMER0_voidStop>
	return;
}
    14a4:	cf 91       	pop	r28
    14a6:	df 91       	pop	r29
    14a8:	08 95       	ret

000014aa <__vector_10>:
void __vector_10(void)__attribute__((signal));
	void __vector_10 (void)
	{static u32 local_enu32count=0;
    14aa:	1f 92       	push	r1
    14ac:	0f 92       	push	r0
    14ae:	0f b6       	in	r0, 0x3f	; 63
    14b0:	0f 92       	push	r0
    14b2:	11 24       	eor	r1, r1
    14b4:	2f 93       	push	r18
    14b6:	3f 93       	push	r19
    14b8:	4f 93       	push	r20
    14ba:	5f 93       	push	r21
    14bc:	6f 93       	push	r22
    14be:	7f 93       	push	r23
    14c0:	8f 93       	push	r24
    14c2:	9f 93       	push	r25
    14c4:	af 93       	push	r26
    14c6:	bf 93       	push	r27
    14c8:	ef 93       	push	r30
    14ca:	ff 93       	push	r31
    14cc:	df 93       	push	r29
    14ce:	cf 93       	push	r28
    14d0:	cd b7       	in	r28, 0x3d	; 61
    14d2:	de b7       	in	r29, 0x3e	; 62
	local_enu32count++;
    14d4:	80 91 a3 01 	lds	r24, 0x01A3
    14d8:	90 91 a4 01 	lds	r25, 0x01A4
    14dc:	a0 91 a5 01 	lds	r26, 0x01A5
    14e0:	b0 91 a6 01 	lds	r27, 0x01A6
    14e4:	01 96       	adiw	r24, 0x01	; 1
    14e6:	a1 1d       	adc	r26, r1
    14e8:	b1 1d       	adc	r27, r1
    14ea:	80 93 a3 01 	sts	0x01A3, r24
    14ee:	90 93 a4 01 	sts	0x01A4, r25
    14f2:	a0 93 a5 01 	sts	0x01A5, r26
    14f6:	b0 93 a6 01 	sts	0x01A6, r27

		if (ptr_Ctc != NULL)
    14fa:	80 91 9e 01 	lds	r24, 0x019E
    14fe:	90 91 9f 01 	lds	r25, 0x019F
    1502:	00 97       	sbiw	r24, 0x00	; 0
    1504:	09 f4       	brne	.+2      	; 0x1508 <__vector_10+0x5e>
    1506:	67 c0       	rjmp	.+206    	; 0x15d6 <__vector_10+0x12c>
		{

			if(local_enu32count == 1 && Timer0_Num_OVF ==local_enu32count)
    1508:	80 91 a3 01 	lds	r24, 0x01A3
    150c:	90 91 a4 01 	lds	r25, 0x01A4
    1510:	a0 91 a5 01 	lds	r26, 0x01A5
    1514:	b0 91 a6 01 	lds	r27, 0x01A6
    1518:	81 30       	cpi	r24, 0x01	; 1
    151a:	91 05       	cpc	r25, r1
    151c:	a1 05       	cpc	r26, r1
    151e:	b1 05       	cpc	r27, r1
    1520:	39 f5       	brne	.+78     	; 0x1570 <__vector_10+0xc6>
    1522:	80 91 a0 01 	lds	r24, 0x01A0
    1526:	90 91 a1 01 	lds	r25, 0x01A1
    152a:	9c 01       	movw	r18, r24
    152c:	40 e0       	ldi	r20, 0x00	; 0
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	80 91 a3 01 	lds	r24, 0x01A3
    1534:	90 91 a4 01 	lds	r25, 0x01A4
    1538:	a0 91 a5 01 	lds	r26, 0x01A5
    153c:	b0 91 a6 01 	lds	r27, 0x01A6
    1540:	28 17       	cp	r18, r24
    1542:	39 07       	cpc	r19, r25
    1544:	4a 07       	cpc	r20, r26
    1546:	5b 07       	cpc	r21, r27
    1548:	99 f4       	brne	.+38     	; 0x1570 <__vector_10+0xc6>
				{

					ptr_Ctc();
    154a:	e0 91 9e 01 	lds	r30, 0x019E
    154e:	f0 91 9f 01 	lds	r31, 0x019F
    1552:	09 95       	icall

					local_enu32count = 0;
    1554:	10 92 a3 01 	sts	0x01A3, r1
    1558:	10 92 a4 01 	sts	0x01A4, r1
    155c:	10 92 a5 01 	sts	0x01A5, r1
    1560:	10 92 a6 01 	sts	0x01A6, r1
					OCR0 = Timer0_Init_Value;
    1564:	ec e5       	ldi	r30, 0x5C	; 92
    1566:	f0 e0       	ldi	r31, 0x00	; 0
    1568:	80 91 a2 01 	lds	r24, 0x01A2
    156c:	80 83       	st	Z, r24
    156e:	33 c0       	rjmp	.+102    	; 0x15d6 <__vector_10+0x12c>
				}
				else if(local_enu32count== 1)
    1570:	80 91 a3 01 	lds	r24, 0x01A3
    1574:	90 91 a4 01 	lds	r25, 0x01A4
    1578:	a0 91 a5 01 	lds	r26, 0x01A5
    157c:	b0 91 a6 01 	lds	r27, 0x01A6
    1580:	81 30       	cpi	r24, 0x01	; 1
    1582:	91 05       	cpc	r25, r1
    1584:	a1 05       	cpc	r26, r1
    1586:	b1 05       	cpc	r27, r1
    1588:	29 f4       	brne	.+10     	; 0x1594 <__vector_10+0xea>
					OCR0 = 255;
    158a:	ec e5       	ldi	r30, 0x5C	; 92
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	80 83       	st	Z, r24
    1592:	21 c0       	rjmp	.+66     	; 0x15d6 <__vector_10+0x12c>
				else if(Timer0_Num_OVF == local_enu32count)
    1594:	80 91 a0 01 	lds	r24, 0x01A0
    1598:	90 91 a1 01 	lds	r25, 0x01A1
    159c:	9c 01       	movw	r18, r24
    159e:	40 e0       	ldi	r20, 0x00	; 0
    15a0:	50 e0       	ldi	r21, 0x00	; 0
    15a2:	80 91 a3 01 	lds	r24, 0x01A3
    15a6:	90 91 a4 01 	lds	r25, 0x01A4
    15aa:	a0 91 a5 01 	lds	r26, 0x01A5
    15ae:	b0 91 a6 01 	lds	r27, 0x01A6
    15b2:	28 17       	cp	r18, r24
    15b4:	39 07       	cpc	r19, r25
    15b6:	4a 07       	cpc	r20, r26
    15b8:	5b 07       	cpc	r21, r27
    15ba:	69 f4       	brne	.+26     	; 0x15d6 <__vector_10+0x12c>
				{
					// Write your code here


					local_enu32count= 0;
    15bc:	10 92 a3 01 	sts	0x01A3, r1
    15c0:	10 92 a4 01 	sts	0x01A4, r1
    15c4:	10 92 a5 01 	sts	0x01A5, r1
    15c8:	10 92 a6 01 	sts	0x01A6, r1
					OCR0 = Timer0_Init_Value;
    15cc:	ec e5       	ldi	r30, 0x5C	; 92
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 91 a2 01 	lds	r24, 0x01A2
    15d4:	80 83       	st	Z, r24
				}
		}
	}
    15d6:	cf 91       	pop	r28
    15d8:	df 91       	pop	r29
    15da:	ff 91       	pop	r31
    15dc:	ef 91       	pop	r30
    15de:	bf 91       	pop	r27
    15e0:	af 91       	pop	r26
    15e2:	9f 91       	pop	r25
    15e4:	8f 91       	pop	r24
    15e6:	7f 91       	pop	r23
    15e8:	6f 91       	pop	r22
    15ea:	5f 91       	pop	r21
    15ec:	4f 91       	pop	r20
    15ee:	3f 91       	pop	r19
    15f0:	2f 91       	pop	r18
    15f2:	0f 90       	pop	r0
    15f4:	0f be       	out	0x3f, r0	; 63
    15f6:	0f 90       	pop	r0
    15f8:	1f 90       	pop	r1
    15fa:	18 95       	reti

000015fc <__vector_6>:

/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER1_CAPT_vect){
    15fc:	1f 92       	push	r1
    15fe:	0f 92       	push	r0
    1600:	0f b6       	in	r0, 0x3f	; 63
    1602:	0f 92       	push	r0
    1604:	11 24       	eor	r1, r1
    1606:	2f 93       	push	r18
    1608:	3f 93       	push	r19
    160a:	4f 93       	push	r20
    160c:	5f 93       	push	r21
    160e:	6f 93       	push	r22
    1610:	7f 93       	push	r23
    1612:	8f 93       	push	r24
    1614:	9f 93       	push	r25
    1616:	af 93       	push	r26
    1618:	bf 93       	push	r27
    161a:	ef 93       	push	r30
    161c:	ff 93       	push	r31
    161e:	df 93       	push	r29
    1620:	cf 93       	push	r28
    1622:	cd b7       	in	r28, 0x3d	; 61
    1624:	de b7       	in	r29, 0x3e	; 62
	if(ICU_callBackPtr != NULL)
    1626:	80 91 a7 01 	lds	r24, 0x01A7
    162a:	90 91 a8 01 	lds	r25, 0x01A8
    162e:	00 97       	sbiw	r24, 0x00	; 0
    1630:	29 f0       	breq	.+10     	; 0x163c <__vector_6+0x40>
	{

		ICU_callBackPtr(); /* another method to call the function using pointer to function g_callBackPtr(); */
    1632:	e0 91 a7 01 	lds	r30, 0x01A7
    1636:	f0 91 a8 01 	lds	r31, 0x01A8
    163a:	09 95       	icall
	}
}
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	ff 91       	pop	r31
    1642:	ef 91       	pop	r30
    1644:	bf 91       	pop	r27
    1646:	af 91       	pop	r26
    1648:	9f 91       	pop	r25
    164a:	8f 91       	pop	r24
    164c:	7f 91       	pop	r23
    164e:	6f 91       	pop	r22
    1650:	5f 91       	pop	r21
    1652:	4f 91       	pop	r20
    1654:	3f 91       	pop	r19
    1656:	2f 91       	pop	r18
    1658:	0f 90       	pop	r0
    165a:	0f be       	out	0x3f, r0	; 63
    165c:	0f 90       	pop	r0
    165e:	1f 90       	pop	r1
    1660:	18 95       	reti

00001662 <Icu_voidInit>:
 * 	2. Set the required edge detection.
 * 	3. Enable the Input Capture Interrupt.
 * 	4. Initialize Timer1 Registers
 */
void Icu_voidInit(const Icu_ConfigType * Config_Ptr)
{
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	00 d0       	rcall	.+0      	; 0x1668 <Icu_voidInit+0x6>
    1668:	cd b7       	in	r28, 0x3d	; 61
    166a:	de b7       	in	r29, 0x3e	; 62
    166c:	9a 83       	std	Y+2, r25	; 0x02
    166e:	89 83       	std	Y+1, r24	; 0x01
	/* Configure ICP1/PD6 as i/p pin */
	DIO_voidSetPinDirection(DIO_u8GROUP_D,DIO_u8PIN6,DIO_u8INPUT);
    1670:	83 e0       	ldi	r24, 0x03	; 3
    1672:	66 e0       	ldi	r22, 0x06	; 6
    1674:	40 e0       	ldi	r20, 0x00	; 0
    1676:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>

	/* Timer1 always operates in Normal Mode */
	TCCR1A = (1<<3) | (1<<2);
    167a:	ef e4       	ldi	r30, 0x4F	; 79
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	8c e0       	ldi	r24, 0x0C	; 12
    1680:	80 83       	st	Z, r24
	/*
	 * insert the required clock value in the first three bits (CS10, CS11 and CS12)
	 * of TCCR1B Register
	 */

	TCCR1B = (TCCR1B & 0xF8) | (Config_Ptr->clock);
    1682:	ae e4       	ldi	r26, 0x4E	; 78
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	ee e4       	ldi	r30, 0x4E	; 78
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	98 2f       	mov	r25, r24
    168e:	98 7f       	andi	r25, 0xF8	; 248
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	80 81       	ld	r24, Z
    1696:	89 2b       	or	r24, r25
    1698:	8c 93       	st	X, r24
	/*
     * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | ((Config_Ptr->edge)<<6);
    169a:	ae e4       	ldi	r26, 0x4E	; 78
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	ee e4       	ldi	r30, 0x4E	; 78
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	28 2f       	mov	r18, r24
    16a6:	2f 7b       	andi	r18, 0xBF	; 191
    16a8:	e9 81       	ldd	r30, Y+1	; 0x01
    16aa:	fa 81       	ldd	r31, Y+2	; 0x02
    16ac:	81 81       	ldd	r24, Z+1	; 0x01
    16ae:	88 2f       	mov	r24, r24
    16b0:	90 e0       	ldi	r25, 0x00	; 0
    16b2:	00 24       	eor	r0, r0
    16b4:	96 95       	lsr	r25
    16b6:	87 95       	ror	r24
    16b8:	07 94       	ror	r0
    16ba:	96 95       	lsr	r25
    16bc:	87 95       	ror	r24
    16be:	07 94       	ror	r0
    16c0:	98 2f       	mov	r25, r24
    16c2:	80 2d       	mov	r24, r0
    16c4:	82 2b       	or	r24, r18
    16c6:	8c 93       	st	X, r24

	/* Initial Value for Timer1 */
	TCNT1 = 0;
    16c8:	ec e4       	ldi	r30, 0x4C	; 76
    16ca:	f0 e0       	ldi	r31, 0x00	; 0
    16cc:	11 82       	std	Z+1, r1	; 0x01
    16ce:	10 82       	st	Z, r1

	/* Initial Value for the input capture register */
	ICR1 = 0;
    16d0:	e6 e4       	ldi	r30, 0x46	; 70
    16d2:	f0 e0       	ldi	r31, 0x00	; 0
    16d4:	11 82       	std	Z+1, r1	; 0x01
    16d6:	10 82       	st	Z, r1

	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<5);
    16d8:	a9 e5       	ldi	r26, 0x59	; 89
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e9 e5       	ldi	r30, 0x59	; 89
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	80 81       	ld	r24, Z
    16e2:	80 62       	ori	r24, 0x20	; 32
    16e4:	8c 93       	st	X, r24
}
    16e6:	0f 90       	pop	r0
    16e8:	0f 90       	pop	r0
    16ea:	cf 91       	pop	r28
    16ec:	df 91       	pop	r29
    16ee:	08 95       	ret

000016f0 <Icu_voidSetCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Icu_voidSetCallBack(void(*a_ptr)(void))
{
    16f0:	df 93       	push	r29
    16f2:	cf 93       	push	r28
    16f4:	00 d0       	rcall	.+0      	; 0x16f6 <Icu_voidSetCallBack+0x6>
    16f6:	cd b7       	in	r28, 0x3d	; 61
    16f8:	de b7       	in	r29, 0x3e	; 62
    16fa:	9a 83       	std	Y+2, r25	; 0x02
    16fc:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	ICU_callBackPtr = a_ptr;
    16fe:	89 81       	ldd	r24, Y+1	; 0x01
    1700:	9a 81       	ldd	r25, Y+2	; 0x02
    1702:	90 93 a8 01 	sts	0x01A8, r25
    1706:	80 93 a7 01 	sts	0x01A7, r24
}
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	cf 91       	pop	r28
    1710:	df 91       	pop	r29
    1712:	08 95       	ret

00001714 <Icu_voidSetEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void Icu_voidSetEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    1714:	df 93       	push	r29
    1716:	cf 93       	push	r28
    1718:	0f 92       	push	r0
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
    171e:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF) | (a_edgeType<<6);
    1720:	ae e4       	ldi	r26, 0x4E	; 78
    1722:	b0 e0       	ldi	r27, 0x00	; 0
    1724:	ee e4       	ldi	r30, 0x4E	; 78
    1726:	f0 e0       	ldi	r31, 0x00	; 0
    1728:	80 81       	ld	r24, Z
    172a:	28 2f       	mov	r18, r24
    172c:	2f 7b       	andi	r18, 0xBF	; 191
    172e:	89 81       	ldd	r24, Y+1	; 0x01
    1730:	88 2f       	mov	r24, r24
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	00 24       	eor	r0, r0
    1736:	96 95       	lsr	r25
    1738:	87 95       	ror	r24
    173a:	07 94       	ror	r0
    173c:	96 95       	lsr	r25
    173e:	87 95       	ror	r24
    1740:	07 94       	ror	r0
    1742:	98 2f       	mov	r25, r24
    1744:	80 2d       	mov	r24, r0
    1746:	82 2b       	or	r24, r18
    1748:	8c 93       	st	X, r24
}
    174a:	0f 90       	pop	r0
    174c:	cf 91       	pop	r28
    174e:	df 91       	pop	r29
    1750:	08 95       	ret

00001752 <Icu_u16GetInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
u16 Icu_u16GetInputCaptureValue(void)
{
    1752:	df 93       	push	r29
    1754:	cf 93       	push	r28
    1756:	cd b7       	in	r28, 0x3d	; 61
    1758:	de b7       	in	r29, 0x3e	; 62
	//LCD_voidWritInteger(ICR1);
	return ICR1;
    175a:	e6 e4       	ldi	r30, 0x46	; 70
    175c:	f0 e0       	ldi	r31, 0x00	; 0
    175e:	80 81       	ld	r24, Z
    1760:	91 81       	ldd	r25, Z+1	; 0x01

}
    1762:	cf 91       	pop	r28
    1764:	df 91       	pop	r29
    1766:	08 95       	ret

00001768 <Icu_voidClearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void Icu_voidClearTimerValue(void)
{
    1768:	df 93       	push	r29
    176a:	cf 93       	push	r28
    176c:	cd b7       	in	r28, 0x3d	; 61
    176e:	de b7       	in	r29, 0x3e	; 62
	TCNT1 = 0;
    1770:	ec e4       	ldi	r30, 0x4C	; 76
    1772:	f0 e0       	ldi	r31, 0x00	; 0
    1774:	11 82       	std	Z+1, r1	; 0x01
    1776:	10 82       	st	Z, r1
}
    1778:	cf 91       	pop	r28
    177a:	df 91       	pop	r29
    177c:	08 95       	ret

0000177e <Icu_voidDeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void Icu_voidDeInit(void)
{
    177e:	df 93       	push	r29
    1780:	cf 93       	push	r28
    1782:	cd b7       	in	r28, 0x3d	; 61
    1784:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	TCCR1A = 0;
    1786:	ef e4       	ldi	r30, 0x4F	; 79
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	10 82       	st	Z, r1
	TCCR1B = 0;
    178c:	ee e4       	ldi	r30, 0x4E	; 78
    178e:	f0 e0       	ldi	r31, 0x00	; 0
    1790:	10 82       	st	Z, r1
	TCNT1 = 0;
    1792:	ec e4       	ldi	r30, 0x4C	; 76
    1794:	f0 e0       	ldi	r31, 0x00	; 0
    1796:	11 82       	std	Z+1, r1	; 0x01
    1798:	10 82       	st	Z, r1
	ICR1 = 0;
    179a:	e6 e4       	ldi	r30, 0x46	; 70
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	11 82       	std	Z+1, r1	; 0x01
    17a0:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	TIMSK &= ~(1<<5);
    17a2:	a9 e5       	ldi	r26, 0x59	; 89
    17a4:	b0 e0       	ldi	r27, 0x00	; 0
    17a6:	e9 e5       	ldi	r30, 0x59	; 89
    17a8:	f0 e0       	ldi	r31, 0x00	; 0
    17aa:	80 81       	ld	r24, Z
    17ac:	8f 7d       	andi	r24, 0xDF	; 223
    17ae:	8c 93       	st	X, r24
}
    17b0:	cf 91       	pop	r28
    17b2:	df 91       	pop	r29
    17b4:	08 95       	ret

000017b6 <GIE_voidEnable>:
 */
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"GIE_conf.h"
#include"GIE_priv.h"
void GIE_voidEnable(void){
    17b6:	df 93       	push	r29
    17b8:	cf 93       	push	r28
    17ba:	cd b7       	in	r28, 0x3d	; 61
    17bc:	de b7       	in	r29, 0x3e	; 62

	SREG|=(1<<7);
    17be:	af e5       	ldi	r26, 0x5F	; 95
    17c0:	b0 e0       	ldi	r27, 0x00	; 0
    17c2:	ef e5       	ldi	r30, 0x5F	; 95
    17c4:	f0 e0       	ldi	r31, 0x00	; 0
    17c6:	80 81       	ld	r24, Z
    17c8:	80 68       	ori	r24, 0x80	; 128
    17ca:	8c 93       	st	X, r24
	return ;
}
    17cc:	cf 91       	pop	r28
    17ce:	df 91       	pop	r29
    17d0:	08 95       	ret

000017d2 <GIE_voidDisable>:
void GIE_voidDisable(void){
    17d2:	df 93       	push	r29
    17d4:	cf 93       	push	r28
    17d6:	cd b7       	in	r28, 0x3d	; 61
    17d8:	de b7       	in	r29, 0x3e	; 62

	SREG&=~(1<<7);
    17da:	af e5       	ldi	r26, 0x5F	; 95
    17dc:	b0 e0       	ldi	r27, 0x00	; 0
    17de:	ef e5       	ldi	r30, 0x5F	; 95
    17e0:	f0 e0       	ldi	r31, 0x00	; 0
    17e2:	80 81       	ld	r24, Z
    17e4:	8f 77       	andi	r24, 0x7F	; 127
    17e6:	8c 93       	st	X, r24
	return;
}
    17e8:	cf 91       	pop	r28
    17ea:	df 91       	pop	r29
    17ec:	08 95       	ret

000017ee <EXTI_voidInit>:
#include"EXTI_priv.h"
#include"../DIO/DIO_int.h"
static void (*EXTI_pFunISR0Fun)(void) = NULL;
static void (*EXTI_pFunISR1Fun)(void) = NULL;
static void (*EXTI_pFunISR2Fun)(void) = NULL;
void EXTI_voidInit(void){
    17ee:	df 93       	push	r29
    17f0:	cf 93       	push	r28
    17f2:	cd b7       	in	r28, 0x3d	; 61
    17f4:	de b7       	in	r29, 0x3e	; 62

	//INT0
#if EXTI0_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<6);
    17f6:	ab e5       	ldi	r26, 0x5B	; 91
    17f8:	b0 e0       	ldi	r27, 0x00	; 0
    17fa:	eb e5       	ldi	r30, 0x5B	; 91
    17fc:	f0 e0       	ldi	r31, 0x00	; 0
    17fe:	80 81       	ld	r24, Z
    1800:	80 64       	ori	r24, 0x40	; 64
    1802:	8c 93       	st	X, r24
#else
#error exti0 configuration is wrong

#endif
	//clear register before intializion
	MCUCR &=~(3<<0);
    1804:	a5 e5       	ldi	r26, 0x55	; 85
    1806:	b0 e0       	ldi	r27, 0x00	; 0
    1808:	e5 e5       	ldi	r30, 0x55	; 85
    180a:	f0 e0       	ldi	r31, 0x00	; 0
    180c:	80 81       	ld	r24, Z
    180e:	8c 7f       	andi	r24, 0xFC	; 252
    1810:	8c 93       	st	X, r24

#if EXTI0_SENSE_LEVEL == LOW_LEVEL

#elif EXTI0_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<0);
    1812:	a5 e5       	ldi	r26, 0x55	; 85
    1814:	b0 e0       	ldi	r27, 0x00	; 0
    1816:	e5 e5       	ldi	r30, 0x55	; 85
    1818:	f0 e0       	ldi	r31, 0x00	; 0
    181a:	80 81       	ld	r24, Z
    181c:	81 60       	ori	r24, 0x01	; 1
    181e:	8c 93       	st	X, r24
#endif

	//INT1

#if EXTI1_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<7);
    1820:	ab e5       	ldi	r26, 0x5B	; 91
    1822:	b0 e0       	ldi	r27, 0x00	; 0
    1824:	eb e5       	ldi	r30, 0x5B	; 91
    1826:	f0 e0       	ldi	r31, 0x00	; 0
    1828:	80 81       	ld	r24, Z
    182a:	80 68       	ori	r24, 0x80	; 128
    182c:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<7);
#else
//#error exti0 configuration is wrong
#endif
	//clear register before intializion
	MCUCR &=~(3<<2);
    182e:	a5 e5       	ldi	r26, 0x55	; 85
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	e5 e5       	ldi	r30, 0x55	; 85
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	83 7f       	andi	r24, 0xF3	; 243
    183a:	8c 93       	st	X, r24
#if EXTI1_SENSE_LEVEL == LOW_LEVEL

#elif EXTI1_SENSE_LEVEL == ANY_CHANGE
	MCUCR |= (1<<2);
#elif EXTI1_SENSE_LEVEL == FALLING
	MCUCR |= (2<<2);
    183c:	a5 e5       	ldi	r26, 0x55	; 85
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	e5 e5       	ldi	r30, 0x55	; 85
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	88 60       	ori	r24, 0x08	; 8
    1848:	8c 93       	st	X, r24
#endif


	//INT2
#if EXTI2_INT_MODE==EVENT_TRIGGERED
	GICR|=(DIO_u8BIT_MASK<<5);
    184a:	ab e5       	ldi	r26, 0x5B	; 91
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	eb e5       	ldi	r30, 0x5B	; 91
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	80 62       	ori	r24, 0x20	; 32
    1856:	8c 93       	st	X, r24
	GICR&=~(DIO_u8BIT_MASK<<5);
#else
//#error exti2 configuration is wrong
#endif
	//clear register before intializion
	MCUCSR&=~(1<<6);
    1858:	a4 e5       	ldi	r26, 0x54	; 84
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	e4 e5       	ldi	r30, 0x54	; 84
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8f 7b       	andi	r24, 0xBF	; 191
    1864:	8c 93       	st	X, r24

#if EXTI2_SENSE_LEVEL==FALLING

#elif EXTI2_SENSE_LEVEL==RISING
	MCUCSR|=(1<<6);
    1866:	a4 e5       	ldi	r26, 0x54	; 84
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	e4 e5       	ldi	r30, 0x54	; 84
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	80 64       	ori	r24, 0x40	; 64
    1872:	8c 93       	st	X, r24
#else
#error sense level of exti 0 is wrong
#endif
	return ;
}
    1874:	cf 91       	pop	r28
    1876:	df 91       	pop	r29
    1878:	08 95       	ret

0000187a <EXTI_voidSetSenseLevel>:

void EXTI_voidSetSenseLevel(u8 Copy_u8IntPinNum , u8 Copy_u8SenseLevel){
    187a:	df 93       	push	r29
    187c:	cf 93       	push	r28
    187e:	cd b7       	in	r28, 0x3d	; 61
    1880:	de b7       	in	r29, 0x3e	; 62
    1882:	28 97       	sbiw	r28, 0x08	; 8
    1884:	0f b6       	in	r0, 0x3f	; 63
    1886:	f8 94       	cli
    1888:	de bf       	out	0x3e, r29	; 62
    188a:	0f be       	out	0x3f, r0	; 63
    188c:	cd bf       	out	0x3d, r28	; 61
    188e:	89 83       	std	Y+1, r24	; 0x01
    1890:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8IntPinNum == INT0)
    1892:	89 81       	ldd	r24, Y+1	; 0x01
    1894:	88 23       	and	r24, r24
    1896:	d1 f5       	brne	.+116    	; 0x190c <EXTI_voidSetSenseLevel+0x92>
		{
			MCUCR &=~(3<<0);
    1898:	a5 e5       	ldi	r26, 0x55	; 85
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e5 e5       	ldi	r30, 0x55	; 85
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	8c 7f       	andi	r24, 0xFC	; 252
    18a4:	8c 93       	st	X, r24
			switch(Copy_u8SenseLevel)
    18a6:	8a 81       	ldd	r24, Y+2	; 0x02
    18a8:	28 2f       	mov	r18, r24
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	38 87       	std	Y+8, r19	; 0x08
    18ae:	2f 83       	std	Y+7, r18	; 0x07
    18b0:	8f 81       	ldd	r24, Y+7	; 0x07
    18b2:	98 85       	ldd	r25, Y+8	; 0x08
    18b4:	82 32       	cpi	r24, 0x22	; 34
    18b6:	91 05       	cpc	r25, r1
    18b8:	89 f0       	breq	.+34     	; 0x18dc <EXTI_voidSetSenseLevel+0x62>
    18ba:	2f 81       	ldd	r18, Y+7	; 0x07
    18bc:	38 85       	ldd	r19, Y+8	; 0x08
    18be:	23 32       	cpi	r18, 0x23	; 35
    18c0:	31 05       	cpc	r19, r1
    18c2:	34 f4       	brge	.+12     	; 0x18d0 <EXTI_voidSetSenseLevel+0x56>
    18c4:	8f 81       	ldd	r24, Y+7	; 0x07
    18c6:	98 85       	ldd	r25, Y+8	; 0x08
    18c8:	8a 30       	cpi	r24, 0x0A	; 10
    18ca:	91 05       	cpc	r25, r1
    18cc:	79 f0       	breq	.+30     	; 0x18ec <EXTI_voidSetSenseLevel+0x72>
    18ce:	7b c0       	rjmp	.+246    	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
    18d0:	2f 81       	ldd	r18, Y+7	; 0x07
    18d2:	38 85       	ldd	r19, Y+8	; 0x08
    18d4:	29 34       	cpi	r18, 0x49	; 73
    18d6:	31 05       	cpc	r19, r1
    18d8:	89 f0       	breq	.+34     	; 0x18fc <EXTI_voidSetSenseLevel+0x82>
    18da:	75 c0       	rjmp	.+234    	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
			{
			case LOW_LEVEL:

				break;
			case ANY_CHANGE:
				MCUCR |= (1<<0);
    18dc:	a5 e5       	ldi	r26, 0x55	; 85
    18de:	b0 e0       	ldi	r27, 0x00	; 0
    18e0:	e5 e5       	ldi	r30, 0x55	; 85
    18e2:	f0 e0       	ldi	r31, 0x00	; 0
    18e4:	80 81       	ld	r24, Z
    18e6:	81 60       	ori	r24, 0x01	; 1
    18e8:	8c 93       	st	X, r24
    18ea:	6d c0       	rjmp	.+218    	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
				break;
			case FALLING:
				MCUCR |= (2<<0);
    18ec:	a5 e5       	ldi	r26, 0x55	; 85
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e5       	ldi	r30, 0x55	; 85
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	82 60       	ori	r24, 0x02	; 2
    18f8:	8c 93       	st	X, r24
    18fa:	65 c0       	rjmp	.+202    	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
				break;
			case RISING:
				MCUCR |= (3<<0);
    18fc:	a5 e5       	ldi	r26, 0x55	; 85
    18fe:	b0 e0       	ldi	r27, 0x00	; 0
    1900:	e5 e5       	ldi	r30, 0x55	; 85
    1902:	f0 e0       	ldi	r31, 0x00	; 0
    1904:	80 81       	ld	r24, Z
    1906:	83 60       	ori	r24, 0x03	; 3
    1908:	8c 93       	st	X, r24
    190a:	5d c0       	rjmp	.+186    	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
				break;

			}
		}
		else if(Copy_u8IntPinNum == INT1)
    190c:	89 81       	ldd	r24, Y+1	; 0x01
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	d1 f5       	brne	.+116    	; 0x1986 <EXTI_voidSetSenseLevel+0x10c>
		{
           MCUCR&=~(3<<2);
    1912:	a5 e5       	ldi	r26, 0x55	; 85
    1914:	b0 e0       	ldi	r27, 0x00	; 0
    1916:	e5 e5       	ldi	r30, 0x55	; 85
    1918:	f0 e0       	ldi	r31, 0x00	; 0
    191a:	80 81       	ld	r24, Z
    191c:	83 7f       	andi	r24, 0xF3	; 243
    191e:	8c 93       	st	X, r24
       	switch(Copy_u8SenseLevel)
    1920:	8a 81       	ldd	r24, Y+2	; 0x02
    1922:	28 2f       	mov	r18, r24
    1924:	30 e0       	ldi	r19, 0x00	; 0
    1926:	3e 83       	std	Y+6, r19	; 0x06
    1928:	2d 83       	std	Y+5, r18	; 0x05
    192a:	8d 81       	ldd	r24, Y+5	; 0x05
    192c:	9e 81       	ldd	r25, Y+6	; 0x06
    192e:	82 32       	cpi	r24, 0x22	; 34
    1930:	91 05       	cpc	r25, r1
    1932:	89 f0       	breq	.+34     	; 0x1956 <EXTI_voidSetSenseLevel+0xdc>
    1934:	2d 81       	ldd	r18, Y+5	; 0x05
    1936:	3e 81       	ldd	r19, Y+6	; 0x06
    1938:	23 32       	cpi	r18, 0x23	; 35
    193a:	31 05       	cpc	r19, r1
    193c:	34 f4       	brge	.+12     	; 0x194a <EXTI_voidSetSenseLevel+0xd0>
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	8a 30       	cpi	r24, 0x0A	; 10
    1944:	91 05       	cpc	r25, r1
    1946:	79 f0       	breq	.+30     	; 0x1966 <EXTI_voidSetSenseLevel+0xec>
    1948:	3e c0       	rjmp	.+124    	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
    194a:	2d 81       	ldd	r18, Y+5	; 0x05
    194c:	3e 81       	ldd	r19, Y+6	; 0x06
    194e:	29 34       	cpi	r18, 0x49	; 73
    1950:	31 05       	cpc	r19, r1
    1952:	89 f0       	breq	.+34     	; 0x1976 <EXTI_voidSetSenseLevel+0xfc>
    1954:	38 c0       	rjmp	.+112    	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
       			{
       			case LOW_LEVEL:

       				break;
       			case ANY_CHANGE:
       				MCUCR |= (1<<2);
    1956:	a5 e5       	ldi	r26, 0x55	; 85
    1958:	b0 e0       	ldi	r27, 0x00	; 0
    195a:	e5 e5       	ldi	r30, 0x55	; 85
    195c:	f0 e0       	ldi	r31, 0x00	; 0
    195e:	80 81       	ld	r24, Z
    1960:	84 60       	ori	r24, 0x04	; 4
    1962:	8c 93       	st	X, r24
    1964:	30 c0       	rjmp	.+96     	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case FALLING:
       				MCUCR |= (2<<2);
    1966:	a5 e5       	ldi	r26, 0x55	; 85
    1968:	b0 e0       	ldi	r27, 0x00	; 0
    196a:	e5 e5       	ldi	r30, 0x55	; 85
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 81       	ld	r24, Z
    1970:	88 60       	ori	r24, 0x08	; 8
    1972:	8c 93       	st	X, r24
    1974:	28 c0       	rjmp	.+80     	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
       				break;
       			case RISING:
       				MCUCR |= (3<<2);
    1976:	a5 e5       	ldi	r26, 0x55	; 85
    1978:	b0 e0       	ldi	r27, 0x00	; 0
    197a:	e5 e5       	ldi	r30, 0x55	; 85
    197c:	f0 e0       	ldi	r31, 0x00	; 0
    197e:	80 81       	ld	r24, Z
    1980:	8c 60       	ori	r24, 0x0C	; 12
    1982:	8c 93       	st	X, r24
    1984:	20 c0       	rjmp	.+64     	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
       				break;

       			}

		}
		else if(Copy_u8IntPinNum == INT2)
    1986:	89 81       	ldd	r24, Y+1	; 0x01
    1988:	82 30       	cpi	r24, 0x02	; 2
    198a:	e9 f4       	brne	.+58     	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
		{
        MCUCSR&=~(1<<6);
    198c:	a4 e5       	ldi	r26, 0x54	; 84
    198e:	b0 e0       	ldi	r27, 0x00	; 0
    1990:	e4 e5       	ldi	r30, 0x54	; 84
    1992:	f0 e0       	ldi	r31, 0x00	; 0
    1994:	80 81       	ld	r24, Z
    1996:	8f 7b       	andi	r24, 0xBF	; 191
    1998:	8c 93       	st	X, r24
        switch(Copy_u8SenseLevel){
    199a:	8a 81       	ldd	r24, Y+2	; 0x02
    199c:	28 2f       	mov	r18, r24
    199e:	30 e0       	ldi	r19, 0x00	; 0
    19a0:	3c 83       	std	Y+4, r19	; 0x04
    19a2:	2b 83       	std	Y+3, r18	; 0x03
    19a4:	8b 81       	ldd	r24, Y+3	; 0x03
    19a6:	9c 81       	ldd	r25, Y+4	; 0x04
    19a8:	8a 30       	cpi	r24, 0x0A	; 10
    19aa:	91 05       	cpc	r25, r1
    19ac:	61 f0       	breq	.+24     	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
    19ae:	2b 81       	ldd	r18, Y+3	; 0x03
    19b0:	3c 81       	ldd	r19, Y+4	; 0x04
    19b2:	29 34       	cpi	r18, 0x49	; 73
    19b4:	31 05       	cpc	r19, r1
    19b6:	39 f4       	brne	.+14     	; 0x19c6 <EXTI_voidSetSenseLevel+0x14c>
        case FALLING:
        	break;
        case RISING:
        	MCUCSR|=(1<<6);
    19b8:	a4 e5       	ldi	r26, 0x54	; 84
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	e4 e5       	ldi	r30, 0x54	; 84
    19be:	f0 e0       	ldi	r31, 0x00	; 0
    19c0:	80 81       	ld	r24, Z
    19c2:	80 64       	ori	r24, 0x40	; 64
    19c4:	8c 93       	st	X, r24

		}}


		return;
	}
    19c6:	28 96       	adiw	r28, 0x08	; 8
    19c8:	0f b6       	in	r0, 0x3f	; 63
    19ca:	f8 94       	cli
    19cc:	de bf       	out	0x3e, r29	; 62
    19ce:	0f be       	out	0x3f, r0	; 63
    19d0:	cd bf       	out	0x3d, r28	; 61
    19d2:	cf 91       	pop	r28
    19d4:	df 91       	pop	r29
    19d6:	08 95       	ret

000019d8 <EXTI_voidEnableInterrupt>:


void EXTI_voidEnableInterrupt(u8 Copy_u8IntPinNum){
    19d8:	df 93       	push	r29
    19da:	cf 93       	push	r28
    19dc:	00 d0       	rcall	.+0      	; 0x19de <EXTI_voidEnableInterrupt+0x6>
    19de:	0f 92       	push	r0
    19e0:	cd b7       	in	r28, 0x3d	; 61
    19e2:	de b7       	in	r29, 0x3e	; 62
    19e4:	89 83       	std	Y+1, r24	; 0x01

	switch(Copy_u8IntPinNum){
    19e6:	89 81       	ldd	r24, Y+1	; 0x01
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	3b 83       	std	Y+3, r19	; 0x03
    19ee:	2a 83       	std	Y+2, r18	; 0x02
    19f0:	8a 81       	ldd	r24, Y+2	; 0x02
    19f2:	9b 81       	ldd	r25, Y+3	; 0x03
    19f4:	81 30       	cpi	r24, 0x01	; 1
    19f6:	91 05       	cpc	r25, r1
    19f8:	89 f0       	breq	.+34     	; 0x1a1c <EXTI_voidEnableInterrupt+0x44>
    19fa:	2a 81       	ldd	r18, Y+2	; 0x02
    19fc:	3b 81       	ldd	r19, Y+3	; 0x03
    19fe:	22 30       	cpi	r18, 0x02	; 2
    1a00:	31 05       	cpc	r19, r1
    1a02:	a1 f0       	breq	.+40     	; 0x1a2c <EXTI_voidEnableInterrupt+0x54>
    1a04:	8a 81       	ldd	r24, Y+2	; 0x02
    1a06:	9b 81       	ldd	r25, Y+3	; 0x03
    1a08:	00 97       	sbiw	r24, 0x00	; 0
    1a0a:	b9 f4       	brne	.+46     	; 0x1a3a <EXTI_voidEnableInterrupt+0x62>
	case INT0:
		GICR|=(1<<6);
    1a0c:	ab e5       	ldi	r26, 0x5B	; 91
    1a0e:	b0 e0       	ldi	r27, 0x00	; 0
    1a10:	eb e5       	ldi	r30, 0x5B	; 91
    1a12:	f0 e0       	ldi	r31, 0x00	; 0
    1a14:	80 81       	ld	r24, Z
    1a16:	80 64       	ori	r24, 0x40	; 64
    1a18:	8c 93       	st	X, r24
    1a1a:	0f c0       	rjmp	.+30     	; 0x1a3a <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT1:
		GICR|=(1<<7	);
    1a1c:	ab e5       	ldi	r26, 0x5B	; 91
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	eb e5       	ldi	r30, 0x5B	; 91
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	80 68       	ori	r24, 0x80	; 128
    1a28:	8c 93       	st	X, r24
    1a2a:	07 c0       	rjmp	.+14     	; 0x1a3a <EXTI_voidEnableInterrupt+0x62>
		break;
	case INT2:
		GICR|=(1<<5);
    1a2c:	ab e5       	ldi	r26, 0x5B	; 91
    1a2e:	b0 e0       	ldi	r27, 0x00	; 0
    1a30:	eb e5       	ldi	r30, 0x5B	; 91
    1a32:	f0 e0       	ldi	r31, 0x00	; 0
    1a34:	80 81       	ld	r24, Z
    1a36:	80 62       	ori	r24, 0x20	; 32
    1a38:	8c 93       	st	X, r24
		break;

}
return;
}
    1a3a:	0f 90       	pop	r0
    1a3c:	0f 90       	pop	r0
    1a3e:	0f 90       	pop	r0
    1a40:	cf 91       	pop	r28
    1a42:	df 91       	pop	r29
    1a44:	08 95       	ret

00001a46 <EXTI_voidsDisableInterrupt>:
void EXTI_voidsDisableInterrupt(u8 Copy_u8IntPinNum){
    1a46:	df 93       	push	r29
    1a48:	cf 93       	push	r28
    1a4a:	00 d0       	rcall	.+0      	; 0x1a4c <EXTI_voidsDisableInterrupt+0x6>
    1a4c:	0f 92       	push	r0
    1a4e:	cd b7       	in	r28, 0x3d	; 61
    1a50:	de b7       	in	r29, 0x3e	; 62
    1a52:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8IntPinNum){
    1a54:	89 81       	ldd	r24, Y+1	; 0x01
    1a56:	28 2f       	mov	r18, r24
    1a58:	30 e0       	ldi	r19, 0x00	; 0
    1a5a:	3b 83       	std	Y+3, r19	; 0x03
    1a5c:	2a 83       	std	Y+2, r18	; 0x02
    1a5e:	8a 81       	ldd	r24, Y+2	; 0x02
    1a60:	9b 81       	ldd	r25, Y+3	; 0x03
    1a62:	81 30       	cpi	r24, 0x01	; 1
    1a64:	91 05       	cpc	r25, r1
    1a66:	89 f0       	breq	.+34     	; 0x1a8a <EXTI_voidsDisableInterrupt+0x44>
    1a68:	2a 81       	ldd	r18, Y+2	; 0x02
    1a6a:	3b 81       	ldd	r19, Y+3	; 0x03
    1a6c:	22 30       	cpi	r18, 0x02	; 2
    1a6e:	31 05       	cpc	r19, r1
    1a70:	a1 f0       	breq	.+40     	; 0x1a9a <EXTI_voidsDisableInterrupt+0x54>
    1a72:	8a 81       	ldd	r24, Y+2	; 0x02
    1a74:	9b 81       	ldd	r25, Y+3	; 0x03
    1a76:	00 97       	sbiw	r24, 0x00	; 0
    1a78:	b9 f4       	brne	.+46     	; 0x1aa8 <EXTI_voidsDisableInterrupt+0x62>
		case INT0:
			GICR&=~(1<<6);
    1a7a:	ab e5       	ldi	r26, 0x5B	; 91
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	eb e5       	ldi	r30, 0x5B	; 91
    1a80:	f0 e0       	ldi	r31, 0x00	; 0
    1a82:	80 81       	ld	r24, Z
    1a84:	8f 7b       	andi	r24, 0xBF	; 191
    1a86:	8c 93       	st	X, r24
    1a88:	0f c0       	rjmp	.+30     	; 0x1aa8 <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT1:
			GICR&=~(1<<7	);
    1a8a:	ab e5       	ldi	r26, 0x5B	; 91
    1a8c:	b0 e0       	ldi	r27, 0x00	; 0
    1a8e:	eb e5       	ldi	r30, 0x5B	; 91
    1a90:	f0 e0       	ldi	r31, 0x00	; 0
    1a92:	80 81       	ld	r24, Z
    1a94:	8f 77       	andi	r24, 0x7F	; 127
    1a96:	8c 93       	st	X, r24
    1a98:	07 c0       	rjmp	.+14     	; 0x1aa8 <EXTI_voidsDisableInterrupt+0x62>
			break;
		case INT2:
			GICR&=~(1<<5);
    1a9a:	ab e5       	ldi	r26, 0x5B	; 91
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	eb e5       	ldi	r30, 0x5B	; 91
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	80 81       	ld	r24, Z
    1aa4:	8f 7d       	andi	r24, 0xDF	; 223
    1aa6:	8c 93       	st	X, r24
			break;

}
		return;
}
    1aa8:	0f 90       	pop	r0
    1aaa:	0f 90       	pop	r0
    1aac:	0f 90       	pop	r0
    1aae:	cf 91       	pop	r28
    1ab0:	df 91       	pop	r29
    1ab2:	08 95       	ret

00001ab4 <EXTI_voidCallBack>:

void EXTI_voidCallBack(void(*Copy_pFunAppFun)(void) , u8 Copy_u8IntPinNum){
    1ab4:	df 93       	push	r29
    1ab6:	cf 93       	push	r28
    1ab8:	00 d0       	rcall	.+0      	; 0x1aba <EXTI_voidCallBack+0x6>
    1aba:	00 d0       	rcall	.+0      	; 0x1abc <EXTI_voidCallBack+0x8>
    1abc:	0f 92       	push	r0
    1abe:	cd b7       	in	r28, 0x3d	; 61
    1ac0:	de b7       	in	r29, 0x3e	; 62
    1ac2:	9a 83       	std	Y+2, r25	; 0x02
    1ac4:	89 83       	std	Y+1, r24	; 0x01
    1ac6:	6b 83       	std	Y+3, r22	; 0x03

	if(Copy_pFunAppFun != NULL)
    1ac8:	89 81       	ldd	r24, Y+1	; 0x01
    1aca:	9a 81       	ldd	r25, Y+2	; 0x02
    1acc:	00 97       	sbiw	r24, 0x00	; 0
    1ace:	39 f1       	breq	.+78     	; 0x1b1e <EXTI_voidCallBack+0x6a>
		{
			switch(Copy_u8IntPinNum){
    1ad0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad2:	28 2f       	mov	r18, r24
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	3d 83       	std	Y+5, r19	; 0x05
    1ad8:	2c 83       	std	Y+4, r18	; 0x04
    1ada:	8c 81       	ldd	r24, Y+4	; 0x04
    1adc:	9d 81       	ldd	r25, Y+5	; 0x05
    1ade:	81 30       	cpi	r24, 0x01	; 1
    1ae0:	91 05       	cpc	r25, r1
    1ae2:	81 f0       	breq	.+32     	; 0x1b04 <EXTI_voidCallBack+0x50>
    1ae4:	2c 81       	ldd	r18, Y+4	; 0x04
    1ae6:	3d 81       	ldd	r19, Y+5	; 0x05
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	91 f0       	breq	.+36     	; 0x1b12 <EXTI_voidCallBack+0x5e>
    1aee:	8c 81       	ldd	r24, Y+4	; 0x04
    1af0:	9d 81       	ldd	r25, Y+5	; 0x05
    1af2:	00 97       	sbiw	r24, 0x00	; 0
    1af4:	a1 f4       	brne	.+40     	; 0x1b1e <EXTI_voidCallBack+0x6a>
			case INT0:
				EXTI_pFunISR0Fun=Copy_pFunAppFun;
    1af6:	89 81       	ldd	r24, Y+1	; 0x01
    1af8:	9a 81       	ldd	r25, Y+2	; 0x02
    1afa:	90 93 aa 01 	sts	0x01AA, r25
    1afe:	80 93 a9 01 	sts	0x01A9, r24
    1b02:	0d c0       	rjmp	.+26     	; 0x1b1e <EXTI_voidCallBack+0x6a>
				break;
			case INT1:
				EXTI_pFunISR1Fun=Copy_pFunAppFun;
    1b04:	89 81       	ldd	r24, Y+1	; 0x01
    1b06:	9a 81       	ldd	r25, Y+2	; 0x02
    1b08:	90 93 ac 01 	sts	0x01AC, r25
    1b0c:	80 93 ab 01 	sts	0x01AB, r24
    1b10:	06 c0       	rjmp	.+12     	; 0x1b1e <EXTI_voidCallBack+0x6a>
				break;
			case INT2:
				EXTI_pFunISR2Fun=Copy_pFunAppFun;
    1b12:	89 81       	ldd	r24, Y+1	; 0x01
    1b14:	9a 81       	ldd	r25, Y+2	; 0x02
    1b16:	90 93 ae 01 	sts	0x01AE, r25
    1b1a:	80 93 ad 01 	sts	0x01AD, r24
				break;

			}
		}
		return;
	}
    1b1e:	0f 90       	pop	r0
    1b20:	0f 90       	pop	r0
    1b22:	0f 90       	pop	r0
    1b24:	0f 90       	pop	r0
    1b26:	0f 90       	pop	r0
    1b28:	cf 91       	pop	r28
    1b2a:	df 91       	pop	r29
    1b2c:	08 95       	ret

00001b2e <DIO_voidSetPinDirection>:
#include"DIO_priv.h"
#include"DIO_conf.h"



void DIO_voidSetPinDirection(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Direction){
    1b2e:	df 93       	push	r29
    1b30:	cf 93       	push	r28
    1b32:	00 d0       	rcall	.+0      	; 0x1b34 <DIO_voidSetPinDirection+0x6>
    1b34:	00 d0       	rcall	.+0      	; 0x1b36 <DIO_voidSetPinDirection+0x8>
    1b36:	0f 92       	push	r0
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	89 83       	std	Y+1, r24	; 0x01
    1b3e:	6a 83       	std	Y+2, r22	; 0x02
    1b40:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&Copy_u8Direction<=DIO_u8OUTPUT){
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	84 30       	cpi	r24, 0x04	; 4
    1b46:	08 f0       	brcs	.+2      	; 0x1b4a <DIO_voidSetPinDirection+0x1c>
    1b48:	ce c0       	rjmp	.+412    	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
    1b4a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b4c:	88 30       	cpi	r24, 0x08	; 8
    1b4e:	08 f0       	brcs	.+2      	; 0x1b52 <DIO_voidSetPinDirection+0x24>
    1b50:	ca c0       	rjmp	.+404    	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
    1b52:	8b 81       	ldd	r24, Y+3	; 0x03
    1b54:	82 30       	cpi	r24, 0x02	; 2
    1b56:	08 f0       	brcs	.+2      	; 0x1b5a <DIO_voidSetPinDirection+0x2c>
    1b58:	c6 c0       	rjmp	.+396    	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
		switch(Copy_u8GroupID){
    1b5a:	89 81       	ldd	r24, Y+1	; 0x01
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	3d 83       	std	Y+5, r19	; 0x05
    1b62:	2c 83       	std	Y+4, r18	; 0x04
    1b64:	6c 81       	ldd	r22, Y+4	; 0x04
    1b66:	7d 81       	ldd	r23, Y+5	; 0x05
    1b68:	61 30       	cpi	r22, 0x01	; 1
    1b6a:	71 05       	cpc	r23, r1
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <DIO_voidSetPinDirection+0x42>
    1b6e:	41 c0       	rjmp	.+130    	; 0x1bf2 <DIO_voidSetPinDirection+0xc4>
    1b70:	8c 81       	ldd	r24, Y+4	; 0x04
    1b72:	9d 81       	ldd	r25, Y+5	; 0x05
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	91 05       	cpc	r25, r1
    1b78:	34 f4       	brge	.+12     	; 0x1b86 <DIO_voidSetPinDirection+0x58>
    1b7a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b7c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b7e:	21 15       	cp	r18, r1
    1b80:	31 05       	cpc	r19, r1
    1b82:	71 f0       	breq	.+28     	; 0x1ba0 <DIO_voidSetPinDirection+0x72>
    1b84:	b0 c0       	rjmp	.+352    	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
    1b86:	6c 81       	ldd	r22, Y+4	; 0x04
    1b88:	7d 81       	ldd	r23, Y+5	; 0x05
    1b8a:	62 30       	cpi	r22, 0x02	; 2
    1b8c:	71 05       	cpc	r23, r1
    1b8e:	09 f4       	brne	.+2      	; 0x1b92 <DIO_voidSetPinDirection+0x64>
    1b90:	59 c0       	rjmp	.+178    	; 0x1c44 <DIO_voidSetPinDirection+0x116>
    1b92:	8c 81       	ldd	r24, Y+4	; 0x04
    1b94:	9d 81       	ldd	r25, Y+5	; 0x05
    1b96:	83 30       	cpi	r24, 0x03	; 3
    1b98:	91 05       	cpc	r25, r1
    1b9a:	09 f4       	brne	.+2      	; 0x1b9e <DIO_voidSetPinDirection+0x70>
    1b9c:	7c c0       	rjmp	.+248    	; 0x1c96 <DIO_voidSetPinDirection+0x168>
    1b9e:	a3 c0       	rjmp	.+326    	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
		case DIO_u8GROUP_A:
			DDRA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1ba0:	aa e3       	ldi	r26, 0x3A	; 58
    1ba2:	b0 e0       	ldi	r27, 0x00	; 0
    1ba4:	ea e3       	ldi	r30, 0x3A	; 58
    1ba6:	f0 e0       	ldi	r31, 0x00	; 0
    1ba8:	80 81       	ld	r24, Z
    1baa:	48 2f       	mov	r20, r24
    1bac:	8a 81       	ldd	r24, Y+2	; 0x02
    1bae:	28 2f       	mov	r18, r24
    1bb0:	30 e0       	ldi	r19, 0x00	; 0
    1bb2:	81 e0       	ldi	r24, 0x01	; 1
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	02 c0       	rjmp	.+4      	; 0x1bbc <DIO_voidSetPinDirection+0x8e>
    1bb8:	88 0f       	add	r24, r24
    1bba:	99 1f       	adc	r25, r25
    1bbc:	2a 95       	dec	r18
    1bbe:	e2 f7       	brpl	.-8      	; 0x1bb8 <DIO_voidSetPinDirection+0x8a>
    1bc0:	80 95       	com	r24
    1bc2:	84 23       	and	r24, r20
    1bc4:	8c 93       	st	X, r24
			DDRA |=(Copy_u8Direction<<Copy_u8PinID);
    1bc6:	aa e3       	ldi	r26, 0x3A	; 58
    1bc8:	b0 e0       	ldi	r27, 0x00	; 0
    1bca:	ea e3       	ldi	r30, 0x3A	; 58
    1bcc:	f0 e0       	ldi	r31, 0x00	; 0
    1bce:	80 81       	ld	r24, Z
    1bd0:	48 2f       	mov	r20, r24
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	28 2f       	mov	r18, r24
    1bd6:	30 e0       	ldi	r19, 0x00	; 0
    1bd8:	8a 81       	ldd	r24, Y+2	; 0x02
    1bda:	88 2f       	mov	r24, r24
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	b9 01       	movw	r22, r18
    1be0:	02 c0       	rjmp	.+4      	; 0x1be6 <DIO_voidSetPinDirection+0xb8>
    1be2:	66 0f       	add	r22, r22
    1be4:	77 1f       	adc	r23, r23
    1be6:	8a 95       	dec	r24
    1be8:	e2 f7       	brpl	.-8      	; 0x1be2 <DIO_voidSetPinDirection+0xb4>
    1bea:	cb 01       	movw	r24, r22
    1bec:	84 2b       	or	r24, r20
    1bee:	8c 93       	st	X, r24
    1bf0:	7a c0       	rjmp	.+244    	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_B:
			DDRB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1bf2:	a7 e3       	ldi	r26, 0x37	; 55
    1bf4:	b0 e0       	ldi	r27, 0x00	; 0
    1bf6:	e7 e3       	ldi	r30, 0x37	; 55
    1bf8:	f0 e0       	ldi	r31, 0x00	; 0
    1bfa:	80 81       	ld	r24, Z
    1bfc:	48 2f       	mov	r20, r24
    1bfe:	8a 81       	ldd	r24, Y+2	; 0x02
    1c00:	28 2f       	mov	r18, r24
    1c02:	30 e0       	ldi	r19, 0x00	; 0
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	90 e0       	ldi	r25, 0x00	; 0
    1c08:	02 c0       	rjmp	.+4      	; 0x1c0e <DIO_voidSetPinDirection+0xe0>
    1c0a:	88 0f       	add	r24, r24
    1c0c:	99 1f       	adc	r25, r25
    1c0e:	2a 95       	dec	r18
    1c10:	e2 f7       	brpl	.-8      	; 0x1c0a <DIO_voidSetPinDirection+0xdc>
    1c12:	80 95       	com	r24
    1c14:	84 23       	and	r24, r20
    1c16:	8c 93       	st	X, r24
			DDRB |=(Copy_u8Direction<<Copy_u8PinID);
    1c18:	a7 e3       	ldi	r26, 0x37	; 55
    1c1a:	b0 e0       	ldi	r27, 0x00	; 0
    1c1c:	e7 e3       	ldi	r30, 0x37	; 55
    1c1e:	f0 e0       	ldi	r31, 0x00	; 0
    1c20:	80 81       	ld	r24, Z
    1c22:	48 2f       	mov	r20, r24
    1c24:	8b 81       	ldd	r24, Y+3	; 0x03
    1c26:	28 2f       	mov	r18, r24
    1c28:	30 e0       	ldi	r19, 0x00	; 0
    1c2a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2c:	88 2f       	mov	r24, r24
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	b9 01       	movw	r22, r18
    1c32:	02 c0       	rjmp	.+4      	; 0x1c38 <DIO_voidSetPinDirection+0x10a>
    1c34:	66 0f       	add	r22, r22
    1c36:	77 1f       	adc	r23, r23
    1c38:	8a 95       	dec	r24
    1c3a:	e2 f7       	brpl	.-8      	; 0x1c34 <DIO_voidSetPinDirection+0x106>
    1c3c:	cb 01       	movw	r24, r22
    1c3e:	84 2b       	or	r24, r20
    1c40:	8c 93       	st	X, r24
    1c42:	51 c0       	rjmp	.+162    	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_C:
			DDRC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1c44:	a4 e3       	ldi	r26, 0x34	; 52
    1c46:	b0 e0       	ldi	r27, 0x00	; 0
    1c48:	e4 e3       	ldi	r30, 0x34	; 52
    1c4a:	f0 e0       	ldi	r31, 0x00	; 0
    1c4c:	80 81       	ld	r24, Z
    1c4e:	48 2f       	mov	r20, r24
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	28 2f       	mov	r18, r24
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	81 e0       	ldi	r24, 0x01	; 1
    1c58:	90 e0       	ldi	r25, 0x00	; 0
    1c5a:	02 c0       	rjmp	.+4      	; 0x1c60 <DIO_voidSetPinDirection+0x132>
    1c5c:	88 0f       	add	r24, r24
    1c5e:	99 1f       	adc	r25, r25
    1c60:	2a 95       	dec	r18
    1c62:	e2 f7       	brpl	.-8      	; 0x1c5c <DIO_voidSetPinDirection+0x12e>
    1c64:	80 95       	com	r24
    1c66:	84 23       	and	r24, r20
    1c68:	8c 93       	st	X, r24
			DDRC |=(Copy_u8Direction<<Copy_u8PinID);
    1c6a:	a4 e3       	ldi	r26, 0x34	; 52
    1c6c:	b0 e0       	ldi	r27, 0x00	; 0
    1c6e:	e4 e3       	ldi	r30, 0x34	; 52
    1c70:	f0 e0       	ldi	r31, 0x00	; 0
    1c72:	80 81       	ld	r24, Z
    1c74:	48 2f       	mov	r20, r24
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c7e:	88 2f       	mov	r24, r24
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	b9 01       	movw	r22, r18
    1c84:	02 c0       	rjmp	.+4      	; 0x1c8a <DIO_voidSetPinDirection+0x15c>
    1c86:	66 0f       	add	r22, r22
    1c88:	77 1f       	adc	r23, r23
    1c8a:	8a 95       	dec	r24
    1c8c:	e2 f7       	brpl	.-8      	; 0x1c86 <DIO_voidSetPinDirection+0x158>
    1c8e:	cb 01       	movw	r24, r22
    1c90:	84 2b       	or	r24, r20
    1c92:	8c 93       	st	X, r24
    1c94:	28 c0       	rjmp	.+80     	; 0x1ce6 <DIO_voidSetPinDirection+0x1b8>
			break;
		case DIO_u8GROUP_D:
			DDRD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1c96:	a1 e3       	ldi	r26, 0x31	; 49
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	e1 e3       	ldi	r30, 0x31	; 49
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 c0       	rjmp	.+4      	; 0x1cb2 <DIO_voidSetPinDirection+0x184>
    1cae:	88 0f       	add	r24, r24
    1cb0:	99 1f       	adc	r25, r25
    1cb2:	2a 95       	dec	r18
    1cb4:	e2 f7       	brpl	.-8      	; 0x1cae <DIO_voidSetPinDirection+0x180>
    1cb6:	80 95       	com	r24
    1cb8:	84 23       	and	r24, r20
    1cba:	8c 93       	st	X, r24
			DDRD |=(Copy_u8Direction<<Copy_u8PinID);
    1cbc:	a1 e3       	ldi	r26, 0x31	; 49
    1cbe:	b0 e0       	ldi	r27, 0x00	; 0
    1cc0:	e1 e3       	ldi	r30, 0x31	; 49
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	80 81       	ld	r24, Z
    1cc6:	48 2f       	mov	r20, r24
    1cc8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cca:	28 2f       	mov	r18, r24
    1ccc:	30 e0       	ldi	r19, 0x00	; 0
    1cce:	8a 81       	ldd	r24, Y+2	; 0x02
    1cd0:	88 2f       	mov	r24, r24
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	b9 01       	movw	r22, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <DIO_voidSetPinDirection+0x1ae>
    1cd8:	66 0f       	add	r22, r22
    1cda:	77 1f       	adc	r23, r23
    1cdc:	8a 95       	dec	r24
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <DIO_voidSetPinDirection+0x1aa>
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	84 2b       	or	r24, r20
    1ce4:	8c 93       	st	X, r24
		}

	}

	return ;
}
    1ce6:	0f 90       	pop	r0
    1ce8:	0f 90       	pop	r0
    1cea:	0f 90       	pop	r0
    1cec:	0f 90       	pop	r0
    1cee:	0f 90       	pop	r0
    1cf0:	cf 91       	pop	r28
    1cf2:	df 91       	pop	r29
    1cf4:	08 95       	ret

00001cf6 <DIO_voidSetPinValue>:

void DIO_voidSetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 Copy_u8Value){
    1cf6:	df 93       	push	r29
    1cf8:	cf 93       	push	r28
    1cfa:	00 d0       	rcall	.+0      	; 0x1cfc <DIO_voidSetPinValue+0x6>
    1cfc:	00 d0       	rcall	.+0      	; 0x1cfe <DIO_voidSetPinValue+0x8>
    1cfe:	0f 92       	push	r0
    1d00:	cd b7       	in	r28, 0x3d	; 61
    1d02:	de b7       	in	r29, 0x3e	; 62
    1d04:	89 83       	std	Y+1, r24	; 0x01
    1d06:	6a 83       	std	Y+2, r22	; 0x02
    1d08:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7&&DIO_u8HIGH){
    1d0a:	89 81       	ldd	r24, Y+1	; 0x01
    1d0c:	84 30       	cpi	r24, 0x04	; 4
    1d0e:	08 f0       	brcs	.+2      	; 0x1d12 <DIO_voidSetPinValue+0x1c>
    1d10:	ca c0       	rjmp	.+404    	; 0x1ea6 <DIO_voidSetPinValue+0x1b0>
    1d12:	8a 81       	ldd	r24, Y+2	; 0x02
    1d14:	88 30       	cpi	r24, 0x08	; 8
    1d16:	08 f0       	brcs	.+2      	; 0x1d1a <DIO_voidSetPinValue+0x24>
    1d18:	c6 c0       	rjmp	.+396    	; 0x1ea6 <DIO_voidSetPinValue+0x1b0>
		switch(Copy_u8GroupID){
    1d1a:	89 81       	ldd	r24, Y+1	; 0x01
    1d1c:	28 2f       	mov	r18, r24
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	3d 83       	std	Y+5, r19	; 0x05
    1d22:	2c 83       	std	Y+4, r18	; 0x04
    1d24:	6c 81       	ldd	r22, Y+4	; 0x04
    1d26:	7d 81       	ldd	r23, Y+5	; 0x05
    1d28:	61 30       	cpi	r22, 0x01	; 1
    1d2a:	71 05       	cpc	r23, r1
    1d2c:	09 f4       	brne	.+2      	; 0x1d30 <DIO_voidSetPinValue+0x3a>
    1d2e:	41 c0       	rjmp	.+130    	; 0x1db2 <DIO_voidSetPinValue+0xbc>
    1d30:	8c 81       	ldd	r24, Y+4	; 0x04
    1d32:	9d 81       	ldd	r25, Y+5	; 0x05
    1d34:	82 30       	cpi	r24, 0x02	; 2
    1d36:	91 05       	cpc	r25, r1
    1d38:	34 f4       	brge	.+12     	; 0x1d46 <DIO_voidSetPinValue+0x50>
    1d3a:	2c 81       	ldd	r18, Y+4	; 0x04
    1d3c:	3d 81       	ldd	r19, Y+5	; 0x05
    1d3e:	21 15       	cp	r18, r1
    1d40:	31 05       	cpc	r19, r1
    1d42:	71 f0       	breq	.+28     	; 0x1d60 <DIO_voidSetPinValue+0x6a>
    1d44:	b0 c0       	rjmp	.+352    	; 0x1ea6 <DIO_voidSetPinValue+0x1b0>
    1d46:	6c 81       	ldd	r22, Y+4	; 0x04
    1d48:	7d 81       	ldd	r23, Y+5	; 0x05
    1d4a:	62 30       	cpi	r22, 0x02	; 2
    1d4c:	71 05       	cpc	r23, r1
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <DIO_voidSetPinValue+0x5c>
    1d50:	59 c0       	rjmp	.+178    	; 0x1e04 <DIO_voidSetPinValue+0x10e>
    1d52:	8c 81       	ldd	r24, Y+4	; 0x04
    1d54:	9d 81       	ldd	r25, Y+5	; 0x05
    1d56:	83 30       	cpi	r24, 0x03	; 3
    1d58:	91 05       	cpc	r25, r1
    1d5a:	09 f4       	brne	.+2      	; 0x1d5e <DIO_voidSetPinValue+0x68>
    1d5c:	7c c0       	rjmp	.+248    	; 0x1e56 <DIO_voidSetPinValue+0x160>
    1d5e:	a3 c0       	rjmp	.+326    	; 0x1ea6 <DIO_voidSetPinValue+0x1b0>
		case DIO_u8GROUP_A:
			PORTA &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1d60:	ab e3       	ldi	r26, 0x3B	; 59
    1d62:	b0 e0       	ldi	r27, 0x00	; 0
    1d64:	eb e3       	ldi	r30, 0x3B	; 59
    1d66:	f0 e0       	ldi	r31, 0x00	; 0
    1d68:	80 81       	ld	r24, Z
    1d6a:	48 2f       	mov	r20, r24
    1d6c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d6e:	28 2f       	mov	r18, r24
    1d70:	30 e0       	ldi	r19, 0x00	; 0
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	02 c0       	rjmp	.+4      	; 0x1d7c <DIO_voidSetPinValue+0x86>
    1d78:	88 0f       	add	r24, r24
    1d7a:	99 1f       	adc	r25, r25
    1d7c:	2a 95       	dec	r18
    1d7e:	e2 f7       	brpl	.-8      	; 0x1d78 <DIO_voidSetPinValue+0x82>
    1d80:	80 95       	com	r24
    1d82:	84 23       	and	r24, r20
    1d84:	8c 93       	st	X, r24
			PORTA |=(Copy_u8Value<<Copy_u8PinID);
    1d86:	ab e3       	ldi	r26, 0x3B	; 59
    1d88:	b0 e0       	ldi	r27, 0x00	; 0
    1d8a:	eb e3       	ldi	r30, 0x3B	; 59
    1d8c:	f0 e0       	ldi	r31, 0x00	; 0
    1d8e:	80 81       	ld	r24, Z
    1d90:	48 2f       	mov	r20, r24
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	28 2f       	mov	r18, r24
    1d96:	30 e0       	ldi	r19, 0x00	; 0
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	88 2f       	mov	r24, r24
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	b9 01       	movw	r22, r18
    1da0:	02 c0       	rjmp	.+4      	; 0x1da6 <DIO_voidSetPinValue+0xb0>
    1da2:	66 0f       	add	r22, r22
    1da4:	77 1f       	adc	r23, r23
    1da6:	8a 95       	dec	r24
    1da8:	e2 f7       	brpl	.-8      	; 0x1da2 <DIO_voidSetPinValue+0xac>
    1daa:	cb 01       	movw	r24, r22
    1dac:	84 2b       	or	r24, r20
    1dae:	8c 93       	st	X, r24
    1db0:	7a c0       	rjmp	.+244    	; 0x1ea6 <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_B:
			PORTB &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1db2:	a8 e3       	ldi	r26, 0x38	; 56
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e8 e3       	ldi	r30, 0x38	; 56
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	48 2f       	mov	r20, r24
    1dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc0:	28 2f       	mov	r18, r24
    1dc2:	30 e0       	ldi	r19, 0x00	; 0
    1dc4:	81 e0       	ldi	r24, 0x01	; 1
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	02 c0       	rjmp	.+4      	; 0x1dce <DIO_voidSetPinValue+0xd8>
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	2a 95       	dec	r18
    1dd0:	e2 f7       	brpl	.-8      	; 0x1dca <DIO_voidSetPinValue+0xd4>
    1dd2:	80 95       	com	r24
    1dd4:	84 23       	and	r24, r20
    1dd6:	8c 93       	st	X, r24
			PORTB |=(Copy_u8Value<<Copy_u8PinID);
    1dd8:	a8 e3       	ldi	r26, 0x38	; 56
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e8 e3       	ldi	r30, 0x38	; 56
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	48 2f       	mov	r20, r24
    1de4:	8b 81       	ldd	r24, Y+3	; 0x03
    1de6:	28 2f       	mov	r18, r24
    1de8:	30 e0       	ldi	r19, 0x00	; 0
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	88 2f       	mov	r24, r24
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	b9 01       	movw	r22, r18
    1df2:	02 c0       	rjmp	.+4      	; 0x1df8 <DIO_voidSetPinValue+0x102>
    1df4:	66 0f       	add	r22, r22
    1df6:	77 1f       	adc	r23, r23
    1df8:	8a 95       	dec	r24
    1dfa:	e2 f7       	brpl	.-8      	; 0x1df4 <DIO_voidSetPinValue+0xfe>
    1dfc:	cb 01       	movw	r24, r22
    1dfe:	84 2b       	or	r24, r20
    1e00:	8c 93       	st	X, r24
    1e02:	51 c0       	rjmp	.+162    	; 0x1ea6 <DIO_voidSetPinValue+0x1b0>
		 break;
		case DIO_u8GROUP_C:
			PORTC &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1e04:	a5 e3       	ldi	r26, 0x35	; 53
    1e06:	b0 e0       	ldi	r27, 0x00	; 0
    1e08:	e5 e3       	ldi	r30, 0x35	; 53
    1e0a:	f0 e0       	ldi	r31, 0x00	; 0
    1e0c:	80 81       	ld	r24, Z
    1e0e:	48 2f       	mov	r20, r24
    1e10:	8a 81       	ldd	r24, Y+2	; 0x02
    1e12:	28 2f       	mov	r18, r24
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	81 e0       	ldi	r24, 0x01	; 1
    1e18:	90 e0       	ldi	r25, 0x00	; 0
    1e1a:	02 c0       	rjmp	.+4      	; 0x1e20 <DIO_voidSetPinValue+0x12a>
    1e1c:	88 0f       	add	r24, r24
    1e1e:	99 1f       	adc	r25, r25
    1e20:	2a 95       	dec	r18
    1e22:	e2 f7       	brpl	.-8      	; 0x1e1c <DIO_voidSetPinValue+0x126>
    1e24:	80 95       	com	r24
    1e26:	84 23       	and	r24, r20
    1e28:	8c 93       	st	X, r24
			PORTC |=(Copy_u8Value<<Copy_u8PinID);
    1e2a:	a5 e3       	ldi	r26, 0x35	; 53
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e5 e3       	ldi	r30, 0x35	; 53
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	48 2f       	mov	r20, r24
    1e36:	8b 81       	ldd	r24, Y+3	; 0x03
    1e38:	28 2f       	mov	r18, r24
    1e3a:	30 e0       	ldi	r19, 0x00	; 0
    1e3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	b9 01       	movw	r22, r18
    1e44:	02 c0       	rjmp	.+4      	; 0x1e4a <DIO_voidSetPinValue+0x154>
    1e46:	66 0f       	add	r22, r22
    1e48:	77 1f       	adc	r23, r23
    1e4a:	8a 95       	dec	r24
    1e4c:	e2 f7       	brpl	.-8      	; 0x1e46 <DIO_voidSetPinValue+0x150>
    1e4e:	cb 01       	movw	r24, r22
    1e50:	84 2b       	or	r24, r20
    1e52:	8c 93       	st	X, r24
    1e54:	28 c0       	rjmp	.+80     	; 0x1ea6 <DIO_voidSetPinValue+0x1b0>
			break;
		case DIO_u8GROUP_D:
			PORTD &=~(DIO_u8BIT_MASK<<Copy_u8PinID);
    1e56:	a2 e3       	ldi	r26, 0x32	; 50
    1e58:	b0 e0       	ldi	r27, 0x00	; 0
    1e5a:	e2 e3       	ldi	r30, 0x32	; 50
    1e5c:	f0 e0       	ldi	r31, 0x00	; 0
    1e5e:	80 81       	ld	r24, Z
    1e60:	48 2f       	mov	r20, r24
    1e62:	8a 81       	ldd	r24, Y+2	; 0x02
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	81 e0       	ldi	r24, 0x01	; 1
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	02 c0       	rjmp	.+4      	; 0x1e72 <DIO_voidSetPinValue+0x17c>
    1e6e:	88 0f       	add	r24, r24
    1e70:	99 1f       	adc	r25, r25
    1e72:	2a 95       	dec	r18
    1e74:	e2 f7       	brpl	.-8      	; 0x1e6e <DIO_voidSetPinValue+0x178>
    1e76:	80 95       	com	r24
    1e78:	84 23       	and	r24, r20
    1e7a:	8c 93       	st	X, r24
			PORTD |=(Copy_u8Value<<Copy_u8PinID);
    1e7c:	a2 e3       	ldi	r26, 0x32	; 50
    1e7e:	b0 e0       	ldi	r27, 0x00	; 0
    1e80:	e2 e3       	ldi	r30, 0x32	; 50
    1e82:	f0 e0       	ldi	r31, 0x00	; 0
    1e84:	80 81       	ld	r24, Z
    1e86:	48 2f       	mov	r20, r24
    1e88:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8a:	28 2f       	mov	r18, r24
    1e8c:	30 e0       	ldi	r19, 0x00	; 0
    1e8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1e90:	88 2f       	mov	r24, r24
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	b9 01       	movw	r22, r18
    1e96:	02 c0       	rjmp	.+4      	; 0x1e9c <DIO_voidSetPinValue+0x1a6>
    1e98:	66 0f       	add	r22, r22
    1e9a:	77 1f       	adc	r23, r23
    1e9c:	8a 95       	dec	r24
    1e9e:	e2 f7       	brpl	.-8      	; 0x1e98 <DIO_voidSetPinValue+0x1a2>
    1ea0:	cb 01       	movw	r24, r22
    1ea2:	84 2b       	or	r24, r20
    1ea4:	8c 93       	st	X, r24
			break;
		}
	}

	return ;
}
    1ea6:	0f 90       	pop	r0
    1ea8:	0f 90       	pop	r0
    1eaa:	0f 90       	pop	r0
    1eac:	0f 90       	pop	r0
    1eae:	0f 90       	pop	r0
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	08 95       	ret

00001eb6 <DIO_voidTogglePinValue>:

void DIO_voidTogglePinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    1eb6:	df 93       	push	r29
    1eb8:	cf 93       	push	r28
    1eba:	00 d0       	rcall	.+0      	; 0x1ebc <DIO_voidTogglePinValue+0x6>
    1ebc:	00 d0       	rcall	.+0      	; 0x1ebe <DIO_voidTogglePinValue+0x8>
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	89 83       	std	Y+1, r24	; 0x01
    1ec4:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1ec6:	89 81       	ldd	r24, Y+1	; 0x01
    1ec8:	84 30       	cpi	r24, 0x04	; 4
    1eca:	08 f0       	brcs	.+2      	; 0x1ece <DIO_voidTogglePinValue+0x18>
    1ecc:	72 c0       	rjmp	.+228    	; 0x1fb2 <DIO_voidTogglePinValue+0xfc>
    1ece:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed0:	88 30       	cpi	r24, 0x08	; 8
    1ed2:	08 f0       	brcs	.+2      	; 0x1ed6 <DIO_voidTogglePinValue+0x20>
    1ed4:	6e c0       	rjmp	.+220    	; 0x1fb2 <DIO_voidTogglePinValue+0xfc>
		switch(Copy_u8GroupID){
    1ed6:	89 81       	ldd	r24, Y+1	; 0x01
    1ed8:	28 2f       	mov	r18, r24
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	3c 83       	std	Y+4, r19	; 0x04
    1ede:	2b 83       	std	Y+3, r18	; 0x03
    1ee0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ee2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ee4:	81 30       	cpi	r24, 0x01	; 1
    1ee6:	91 05       	cpc	r25, r1
    1ee8:	49 f1       	breq	.+82     	; 0x1f3c <DIO_voidTogglePinValue+0x86>
    1eea:	2b 81       	ldd	r18, Y+3	; 0x03
    1eec:	3c 81       	ldd	r19, Y+4	; 0x04
    1eee:	22 30       	cpi	r18, 0x02	; 2
    1ef0:	31 05       	cpc	r19, r1
    1ef2:	2c f4       	brge	.+10     	; 0x1efe <DIO_voidTogglePinValue+0x48>
    1ef4:	8b 81       	ldd	r24, Y+3	; 0x03
    1ef6:	9c 81       	ldd	r25, Y+4	; 0x04
    1ef8:	00 97       	sbiw	r24, 0x00	; 0
    1efa:	61 f0       	breq	.+24     	; 0x1f14 <DIO_voidTogglePinValue+0x5e>
    1efc:	5a c0       	rjmp	.+180    	; 0x1fb2 <DIO_voidTogglePinValue+0xfc>
    1efe:	2b 81       	ldd	r18, Y+3	; 0x03
    1f00:	3c 81       	ldd	r19, Y+4	; 0x04
    1f02:	22 30       	cpi	r18, 0x02	; 2
    1f04:	31 05       	cpc	r19, r1
    1f06:	71 f1       	breq	.+92     	; 0x1f64 <DIO_voidTogglePinValue+0xae>
    1f08:	8b 81       	ldd	r24, Y+3	; 0x03
    1f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f0c:	83 30       	cpi	r24, 0x03	; 3
    1f0e:	91 05       	cpc	r25, r1
    1f10:	e9 f1       	breq	.+122    	; 0x1f8c <DIO_voidTogglePinValue+0xd6>
    1f12:	4f c0       	rjmp	.+158    	; 0x1fb2 <DIO_voidTogglePinValue+0xfc>
		case DIO_u8GROUP_A:
			PORTA ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1f14:	ab e3       	ldi	r26, 0x3B	; 59
    1f16:	b0 e0       	ldi	r27, 0x00	; 0
    1f18:	eb e3       	ldi	r30, 0x3B	; 59
    1f1a:	f0 e0       	ldi	r31, 0x00	; 0
    1f1c:	80 81       	ld	r24, Z
    1f1e:	48 2f       	mov	r20, r24
    1f20:	8a 81       	ldd	r24, Y+2	; 0x02
    1f22:	28 2f       	mov	r18, r24
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	81 e0       	ldi	r24, 0x01	; 1
    1f28:	90 e0       	ldi	r25, 0x00	; 0
    1f2a:	02 2e       	mov	r0, r18
    1f2c:	02 c0       	rjmp	.+4      	; 0x1f32 <DIO_voidTogglePinValue+0x7c>
    1f2e:	88 0f       	add	r24, r24
    1f30:	99 1f       	adc	r25, r25
    1f32:	0a 94       	dec	r0
    1f34:	e2 f7       	brpl	.-8      	; 0x1f2e <DIO_voidTogglePinValue+0x78>
    1f36:	84 27       	eor	r24, r20
    1f38:	8c 93       	st	X, r24
    1f3a:	3b c0       	rjmp	.+118    	; 0x1fb2 <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_B:
		   PORTB ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1f3c:	a8 e3       	ldi	r26, 0x38	; 56
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e8 e3       	ldi	r30, 0x38	; 56
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	80 81       	ld	r24, Z
    1f46:	48 2f       	mov	r20, r24
    1f48:	8a 81       	ldd	r24, Y+2	; 0x02
    1f4a:	28 2f       	mov	r18, r24
    1f4c:	30 e0       	ldi	r19, 0x00	; 0
    1f4e:	81 e0       	ldi	r24, 0x01	; 1
    1f50:	90 e0       	ldi	r25, 0x00	; 0
    1f52:	02 2e       	mov	r0, r18
    1f54:	02 c0       	rjmp	.+4      	; 0x1f5a <DIO_voidTogglePinValue+0xa4>
    1f56:	88 0f       	add	r24, r24
    1f58:	99 1f       	adc	r25, r25
    1f5a:	0a 94       	dec	r0
    1f5c:	e2 f7       	brpl	.-8      	; 0x1f56 <DIO_voidTogglePinValue+0xa0>
    1f5e:	84 27       	eor	r24, r20
    1f60:	8c 93       	st	X, r24
    1f62:	27 c0       	rjmp	.+78     	; 0x1fb2 <DIO_voidTogglePinValue+0xfc>
		   break;
		case DIO_u8GROUP_C:
			PORTC ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1f64:	a5 e3       	ldi	r26, 0x35	; 53
    1f66:	b0 e0       	ldi	r27, 0x00	; 0
    1f68:	e5 e3       	ldi	r30, 0x35	; 53
    1f6a:	f0 e0       	ldi	r31, 0x00	; 0
    1f6c:	80 81       	ld	r24, Z
    1f6e:	48 2f       	mov	r20, r24
    1f70:	8a 81       	ldd	r24, Y+2	; 0x02
    1f72:	28 2f       	mov	r18, r24
    1f74:	30 e0       	ldi	r19, 0x00	; 0
    1f76:	81 e0       	ldi	r24, 0x01	; 1
    1f78:	90 e0       	ldi	r25, 0x00	; 0
    1f7a:	02 2e       	mov	r0, r18
    1f7c:	02 c0       	rjmp	.+4      	; 0x1f82 <DIO_voidTogglePinValue+0xcc>
    1f7e:	88 0f       	add	r24, r24
    1f80:	99 1f       	adc	r25, r25
    1f82:	0a 94       	dec	r0
    1f84:	e2 f7       	brpl	.-8      	; 0x1f7e <DIO_voidTogglePinValue+0xc8>
    1f86:	84 27       	eor	r24, r20
    1f88:	8c 93       	st	X, r24
    1f8a:	13 c0       	rjmp	.+38     	; 0x1fb2 <DIO_voidTogglePinValue+0xfc>
			break;
		case DIO_u8GROUP_D:
			PORTD ^=(DIO_u8BIT_MASK<<Copy_u8PinID);
    1f8c:	a2 e3       	ldi	r26, 0x32	; 50
    1f8e:	b0 e0       	ldi	r27, 0x00	; 0
    1f90:	e2 e3       	ldi	r30, 0x32	; 50
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	80 81       	ld	r24, Z
    1f96:	48 2f       	mov	r20, r24
    1f98:	8a 81       	ldd	r24, Y+2	; 0x02
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	81 e0       	ldi	r24, 0x01	; 1
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	02 2e       	mov	r0, r18
    1fa4:	02 c0       	rjmp	.+4      	; 0x1faa <DIO_voidTogglePinValue+0xf4>
    1fa6:	88 0f       	add	r24, r24
    1fa8:	99 1f       	adc	r25, r25
    1faa:	0a 94       	dec	r0
    1fac:	e2 f7       	brpl	.-8      	; 0x1fa6 <DIO_voidTogglePinValue+0xf0>
    1fae:	84 27       	eor	r24, r20
    1fb0:	8c 93       	st	X, r24

		}
	}

	return ;
}
    1fb2:	0f 90       	pop	r0
    1fb4:	0f 90       	pop	r0
    1fb6:	0f 90       	pop	r0
    1fb8:	0f 90       	pop	r0
    1fba:	cf 91       	pop	r28
    1fbc:	df 91       	pop	r29
    1fbe:	08 95       	ret

00001fc0 <DIO_voidGetPinValue>:

void DIO_voidGetPinValue(u8 Copy_u8GroupID, u8 Copy_u8PinID, u8 * Copy_pu8Value){
    1fc0:	df 93       	push	r29
    1fc2:	cf 93       	push	r28
    1fc4:	00 d0       	rcall	.+0      	; 0x1fc6 <DIO_voidGetPinValue+0x6>
    1fc6:	00 d0       	rcall	.+0      	; 0x1fc8 <DIO_voidGetPinValue+0x8>
    1fc8:	00 d0       	rcall	.+0      	; 0x1fca <DIO_voidGetPinValue+0xa>
    1fca:	cd b7       	in	r28, 0x3d	; 61
    1fcc:	de b7       	in	r29, 0x3e	; 62
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	6a 83       	std	Y+2, r22	; 0x02
    1fd2:	5c 83       	std	Y+4, r21	; 0x04
    1fd4:	4b 83       	std	Y+3, r20	; 0x03

	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    1fd6:	89 81       	ldd	r24, Y+1	; 0x01
    1fd8:	84 30       	cpi	r24, 0x04	; 4
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <DIO_voidGetPinValue+0x1e>
    1fdc:	74 c0       	rjmp	.+232    	; 0x20c6 <DIO_voidGetPinValue+0x106>
    1fde:	8a 81       	ldd	r24, Y+2	; 0x02
    1fe0:	88 30       	cpi	r24, 0x08	; 8
    1fe2:	08 f0       	brcs	.+2      	; 0x1fe6 <DIO_voidGetPinValue+0x26>
    1fe4:	70 c0       	rjmp	.+224    	; 0x20c6 <DIO_voidGetPinValue+0x106>
		switch (Copy_u8GroupID){
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	28 2f       	mov	r18, r24
    1fea:	30 e0       	ldi	r19, 0x00	; 0
    1fec:	3e 83       	std	Y+6, r19	; 0x06
    1fee:	2d 83       	std	Y+5, r18	; 0x05
    1ff0:	4d 81       	ldd	r20, Y+5	; 0x05
    1ff2:	5e 81       	ldd	r21, Y+6	; 0x06
    1ff4:	41 30       	cpi	r20, 0x01	; 1
    1ff6:	51 05       	cpc	r21, r1
    1ff8:	59 f1       	breq	.+86     	; 0x2050 <DIO_voidGetPinValue+0x90>
    1ffa:	8d 81       	ldd	r24, Y+5	; 0x05
    1ffc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffe:	82 30       	cpi	r24, 0x02	; 2
    2000:	91 05       	cpc	r25, r1
    2002:	34 f4       	brge	.+12     	; 0x2010 <DIO_voidGetPinValue+0x50>
    2004:	2d 81       	ldd	r18, Y+5	; 0x05
    2006:	3e 81       	ldd	r19, Y+6	; 0x06
    2008:	21 15       	cp	r18, r1
    200a:	31 05       	cpc	r19, r1
    200c:	69 f0       	breq	.+26     	; 0x2028 <DIO_voidGetPinValue+0x68>
    200e:	5b c0       	rjmp	.+182    	; 0x20c6 <DIO_voidGetPinValue+0x106>
    2010:	4d 81       	ldd	r20, Y+5	; 0x05
    2012:	5e 81       	ldd	r21, Y+6	; 0x06
    2014:	42 30       	cpi	r20, 0x02	; 2
    2016:	51 05       	cpc	r21, r1
    2018:	79 f1       	breq	.+94     	; 0x2078 <DIO_voidGetPinValue+0xb8>
    201a:	8d 81       	ldd	r24, Y+5	; 0x05
    201c:	9e 81       	ldd	r25, Y+6	; 0x06
    201e:	83 30       	cpi	r24, 0x03	; 3
    2020:	91 05       	cpc	r25, r1
    2022:	09 f4       	brne	.+2      	; 0x2026 <DIO_voidGetPinValue+0x66>
    2024:	3d c0       	rjmp	.+122    	; 0x20a0 <DIO_voidGetPinValue+0xe0>
    2026:	4f c0       	rjmp	.+158    	; 0x20c6 <DIO_voidGetPinValue+0x106>
		case DIO_u8GROUP_A:
			*Copy_pu8Value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2028:	e9 e3       	ldi	r30, 0x39	; 57
    202a:	f0 e0       	ldi	r31, 0x00	; 0
    202c:	80 81       	ld	r24, Z
    202e:	28 2f       	mov	r18, r24
    2030:	30 e0       	ldi	r19, 0x00	; 0
    2032:	8a 81       	ldd	r24, Y+2	; 0x02
    2034:	88 2f       	mov	r24, r24
    2036:	90 e0       	ldi	r25, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	02 c0       	rjmp	.+4      	; 0x2040 <DIO_voidGetPinValue+0x80>
    203c:	55 95       	asr	r21
    203e:	47 95       	ror	r20
    2040:	8a 95       	dec	r24
    2042:	e2 f7       	brpl	.-8      	; 0x203c <DIO_voidGetPinValue+0x7c>
    2044:	ca 01       	movw	r24, r20
    2046:	81 70       	andi	r24, 0x01	; 1
    2048:	eb 81       	ldd	r30, Y+3	; 0x03
    204a:	fc 81       	ldd	r31, Y+4	; 0x04
    204c:	80 83       	st	Z, r24
    204e:	3b c0       	rjmp	.+118    	; 0x20c6 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_B:
			*Copy_pu8Value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2050:	e6 e3       	ldi	r30, 0x36	; 54
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	80 81       	ld	r24, Z
    2056:	28 2f       	mov	r18, r24
    2058:	30 e0       	ldi	r19, 0x00	; 0
    205a:	8a 81       	ldd	r24, Y+2	; 0x02
    205c:	88 2f       	mov	r24, r24
    205e:	90 e0       	ldi	r25, 0x00	; 0
    2060:	a9 01       	movw	r20, r18
    2062:	02 c0       	rjmp	.+4      	; 0x2068 <DIO_voidGetPinValue+0xa8>
    2064:	55 95       	asr	r21
    2066:	47 95       	ror	r20
    2068:	8a 95       	dec	r24
    206a:	e2 f7       	brpl	.-8      	; 0x2064 <DIO_voidGetPinValue+0xa4>
    206c:	ca 01       	movw	r24, r20
    206e:	81 70       	andi	r24, 0x01	; 1
    2070:	eb 81       	ldd	r30, Y+3	; 0x03
    2072:	fc 81       	ldd	r31, Y+4	; 0x04
    2074:	80 83       	st	Z, r24
    2076:	27 c0       	rjmp	.+78     	; 0x20c6 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_C:
			*Copy_pu8Value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2078:	e3 e3       	ldi	r30, 0x33	; 51
    207a:	f0 e0       	ldi	r31, 0x00	; 0
    207c:	80 81       	ld	r24, Z
    207e:	28 2f       	mov	r18, r24
    2080:	30 e0       	ldi	r19, 0x00	; 0
    2082:	8a 81       	ldd	r24, Y+2	; 0x02
    2084:	88 2f       	mov	r24, r24
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a9 01       	movw	r20, r18
    208a:	02 c0       	rjmp	.+4      	; 0x2090 <DIO_voidGetPinValue+0xd0>
    208c:	55 95       	asr	r21
    208e:	47 95       	ror	r20
    2090:	8a 95       	dec	r24
    2092:	e2 f7       	brpl	.-8      	; 0x208c <DIO_voidGetPinValue+0xcc>
    2094:	ca 01       	movw	r24, r20
    2096:	81 70       	andi	r24, 0x01	; 1
    2098:	eb 81       	ldd	r30, Y+3	; 0x03
    209a:	fc 81       	ldd	r31, Y+4	; 0x04
    209c:	80 83       	st	Z, r24
    209e:	13 c0       	rjmp	.+38     	; 0x20c6 <DIO_voidGetPinValue+0x106>
			break;
		case DIO_u8GROUP_D:
			*Copy_pu8Value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    20a0:	e0 e3       	ldi	r30, 0x30	; 48
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	28 2f       	mov	r18, r24
    20a8:	30 e0       	ldi	r19, 0x00	; 0
    20aa:	8a 81       	ldd	r24, Y+2	; 0x02
    20ac:	88 2f       	mov	r24, r24
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	a9 01       	movw	r20, r18
    20b2:	02 c0       	rjmp	.+4      	; 0x20b8 <DIO_voidGetPinValue+0xf8>
    20b4:	55 95       	asr	r21
    20b6:	47 95       	ror	r20
    20b8:	8a 95       	dec	r24
    20ba:	e2 f7       	brpl	.-8      	; 0x20b4 <DIO_voidGetPinValue+0xf4>
    20bc:	ca 01       	movw	r24, r20
    20be:	81 70       	andi	r24, 0x01	; 1
    20c0:	eb 81       	ldd	r30, Y+3	; 0x03
    20c2:	fc 81       	ldd	r31, Y+4	; 0x04
    20c4:	80 83       	st	Z, r24

		}
	}

	return;
}
    20c6:	26 96       	adiw	r28, 0x06	; 6
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	de bf       	out	0x3e, r29	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	cd bf       	out	0x3d, r28	; 61
    20d2:	cf 91       	pop	r28
    20d4:	df 91       	pop	r29
    20d6:	08 95       	ret

000020d8 <DIO_u8GetValue>:
u8 DIO_u8GetValue(u8 Copy_u8GroupID, u8 Copy_u8PinID){
    20d8:	df 93       	push	r29
    20da:	cf 93       	push	r28
    20dc:	00 d0       	rcall	.+0      	; 0x20de <DIO_u8GetValue+0x6>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <DIO_u8GetValue+0x8>
    20e0:	0f 92       	push	r0
    20e2:	cd b7       	in	r28, 0x3d	; 61
    20e4:	de b7       	in	r29, 0x3e	; 62
    20e6:	8a 83       	std	Y+2, r24	; 0x02
    20e8:	6b 83       	std	Y+3, r22	; 0x03
	u8 value=0;
    20ea:	19 82       	std	Y+1, r1	; 0x01
	if(Copy_u8GroupID<=DIO_u8GROUP_D&&Copy_u8PinID<=DIO_u8PIN7){
    20ec:	8a 81       	ldd	r24, Y+2	; 0x02
    20ee:	84 30       	cpi	r24, 0x04	; 4
    20f0:	08 f0       	brcs	.+2      	; 0x20f4 <DIO_u8GetValue+0x1c>
    20f2:	6b c0       	rjmp	.+214    	; 0x21ca <DIO_u8GetValue+0xf2>
    20f4:	8b 81       	ldd	r24, Y+3	; 0x03
    20f6:	88 30       	cpi	r24, 0x08	; 8
    20f8:	08 f0       	brcs	.+2      	; 0x20fc <DIO_u8GetValue+0x24>
    20fa:	67 c0       	rjmp	.+206    	; 0x21ca <DIO_u8GetValue+0xf2>
			switch (Copy_u8GroupID){
    20fc:	8a 81       	ldd	r24, Y+2	; 0x02
    20fe:	28 2f       	mov	r18, r24
    2100:	30 e0       	ldi	r19, 0x00	; 0
    2102:	3d 83       	std	Y+5, r19	; 0x05
    2104:	2c 83       	std	Y+4, r18	; 0x04
    2106:	4c 81       	ldd	r20, Y+4	; 0x04
    2108:	5d 81       	ldd	r21, Y+5	; 0x05
    210a:	41 30       	cpi	r20, 0x01	; 1
    210c:	51 05       	cpc	r21, r1
    210e:	41 f1       	breq	.+80     	; 0x2160 <DIO_u8GetValue+0x88>
    2110:	8c 81       	ldd	r24, Y+4	; 0x04
    2112:	9d 81       	ldd	r25, Y+5	; 0x05
    2114:	82 30       	cpi	r24, 0x02	; 2
    2116:	91 05       	cpc	r25, r1
    2118:	34 f4       	brge	.+12     	; 0x2126 <DIO_u8GetValue+0x4e>
    211a:	2c 81       	ldd	r18, Y+4	; 0x04
    211c:	3d 81       	ldd	r19, Y+5	; 0x05
    211e:	21 15       	cp	r18, r1
    2120:	31 05       	cpc	r19, r1
    2122:	61 f0       	breq	.+24     	; 0x213c <DIO_u8GetValue+0x64>
    2124:	52 c0       	rjmp	.+164    	; 0x21ca <DIO_u8GetValue+0xf2>
    2126:	4c 81       	ldd	r20, Y+4	; 0x04
    2128:	5d 81       	ldd	r21, Y+5	; 0x05
    212a:	42 30       	cpi	r20, 0x02	; 2
    212c:	51 05       	cpc	r21, r1
    212e:	51 f1       	breq	.+84     	; 0x2184 <DIO_u8GetValue+0xac>
    2130:	8c 81       	ldd	r24, Y+4	; 0x04
    2132:	9d 81       	ldd	r25, Y+5	; 0x05
    2134:	83 30       	cpi	r24, 0x03	; 3
    2136:	91 05       	cpc	r25, r1
    2138:	b9 f1       	breq	.+110    	; 0x21a8 <DIO_u8GetValue+0xd0>
    213a:	47 c0       	rjmp	.+142    	; 0x21ca <DIO_u8GetValue+0xf2>
			case DIO_u8GROUP_A:
				value=(PINA>>Copy_u8PinID)&DIO_u8BIT_MASK;
    213c:	e9 e3       	ldi	r30, 0x39	; 57
    213e:	f0 e0       	ldi	r31, 0x00	; 0
    2140:	80 81       	ld	r24, Z
    2142:	28 2f       	mov	r18, r24
    2144:	30 e0       	ldi	r19, 0x00	; 0
    2146:	8b 81       	ldd	r24, Y+3	; 0x03
    2148:	88 2f       	mov	r24, r24
    214a:	90 e0       	ldi	r25, 0x00	; 0
    214c:	a9 01       	movw	r20, r18
    214e:	02 c0       	rjmp	.+4      	; 0x2154 <DIO_u8GetValue+0x7c>
    2150:	55 95       	asr	r21
    2152:	47 95       	ror	r20
    2154:	8a 95       	dec	r24
    2156:	e2 f7       	brpl	.-8      	; 0x2150 <DIO_u8GetValue+0x78>
    2158:	ca 01       	movw	r24, r20
    215a:	81 70       	andi	r24, 0x01	; 1
    215c:	89 83       	std	Y+1, r24	; 0x01
    215e:	35 c0       	rjmp	.+106    	; 0x21ca <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_B:
				value=(PINB>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2160:	e6 e3       	ldi	r30, 0x36	; 54
    2162:	f0 e0       	ldi	r31, 0x00	; 0
    2164:	80 81       	ld	r24, Z
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	8b 81       	ldd	r24, Y+3	; 0x03
    216c:	88 2f       	mov	r24, r24
    216e:	90 e0       	ldi	r25, 0x00	; 0
    2170:	a9 01       	movw	r20, r18
    2172:	02 c0       	rjmp	.+4      	; 0x2178 <DIO_u8GetValue+0xa0>
    2174:	55 95       	asr	r21
    2176:	47 95       	ror	r20
    2178:	8a 95       	dec	r24
    217a:	e2 f7       	brpl	.-8      	; 0x2174 <DIO_u8GetValue+0x9c>
    217c:	ca 01       	movw	r24, r20
    217e:	81 70       	andi	r24, 0x01	; 1
    2180:	89 83       	std	Y+1, r24	; 0x01
    2182:	23 c0       	rjmp	.+70     	; 0x21ca <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_C:
				value=(PINC>>Copy_u8PinID)&DIO_u8BIT_MASK;
    2184:	e3 e3       	ldi	r30, 0x33	; 51
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	28 2f       	mov	r18, r24
    218c:	30 e0       	ldi	r19, 0x00	; 0
    218e:	8b 81       	ldd	r24, Y+3	; 0x03
    2190:	88 2f       	mov	r24, r24
    2192:	90 e0       	ldi	r25, 0x00	; 0
    2194:	a9 01       	movw	r20, r18
    2196:	02 c0       	rjmp	.+4      	; 0x219c <DIO_u8GetValue+0xc4>
    2198:	55 95       	asr	r21
    219a:	47 95       	ror	r20
    219c:	8a 95       	dec	r24
    219e:	e2 f7       	brpl	.-8      	; 0x2198 <DIO_u8GetValue+0xc0>
    21a0:	ca 01       	movw	r24, r20
    21a2:	81 70       	andi	r24, 0x01	; 1
    21a4:	89 83       	std	Y+1, r24	; 0x01
    21a6:	11 c0       	rjmp	.+34     	; 0x21ca <DIO_u8GetValue+0xf2>
				break;
			case DIO_u8GROUP_D:
				value=(PIND>>Copy_u8PinID)&DIO_u8BIT_MASK;
    21a8:	e0 e3       	ldi	r30, 0x30	; 48
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	80 81       	ld	r24, Z
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	88 2f       	mov	r24, r24
    21b6:	90 e0       	ldi	r25, 0x00	; 0
    21b8:	a9 01       	movw	r20, r18
    21ba:	02 c0       	rjmp	.+4      	; 0x21c0 <DIO_u8GetValue+0xe8>
    21bc:	55 95       	asr	r21
    21be:	47 95       	ror	r20
    21c0:	8a 95       	dec	r24
    21c2:	e2 f7       	brpl	.-8      	; 0x21bc <DIO_u8GetValue+0xe4>
    21c4:	ca 01       	movw	r24, r20
    21c6:	81 70       	andi	r24, 0x01	; 1
    21c8:	89 83       	std	Y+1, r24	; 0x01
				break;

			}

}
	return value;
    21ca:	89 81       	ldd	r24, Y+1	; 0x01
}
    21cc:	0f 90       	pop	r0
    21ce:	0f 90       	pop	r0
    21d0:	0f 90       	pop	r0
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	cf 91       	pop	r28
    21d8:	df 91       	pop	r29
    21da:	08 95       	ret

000021dc <ULTRASONIC_SENSOR_voidEdgeProcessing>:

u8 Edge_Count = 0;
u16 Time_High = 0;
u16 distance=0;

void ULTRASONIC_SENSOR_voidEdgeProcessing(void){
    21dc:	df 93       	push	r29
    21de:	cf 93       	push	r28
    21e0:	cd b7       	in	r28, 0x3d	; 61
    21e2:	de b7       	in	r29, 0x3e	; 62

	Edge_Count++;
    21e4:	80 91 af 01 	lds	r24, 0x01AF
    21e8:	8f 5f       	subi	r24, 0xFF	; 255
    21ea:	80 93 af 01 	sts	0x01AF, r24
		if(Edge_Count == 1)
    21ee:	80 91 af 01 	lds	r24, 0x01AF
    21f2:	81 30       	cpi	r24, 0x01	; 1
    21f4:	31 f4       	brne	.+12     	; 0x2202 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x26>
		{

			Icu_voidClearTimerValue();
    21f6:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Icu_voidClearTimerValue>

			Icu_voidSetEdgeDetectionType(FALLING_EDGE);
    21fa:	80 e0       	ldi	r24, 0x00	; 0
    21fc:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Icu_voidSetEdgeDetectionType>
    2200:	11 c0       	rjmp	.+34     	; 0x2224 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x48>
		}

		else if(Edge_Count == 2)
    2202:	80 91 af 01 	lds	r24, 0x01AF
    2206:	82 30       	cpi	r24, 0x02	; 2
    2208:	69 f4       	brne	.+26     	; 0x2224 <ULTRASONIC_SENSOR_voidEdgeProcessing+0x48>
		{

			Time_High = Icu_u16GetInputCaptureValue();
    220a:	0e 94 a9 0b 	call	0x1752	; 0x1752 <Icu_u16GetInputCaptureValue>
    220e:	90 93 b1 01 	sts	0x01B1, r25
    2212:	80 93 b0 01 	sts	0x01B0, r24


			Edge_Count =0;
    2216:	10 92 af 01 	sts	0x01AF, r1
			Icu_voidClearTimerValue();
    221a:	0e 94 b4 0b 	call	0x1768	; 0x1768 <Icu_voidClearTimerValue>

			Icu_voidSetEdgeDetectionType(RISING_EDGE);
    221e:	81 e0       	ldi	r24, 0x01	; 1
    2220:	0e 94 8a 0b 	call	0x1714	; 0x1714 <Icu_voidSetEdgeDetectionType>
		}

}
    2224:	cf 91       	pop	r28
    2226:	df 91       	pop	r29
    2228:	08 95       	ret

0000222a <ULTRASONIC_SENSOR_voidInit>:


void ULTRASONIC_SENSOR_voidInit(void){
    222a:	df 93       	push	r29
    222c:	cf 93       	push	r28
    222e:	00 d0       	rcall	.+0      	; 0x2230 <ULTRASONIC_SENSOR_voidInit+0x6>
    2230:	cd b7       	in	r28, 0x3d	; 61
    2232:	de b7       	in	r29, 0x3e	; 62

		Icu_ConfigType Icu_Config = {F_8,RISING_EDGE};
    2234:	82 e0       	ldi	r24, 0x02	; 2
    2236:	89 83       	std	Y+1, r24	; 0x01
    2238:	81 e0       	ldi	r24, 0x01	; 1
    223a:	8a 83       	std	Y+2, r24	; 0x02


	Icu_voidSetCallBack(ULTRASONIC_SENSOR_voidEdgeProcessing);
    223c:	8e ee       	ldi	r24, 0xEE	; 238
    223e:	90 e1       	ldi	r25, 0x10	; 16
    2240:	0e 94 78 0b 	call	0x16f0	; 0x16f0 <Icu_voidSetCallBack>


		Icu_voidInit(&Icu_Config);
    2244:	ce 01       	movw	r24, r28
    2246:	01 96       	adiw	r24, 0x01	; 1
    2248:	0e 94 31 0b 	call	0x1662	; 0x1662 <Icu_voidInit>


		DIO_voidSetPinDirection(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8OUTPUT);
    224c:	82 e0       	ldi	r24, 0x02	; 2
    224e:	60 e0       	ldi	r22, 0x00	; 0
    2250:	41 e0       	ldi	r20, 0x01	; 1
    2252:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
}
    2256:	0f 90       	pop	r0
    2258:	0f 90       	pop	r0
    225a:	cf 91       	pop	r28
    225c:	df 91       	pop	r29
    225e:	08 95       	ret

00002260 <ULTRASONIC_SENSOR_voidTrigger>:
void ULTRASONIC_SENSOR_voidTrigger(void){
    2260:	df 93       	push	r29
    2262:	cf 93       	push	r28
    2264:	cd b7       	in	r28, 0x3d	; 61
    2266:	de b7       	in	r29, 0x3e	; 62
    2268:	68 97       	sbiw	r28, 0x18	; 24
    226a:	0f b6       	in	r0, 0x3f	; 63
    226c:	f8 94       	cli
    226e:	de bf       	out	0x3e, r29	; 62
    2270:	0f be       	out	0x3f, r0	; 63
    2272:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinValue(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8HIGH);
    2274:	82 e0       	ldi	r24, 0x02	; 2
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	41 e0       	ldi	r20, 0x01	; 1
    227a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
    227e:	80 e0       	ldi	r24, 0x00	; 0
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	a0 e2       	ldi	r26, 0x20	; 32
    2284:	b1 e4       	ldi	r27, 0x41	; 65
    2286:	8d 8b       	std	Y+21, r24	; 0x15
    2288:	9e 8b       	std	Y+22, r25	; 0x16
    228a:	af 8b       	std	Y+23, r26	; 0x17
    228c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228e:	6d 89       	ldd	r22, Y+21	; 0x15
    2290:	7e 89       	ldd	r23, Y+22	; 0x16
    2292:	8f 89       	ldd	r24, Y+23	; 0x17
    2294:	98 8d       	ldd	r25, Y+24	; 0x18
    2296:	2b ea       	ldi	r18, 0xAB	; 171
    2298:	3a ea       	ldi	r19, 0xAA	; 170
    229a:	4a ea       	ldi	r20, 0xAA	; 170
    229c:	50 e4       	ldi	r21, 0x40	; 64
    229e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22a2:	dc 01       	movw	r26, r24
    22a4:	cb 01       	movw	r24, r22
    22a6:	89 8b       	std	Y+17, r24	; 0x11
    22a8:	9a 8b       	std	Y+18, r25	; 0x12
    22aa:	ab 8b       	std	Y+19, r26	; 0x13
    22ac:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    22ae:	69 89       	ldd	r22, Y+17	; 0x11
    22b0:	7a 89       	ldd	r23, Y+18	; 0x12
    22b2:	8b 89       	ldd	r24, Y+19	; 0x13
    22b4:	9c 89       	ldd	r25, Y+20	; 0x14
    22b6:	20 e0       	ldi	r18, 0x00	; 0
    22b8:	30 e0       	ldi	r19, 0x00	; 0
    22ba:	40 e8       	ldi	r20, 0x80	; 128
    22bc:	5f e3       	ldi	r21, 0x3F	; 63
    22be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22c2:	88 23       	and	r24, r24
    22c4:	1c f4       	brge	.+6      	; 0x22cc <ULTRASONIC_SENSOR_voidTrigger+0x6c>
		__ticks = 1;
    22c6:	81 e0       	ldi	r24, 0x01	; 1
    22c8:	88 8b       	std	Y+16, r24	; 0x10
    22ca:	91 c0       	rjmp	.+290    	; 0x23ee <ULTRASONIC_SENSOR_voidTrigger+0x18e>
	else if (__tmp > 255)
    22cc:	69 89       	ldd	r22, Y+17	; 0x11
    22ce:	7a 89       	ldd	r23, Y+18	; 0x12
    22d0:	8b 89       	ldd	r24, Y+19	; 0x13
    22d2:	9c 89       	ldd	r25, Y+20	; 0x14
    22d4:	20 e0       	ldi	r18, 0x00	; 0
    22d6:	30 e0       	ldi	r19, 0x00	; 0
    22d8:	4f e7       	ldi	r20, 0x7F	; 127
    22da:	53 e4       	ldi	r21, 0x43	; 67
    22dc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22e0:	18 16       	cp	r1, r24
    22e2:	0c f0       	brlt	.+2      	; 0x22e6 <ULTRASONIC_SENSOR_voidTrigger+0x86>
    22e4:	7b c0       	rjmp	.+246    	; 0x23dc <ULTRASONIC_SENSOR_voidTrigger+0x17c>
	{
		_delay_ms(__us / 1000.0);
    22e6:	6d 89       	ldd	r22, Y+21	; 0x15
    22e8:	7e 89       	ldd	r23, Y+22	; 0x16
    22ea:	8f 89       	ldd	r24, Y+23	; 0x17
    22ec:	98 8d       	ldd	r25, Y+24	; 0x18
    22ee:	20 e0       	ldi	r18, 0x00	; 0
    22f0:	30 e0       	ldi	r19, 0x00	; 0
    22f2:	4a e7       	ldi	r20, 0x7A	; 122
    22f4:	54 e4       	ldi	r21, 0x44	; 68
    22f6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    22fa:	dc 01       	movw	r26, r24
    22fc:	cb 01       	movw	r24, r22
    22fe:	8c 87       	std	Y+12, r24	; 0x0c
    2300:	9d 87       	std	Y+13, r25	; 0x0d
    2302:	ae 87       	std	Y+14, r26	; 0x0e
    2304:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2306:	6c 85       	ldd	r22, Y+12	; 0x0c
    2308:	7d 85       	ldd	r23, Y+13	; 0x0d
    230a:	8e 85       	ldd	r24, Y+14	; 0x0e
    230c:	9f 85       	ldd	r25, Y+15	; 0x0f
    230e:	20 e0       	ldi	r18, 0x00	; 0
    2310:	30 e0       	ldi	r19, 0x00	; 0
    2312:	4a e7       	ldi	r20, 0x7A	; 122
    2314:	55 e4       	ldi	r21, 0x45	; 69
    2316:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	88 87       	std	Y+8, r24	; 0x08
    2320:	99 87       	std	Y+9, r25	; 0x09
    2322:	aa 87       	std	Y+10, r26	; 0x0a
    2324:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2326:	68 85       	ldd	r22, Y+8	; 0x08
    2328:	79 85       	ldd	r23, Y+9	; 0x09
    232a:	8a 85       	ldd	r24, Y+10	; 0x0a
    232c:	9b 85       	ldd	r25, Y+11	; 0x0b
    232e:	20 e0       	ldi	r18, 0x00	; 0
    2330:	30 e0       	ldi	r19, 0x00	; 0
    2332:	40 e8       	ldi	r20, 0x80	; 128
    2334:	5f e3       	ldi	r21, 0x3F	; 63
    2336:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    233a:	88 23       	and	r24, r24
    233c:	2c f4       	brge	.+10     	; 0x2348 <ULTRASONIC_SENSOR_voidTrigger+0xe8>
		__ticks = 1;
    233e:	81 e0       	ldi	r24, 0x01	; 1
    2340:	90 e0       	ldi	r25, 0x00	; 0
    2342:	9f 83       	std	Y+7, r25	; 0x07
    2344:	8e 83       	std	Y+6, r24	; 0x06
    2346:	3f c0       	rjmp	.+126    	; 0x23c6 <ULTRASONIC_SENSOR_voidTrigger+0x166>
	else if (__tmp > 65535)
    2348:	68 85       	ldd	r22, Y+8	; 0x08
    234a:	79 85       	ldd	r23, Y+9	; 0x09
    234c:	8a 85       	ldd	r24, Y+10	; 0x0a
    234e:	9b 85       	ldd	r25, Y+11	; 0x0b
    2350:	20 e0       	ldi	r18, 0x00	; 0
    2352:	3f ef       	ldi	r19, 0xFF	; 255
    2354:	4f e7       	ldi	r20, 0x7F	; 127
    2356:	57 e4       	ldi	r21, 0x47	; 71
    2358:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    235c:	18 16       	cp	r1, r24
    235e:	4c f5       	brge	.+82     	; 0x23b2 <ULTRASONIC_SENSOR_voidTrigger+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2360:	6c 85       	ldd	r22, Y+12	; 0x0c
    2362:	7d 85       	ldd	r23, Y+13	; 0x0d
    2364:	8e 85       	ldd	r24, Y+14	; 0x0e
    2366:	9f 85       	ldd	r25, Y+15	; 0x0f
    2368:	20 e0       	ldi	r18, 0x00	; 0
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	40 e2       	ldi	r20, 0x20	; 32
    236e:	51 e4       	ldi	r21, 0x41	; 65
    2370:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2374:	dc 01       	movw	r26, r24
    2376:	cb 01       	movw	r24, r22
    2378:	bc 01       	movw	r22, r24
    237a:	cd 01       	movw	r24, r26
    237c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2380:	dc 01       	movw	r26, r24
    2382:	cb 01       	movw	r24, r22
    2384:	9f 83       	std	Y+7, r25	; 0x07
    2386:	8e 83       	std	Y+6, r24	; 0x06
    2388:	0f c0       	rjmp	.+30     	; 0x23a8 <ULTRASONIC_SENSOR_voidTrigger+0x148>
    238a:	80 e9       	ldi	r24, 0x90	; 144
    238c:	91 e0       	ldi	r25, 0x01	; 1
    238e:	9d 83       	std	Y+5, r25	; 0x05
    2390:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2392:	8c 81       	ldd	r24, Y+4	; 0x04
    2394:	9d 81       	ldd	r25, Y+5	; 0x05
    2396:	01 97       	sbiw	r24, 0x01	; 1
    2398:	f1 f7       	brne	.-4      	; 0x2396 <ULTRASONIC_SENSOR_voidTrigger+0x136>
    239a:	9d 83       	std	Y+5, r25	; 0x05
    239c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239e:	8e 81       	ldd	r24, Y+6	; 0x06
    23a0:	9f 81       	ldd	r25, Y+7	; 0x07
    23a2:	01 97       	sbiw	r24, 0x01	; 1
    23a4:	9f 83       	std	Y+7, r25	; 0x07
    23a6:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a8:	8e 81       	ldd	r24, Y+6	; 0x06
    23aa:	9f 81       	ldd	r25, Y+7	; 0x07
    23ac:	00 97       	sbiw	r24, 0x00	; 0
    23ae:	69 f7       	brne	.-38     	; 0x238a <ULTRASONIC_SENSOR_voidTrigger+0x12a>
    23b0:	24 c0       	rjmp	.+72     	; 0x23fa <ULTRASONIC_SENSOR_voidTrigger+0x19a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23b2:	68 85       	ldd	r22, Y+8	; 0x08
    23b4:	79 85       	ldd	r23, Y+9	; 0x09
    23b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    23b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    23ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23be:	dc 01       	movw	r26, r24
    23c0:	cb 01       	movw	r24, r22
    23c2:	9f 83       	std	Y+7, r25	; 0x07
    23c4:	8e 83       	std	Y+6, r24	; 0x06
    23c6:	8e 81       	ldd	r24, Y+6	; 0x06
    23c8:	9f 81       	ldd	r25, Y+7	; 0x07
    23ca:	9b 83       	std	Y+3, r25	; 0x03
    23cc:	8a 83       	std	Y+2, r24	; 0x02
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	9b 81       	ldd	r25, Y+3	; 0x03
    23d2:	01 97       	sbiw	r24, 0x01	; 1
    23d4:	f1 f7       	brne	.-4      	; 0x23d2 <ULTRASONIC_SENSOR_voidTrigger+0x172>
    23d6:	9b 83       	std	Y+3, r25	; 0x03
    23d8:	8a 83       	std	Y+2, r24	; 0x02
    23da:	0f c0       	rjmp	.+30     	; 0x23fa <ULTRASONIC_SENSOR_voidTrigger+0x19a>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23dc:	69 89       	ldd	r22, Y+17	; 0x11
    23de:	7a 89       	ldd	r23, Y+18	; 0x12
    23e0:	8b 89       	ldd	r24, Y+19	; 0x13
    23e2:	9c 89       	ldd	r25, Y+20	; 0x14
    23e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23e8:	dc 01       	movw	r26, r24
    23ea:	cb 01       	movw	r24, r22
    23ec:	88 8b       	std	Y+16, r24	; 0x10
    23ee:	88 89       	ldd	r24, Y+16	; 0x10
    23f0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23f2:	89 81       	ldd	r24, Y+1	; 0x01
    23f4:	8a 95       	dec	r24
    23f6:	f1 f7       	brne	.-4      	; 0x23f4 <ULTRASONIC_SENSOR_voidTrigger+0x194>
    23f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(ULTRASONIC_SENSOR_TRIG_GROUP,ULTRASONIC_SENSOR_TRIG_PIN,DIO_u8LOW);
    23fa:	82 e0       	ldi	r24, 0x02	; 2
    23fc:	60 e0       	ldi	r22, 0x00	; 0
    23fe:	40 e0       	ldi	r20, 0x00	; 0
    2400:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
}
    2404:	68 96       	adiw	r28, 0x18	; 24
    2406:	0f b6       	in	r0, 0x3f	; 63
    2408:	f8 94       	cli
    240a:	de bf       	out	0x3e, r29	; 62
    240c:	0f be       	out	0x3f, r0	; 63
    240e:	cd bf       	out	0x3d, r28	; 61
    2410:	cf 91       	pop	r28
    2412:	df 91       	pop	r29
    2414:	08 95       	ret

00002416 <ULTRASONIC_SENSOR_u16ReadDistance>:
u16 ULTRASONIC_SENSOR_u16ReadDistance(void){
    2416:	df 93       	push	r29
    2418:	cf 93       	push	r28
    241a:	cd b7       	in	r28, 0x3d	; 61
    241c:	de b7       	in	r29, 0x3e	; 62
	ULTRASONIC_SENSOR_voidTrigger();
    241e:	0e 94 30 11 	call	0x2260	; 0x2260 <ULTRASONIC_SENSOR_voidTrigger>

		distance= ((u16)(f32)((Time_High)/57.47));
    2422:	80 91 b0 01 	lds	r24, 0x01B0
    2426:	90 91 b1 01 	lds	r25, 0x01B1
    242a:	cc 01       	movw	r24, r24
    242c:	a0 e0       	ldi	r26, 0x00	; 0
    242e:	b0 e0       	ldi	r27, 0x00	; 0
    2430:	bc 01       	movw	r22, r24
    2432:	cd 01       	movw	r24, r26
    2434:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2438:	dc 01       	movw	r26, r24
    243a:	cb 01       	movw	r24, r22
    243c:	bc 01       	movw	r22, r24
    243e:	cd 01       	movw	r24, r26
    2440:	28 e4       	ldi	r18, 0x48	; 72
    2442:	31 ee       	ldi	r19, 0xE1	; 225
    2444:	45 e6       	ldi	r20, 0x65	; 101
    2446:	52 e4       	ldi	r21, 0x42	; 66
    2448:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    244c:	dc 01       	movw	r26, r24
    244e:	cb 01       	movw	r24, r22
    2450:	bc 01       	movw	r22, r24
    2452:	cd 01       	movw	r24, r26
    2454:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2458:	dc 01       	movw	r26, r24
    245a:	cb 01       	movw	r24, r22
    245c:	90 93 b3 01 	sts	0x01B3, r25
    2460:	80 93 b2 01 	sts	0x01B2, r24
        distance/=2;     /* i work as frequency 16 million not 8 million */
    2464:	80 91 b2 01 	lds	r24, 0x01B2
    2468:	90 91 b3 01 	lds	r25, 0x01B3
    246c:	96 95       	lsr	r25
    246e:	87 95       	ror	r24
    2470:	90 93 b3 01 	sts	0x01B3, r25
    2474:	80 93 b2 01 	sts	0x01B2, r24
	return distance;
    2478:	80 91 b2 01 	lds	r24, 0x01B2
    247c:	90 91 b3 01 	lds	r25, 0x01B3
}
    2480:	cf 91       	pop	r28
    2482:	df 91       	pop	r29
    2484:	08 95       	ret

00002486 <SERVO_MOTOR_voidInit>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/TIMER1/TIMER1_int.h"
#include "SERVO_MOTOR_priv.h"
#include "SERVO_MOTOR_conf.h"
#include<util/delay.h>
void SERVO_MOTOR_voidInit(void){
    2486:	df 93       	push	r29
    2488:	cf 93       	push	r28
    248a:	cd b7       	in	r28, 0x3d	; 61
    248c:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidInit();
    248e:	0e 94 f7 07 	call	0xfee	; 0xfee <Pwm1_voidInit>
	Pwm1_voidSetFrequency(50);
    2492:	82 e3       	ldi	r24, 0x32	; 50
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	0e 94 42 08 	call	0x1084	; 0x1084 <Pwm1_voidSetFrequency>
	Pwm1_voidStart();
    249a:	0e 94 99 08 	call	0x1132	; 0x1132 <Pwm1_voidStart>
}
    249e:	cf 91       	pop	r28
    24a0:	df 91       	pop	r29
    24a2:	08 95       	ret

000024a4 <SERVO_MOTOR_voidRotate>:
void SERVO_MOTOR_voidRotate(void){
    24a4:	df 93       	push	r29
    24a6:	cf 93       	push	r28
    24a8:	cd b7       	in	r28, 0x3d	; 61
    24aa:	de b7       	in	r29, 0x3e	; 62
    24ac:	e8 97       	sbiw	r28, 0x38	; 56
    24ae:	0f b6       	in	r0, 0x3f	; 63
    24b0:	f8 94       	cli
    24b2:	de bf       	out	0x3e, r29	; 62
    24b4:	0f be       	out	0x3f, r0	; 63
    24b6:	cd bf       	out	0x3d, r28	; 61
	Pwm1_voidSetOCR1A(RIGHT);
    24b8:	87 e8       	ldi	r24, 0x87	; 135
    24ba:	90 e0       	ldi	r25, 0x00	; 0
    24bc:	0e 94 75 08 	call	0x10ea	; 0x10ea <Pwm1_voidSetOCR1A>
    24c0:	80 e0       	ldi	r24, 0x00	; 0
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	aa e7       	ldi	r26, 0x7A	; 122
    24c6:	b4 e4       	ldi	r27, 0x44	; 68
    24c8:	8d ab       	std	Y+53, r24	; 0x35
    24ca:	9e ab       	std	Y+54, r25	; 0x36
    24cc:	af ab       	std	Y+55, r26	; 0x37
    24ce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24d0:	6d a9       	ldd	r22, Y+53	; 0x35
    24d2:	7e a9       	ldd	r23, Y+54	; 0x36
    24d4:	8f a9       	ldd	r24, Y+55	; 0x37
    24d6:	98 ad       	ldd	r25, Y+56	; 0x38
    24d8:	20 e0       	ldi	r18, 0x00	; 0
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	4a e7       	ldi	r20, 0x7A	; 122
    24de:	55 e4       	ldi	r21, 0x45	; 69
    24e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	89 ab       	std	Y+49, r24	; 0x31
    24ea:	9a ab       	std	Y+50, r25	; 0x32
    24ec:	ab ab       	std	Y+51, r26	; 0x33
    24ee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    24f0:	69 a9       	ldd	r22, Y+49	; 0x31
    24f2:	7a a9       	ldd	r23, Y+50	; 0x32
    24f4:	8b a9       	ldd	r24, Y+51	; 0x33
    24f6:	9c a9       	ldd	r25, Y+52	; 0x34
    24f8:	20 e0       	ldi	r18, 0x00	; 0
    24fa:	30 e0       	ldi	r19, 0x00	; 0
    24fc:	40 e8       	ldi	r20, 0x80	; 128
    24fe:	5f e3       	ldi	r21, 0x3F	; 63
    2500:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2504:	88 23       	and	r24, r24
    2506:	2c f4       	brge	.+10     	; 0x2512 <SERVO_MOTOR_voidRotate+0x6e>
		__ticks = 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	98 ab       	std	Y+48, r25	; 0x30
    250e:	8f a7       	std	Y+47, r24	; 0x2f
    2510:	3f c0       	rjmp	.+126    	; 0x2590 <SERVO_MOTOR_voidRotate+0xec>
	else if (__tmp > 65535)
    2512:	69 a9       	ldd	r22, Y+49	; 0x31
    2514:	7a a9       	ldd	r23, Y+50	; 0x32
    2516:	8b a9       	ldd	r24, Y+51	; 0x33
    2518:	9c a9       	ldd	r25, Y+52	; 0x34
    251a:	20 e0       	ldi	r18, 0x00	; 0
    251c:	3f ef       	ldi	r19, 0xFF	; 255
    251e:	4f e7       	ldi	r20, 0x7F	; 127
    2520:	57 e4       	ldi	r21, 0x47	; 71
    2522:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2526:	18 16       	cp	r1, r24
    2528:	4c f5       	brge	.+82     	; 0x257c <SERVO_MOTOR_voidRotate+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    252a:	6d a9       	ldd	r22, Y+53	; 0x35
    252c:	7e a9       	ldd	r23, Y+54	; 0x36
    252e:	8f a9       	ldd	r24, Y+55	; 0x37
    2530:	98 ad       	ldd	r25, Y+56	; 0x38
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e2       	ldi	r20, 0x20	; 32
    2538:	51 e4       	ldi	r21, 0x41	; 65
    253a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253e:	dc 01       	movw	r26, r24
    2540:	cb 01       	movw	r24, r22
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	98 ab       	std	Y+48, r25	; 0x30
    2550:	8f a7       	std	Y+47, r24	; 0x2f
    2552:	0f c0       	rjmp	.+30     	; 0x2572 <SERVO_MOTOR_voidRotate+0xce>
    2554:	80 e9       	ldi	r24, 0x90	; 144
    2556:	91 e0       	ldi	r25, 0x01	; 1
    2558:	9e a7       	std	Y+46, r25	; 0x2e
    255a:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    255c:	8d a5       	ldd	r24, Y+45	; 0x2d
    255e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2560:	01 97       	sbiw	r24, 0x01	; 1
    2562:	f1 f7       	brne	.-4      	; 0x2560 <SERVO_MOTOR_voidRotate+0xbc>
    2564:	9e a7       	std	Y+46, r25	; 0x2e
    2566:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2568:	8f a5       	ldd	r24, Y+47	; 0x2f
    256a:	98 a9       	ldd	r25, Y+48	; 0x30
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	98 ab       	std	Y+48, r25	; 0x30
    2570:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2572:	8f a5       	ldd	r24, Y+47	; 0x2f
    2574:	98 a9       	ldd	r25, Y+48	; 0x30
    2576:	00 97       	sbiw	r24, 0x00	; 0
    2578:	69 f7       	brne	.-38     	; 0x2554 <SERVO_MOTOR_voidRotate+0xb0>
    257a:	14 c0       	rjmp	.+40     	; 0x25a4 <SERVO_MOTOR_voidRotate+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    257c:	69 a9       	ldd	r22, Y+49	; 0x31
    257e:	7a a9       	ldd	r23, Y+50	; 0x32
    2580:	8b a9       	ldd	r24, Y+51	; 0x33
    2582:	9c a9       	ldd	r25, Y+52	; 0x34
    2584:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2588:	dc 01       	movw	r26, r24
    258a:	cb 01       	movw	r24, r22
    258c:	98 ab       	std	Y+48, r25	; 0x30
    258e:	8f a7       	std	Y+47, r24	; 0x2f
    2590:	8f a5       	ldd	r24, Y+47	; 0x2f
    2592:	98 a9       	ldd	r25, Y+48	; 0x30
    2594:	9c a7       	std	Y+44, r25	; 0x2c
    2596:	8b a7       	std	Y+43, r24	; 0x2b
    2598:	8b a5       	ldd	r24, Y+43	; 0x2b
    259a:	9c a5       	ldd	r25, Y+44	; 0x2c
    259c:	01 97       	sbiw	r24, 0x01	; 1
    259e:	f1 f7       	brne	.-4      	; 0x259c <SERVO_MOTOR_voidRotate+0xf8>
    25a0:	9c a7       	std	Y+44, r25	; 0x2c
    25a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	Pwm1_voidSetOCR1A(MIDDLE);
    25a4:	81 e8       	ldi	r24, 0x81	; 129
    25a6:	91 e0       	ldi	r25, 0x01	; 1
    25a8:	0e 94 75 08 	call	0x10ea	; 0x10ea <Pwm1_voidSetOCR1A>
    25ac:	80 e0       	ldi	r24, 0x00	; 0
    25ae:	90 e0       	ldi	r25, 0x00	; 0
    25b0:	aa e7       	ldi	r26, 0x7A	; 122
    25b2:	b4 e4       	ldi	r27, 0x44	; 68
    25b4:	8f a3       	std	Y+39, r24	; 0x27
    25b6:	98 a7       	std	Y+40, r25	; 0x28
    25b8:	a9 a7       	std	Y+41, r26	; 0x29
    25ba:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25bc:	6f a1       	ldd	r22, Y+39	; 0x27
    25be:	78 a5       	ldd	r23, Y+40	; 0x28
    25c0:	89 a5       	ldd	r24, Y+41	; 0x29
    25c2:	9a a5       	ldd	r25, Y+42	; 0x2a
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	4a e7       	ldi	r20, 0x7A	; 122
    25ca:	55 e4       	ldi	r21, 0x45	; 69
    25cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d0:	dc 01       	movw	r26, r24
    25d2:	cb 01       	movw	r24, r22
    25d4:	8b a3       	std	Y+35, r24	; 0x23
    25d6:	9c a3       	std	Y+36, r25	; 0x24
    25d8:	ad a3       	std	Y+37, r26	; 0x25
    25da:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    25dc:	6b a1       	ldd	r22, Y+35	; 0x23
    25de:	7c a1       	ldd	r23, Y+36	; 0x24
    25e0:	8d a1       	ldd	r24, Y+37	; 0x25
    25e2:	9e a1       	ldd	r25, Y+38	; 0x26
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	30 e0       	ldi	r19, 0x00	; 0
    25e8:	40 e8       	ldi	r20, 0x80	; 128
    25ea:	5f e3       	ldi	r21, 0x3F	; 63
    25ec:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25f0:	88 23       	and	r24, r24
    25f2:	2c f4       	brge	.+10     	; 0x25fe <SERVO_MOTOR_voidRotate+0x15a>
		__ticks = 1;
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	9a a3       	std	Y+34, r25	; 0x22
    25fa:	89 a3       	std	Y+33, r24	; 0x21
    25fc:	3f c0       	rjmp	.+126    	; 0x267c <SERVO_MOTOR_voidRotate+0x1d8>
	else if (__tmp > 65535)
    25fe:	6b a1       	ldd	r22, Y+35	; 0x23
    2600:	7c a1       	ldd	r23, Y+36	; 0x24
    2602:	8d a1       	ldd	r24, Y+37	; 0x25
    2604:	9e a1       	ldd	r25, Y+38	; 0x26
    2606:	20 e0       	ldi	r18, 0x00	; 0
    2608:	3f ef       	ldi	r19, 0xFF	; 255
    260a:	4f e7       	ldi	r20, 0x7F	; 127
    260c:	57 e4       	ldi	r21, 0x47	; 71
    260e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2612:	18 16       	cp	r1, r24
    2614:	4c f5       	brge	.+82     	; 0x2668 <SERVO_MOTOR_voidRotate+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2616:	6f a1       	ldd	r22, Y+39	; 0x27
    2618:	78 a5       	ldd	r23, Y+40	; 0x28
    261a:	89 a5       	ldd	r24, Y+41	; 0x29
    261c:	9a a5       	ldd	r25, Y+42	; 0x2a
    261e:	20 e0       	ldi	r18, 0x00	; 0
    2620:	30 e0       	ldi	r19, 0x00	; 0
    2622:	40 e2       	ldi	r20, 0x20	; 32
    2624:	51 e4       	ldi	r21, 0x41	; 65
    2626:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262a:	dc 01       	movw	r26, r24
    262c:	cb 01       	movw	r24, r22
    262e:	bc 01       	movw	r22, r24
    2630:	cd 01       	movw	r24, r26
    2632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2636:	dc 01       	movw	r26, r24
    2638:	cb 01       	movw	r24, r22
    263a:	9a a3       	std	Y+34, r25	; 0x22
    263c:	89 a3       	std	Y+33, r24	; 0x21
    263e:	0f c0       	rjmp	.+30     	; 0x265e <SERVO_MOTOR_voidRotate+0x1ba>
    2640:	80 e9       	ldi	r24, 0x90	; 144
    2642:	91 e0       	ldi	r25, 0x01	; 1
    2644:	98 a3       	std	Y+32, r25	; 0x20
    2646:	8f 8f       	std	Y+31, r24	; 0x1f
    2648:	8f 8d       	ldd	r24, Y+31	; 0x1f
    264a:	98 a1       	ldd	r25, Y+32	; 0x20
    264c:	01 97       	sbiw	r24, 0x01	; 1
    264e:	f1 f7       	brne	.-4      	; 0x264c <SERVO_MOTOR_voidRotate+0x1a8>
    2650:	98 a3       	std	Y+32, r25	; 0x20
    2652:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2654:	89 a1       	ldd	r24, Y+33	; 0x21
    2656:	9a a1       	ldd	r25, Y+34	; 0x22
    2658:	01 97       	sbiw	r24, 0x01	; 1
    265a:	9a a3       	std	Y+34, r25	; 0x22
    265c:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    265e:	89 a1       	ldd	r24, Y+33	; 0x21
    2660:	9a a1       	ldd	r25, Y+34	; 0x22
    2662:	00 97       	sbiw	r24, 0x00	; 0
    2664:	69 f7       	brne	.-38     	; 0x2640 <SERVO_MOTOR_voidRotate+0x19c>
    2666:	14 c0       	rjmp	.+40     	; 0x2690 <SERVO_MOTOR_voidRotate+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2668:	6b a1       	ldd	r22, Y+35	; 0x23
    266a:	7c a1       	ldd	r23, Y+36	; 0x24
    266c:	8d a1       	ldd	r24, Y+37	; 0x25
    266e:	9e a1       	ldd	r25, Y+38	; 0x26
    2670:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2674:	dc 01       	movw	r26, r24
    2676:	cb 01       	movw	r24, r22
    2678:	9a a3       	std	Y+34, r25	; 0x22
    267a:	89 a3       	std	Y+33, r24	; 0x21
    267c:	89 a1       	ldd	r24, Y+33	; 0x21
    267e:	9a a1       	ldd	r25, Y+34	; 0x22
    2680:	9e 8f       	std	Y+30, r25	; 0x1e
    2682:	8d 8f       	std	Y+29, r24	; 0x1d
    2684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2688:	01 97       	sbiw	r24, 0x01	; 1
    268a:	f1 f7       	brne	.-4      	; 0x2688 <SERVO_MOTOR_voidRotate+0x1e4>
    268c:	9e 8f       	std	Y+30, r25	; 0x1e
    268e:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	Pwm1_voidSetOCR1A(LEFT);
    2690:	8b e7       	ldi	r24, 0x7B	; 123
    2692:	92 e0       	ldi	r25, 0x02	; 2
    2694:	0e 94 75 08 	call	0x10ea	; 0x10ea <Pwm1_voidSetOCR1A>
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	aa e7       	ldi	r26, 0x7A	; 122
    269e:	b4 e4       	ldi	r27, 0x44	; 68
    26a0:	89 8f       	std	Y+25, r24	; 0x19
    26a2:	9a 8f       	std	Y+26, r25	; 0x1a
    26a4:	ab 8f       	std	Y+27, r26	; 0x1b
    26a6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26a8:	69 8d       	ldd	r22, Y+25	; 0x19
    26aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26b0:	20 e0       	ldi	r18, 0x00	; 0
    26b2:	30 e0       	ldi	r19, 0x00	; 0
    26b4:	4a e7       	ldi	r20, 0x7A	; 122
    26b6:	55 e4       	ldi	r21, 0x45	; 69
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	8d 8b       	std	Y+21, r24	; 0x15
    26c2:	9e 8b       	std	Y+22, r25	; 0x16
    26c4:	af 8b       	std	Y+23, r26	; 0x17
    26c6:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    26c8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ca:	7e 89       	ldd	r23, Y+22	; 0x16
    26cc:	8f 89       	ldd	r24, Y+23	; 0x17
    26ce:	98 8d       	ldd	r25, Y+24	; 0x18
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26dc:	88 23       	and	r24, r24
    26de:	2c f4       	brge	.+10     	; 0x26ea <SERVO_MOTOR_voidRotate+0x246>
		__ticks = 1;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	9c 8b       	std	Y+20, r25	; 0x14
    26e6:	8b 8b       	std	Y+19, r24	; 0x13
    26e8:	3f c0       	rjmp	.+126    	; 0x2768 <SERVO_MOTOR_voidRotate+0x2c4>
	else if (__tmp > 65535)
    26ea:	6d 89       	ldd	r22, Y+21	; 0x15
    26ec:	7e 89       	ldd	r23, Y+22	; 0x16
    26ee:	8f 89       	ldd	r24, Y+23	; 0x17
    26f0:	98 8d       	ldd	r25, Y+24	; 0x18
    26f2:	20 e0       	ldi	r18, 0x00	; 0
    26f4:	3f ef       	ldi	r19, 0xFF	; 255
    26f6:	4f e7       	ldi	r20, 0x7F	; 127
    26f8:	57 e4       	ldi	r21, 0x47	; 71
    26fa:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26fe:	18 16       	cp	r1, r24
    2700:	4c f5       	brge	.+82     	; 0x2754 <SERVO_MOTOR_voidRotate+0x2b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2702:	69 8d       	ldd	r22, Y+25	; 0x19
    2704:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2706:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2708:	9c 8d       	ldd	r25, Y+28	; 0x1c
    270a:	20 e0       	ldi	r18, 0x00	; 0
    270c:	30 e0       	ldi	r19, 0x00	; 0
    270e:	40 e2       	ldi	r20, 0x20	; 32
    2710:	51 e4       	ldi	r21, 0x41	; 65
    2712:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2716:	dc 01       	movw	r26, r24
    2718:	cb 01       	movw	r24, r22
    271a:	bc 01       	movw	r22, r24
    271c:	cd 01       	movw	r24, r26
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	9c 8b       	std	Y+20, r25	; 0x14
    2728:	8b 8b       	std	Y+19, r24	; 0x13
    272a:	0f c0       	rjmp	.+30     	; 0x274a <SERVO_MOTOR_voidRotate+0x2a6>
    272c:	80 e9       	ldi	r24, 0x90	; 144
    272e:	91 e0       	ldi	r25, 0x01	; 1
    2730:	9a 8b       	std	Y+18, r25	; 0x12
    2732:	89 8b       	std	Y+17, r24	; 0x11
    2734:	89 89       	ldd	r24, Y+17	; 0x11
    2736:	9a 89       	ldd	r25, Y+18	; 0x12
    2738:	01 97       	sbiw	r24, 0x01	; 1
    273a:	f1 f7       	brne	.-4      	; 0x2738 <SERVO_MOTOR_voidRotate+0x294>
    273c:	9a 8b       	std	Y+18, r25	; 0x12
    273e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2740:	8b 89       	ldd	r24, Y+19	; 0x13
    2742:	9c 89       	ldd	r25, Y+20	; 0x14
    2744:	01 97       	sbiw	r24, 0x01	; 1
    2746:	9c 8b       	std	Y+20, r25	; 0x14
    2748:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    274a:	8b 89       	ldd	r24, Y+19	; 0x13
    274c:	9c 89       	ldd	r25, Y+20	; 0x14
    274e:	00 97       	sbiw	r24, 0x00	; 0
    2750:	69 f7       	brne	.-38     	; 0x272c <SERVO_MOTOR_voidRotate+0x288>
    2752:	14 c0       	rjmp	.+40     	; 0x277c <SERVO_MOTOR_voidRotate+0x2d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2754:	6d 89       	ldd	r22, Y+21	; 0x15
    2756:	7e 89       	ldd	r23, Y+22	; 0x16
    2758:	8f 89       	ldd	r24, Y+23	; 0x17
    275a:	98 8d       	ldd	r25, Y+24	; 0x18
    275c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2760:	dc 01       	movw	r26, r24
    2762:	cb 01       	movw	r24, r22
    2764:	9c 8b       	std	Y+20, r25	; 0x14
    2766:	8b 8b       	std	Y+19, r24	; 0x13
    2768:	8b 89       	ldd	r24, Y+19	; 0x13
    276a:	9c 89       	ldd	r25, Y+20	; 0x14
    276c:	98 8b       	std	Y+16, r25	; 0x10
    276e:	8f 87       	std	Y+15, r24	; 0x0f
    2770:	8f 85       	ldd	r24, Y+15	; 0x0f
    2772:	98 89       	ldd	r25, Y+16	; 0x10
    2774:	01 97       	sbiw	r24, 0x01	; 1
    2776:	f1 f7       	brne	.-4      	; 0x2774 <SERVO_MOTOR_voidRotate+0x2d0>
    2778:	98 8b       	std	Y+16, r25	; 0x10
    277a:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	Pwm1_voidSetOCR1A(MIDDLE);
    277c:	81 e8       	ldi	r24, 0x81	; 129
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	0e 94 75 08 	call	0x10ea	; 0x10ea <Pwm1_voidSetOCR1A>
    2784:	80 e0       	ldi	r24, 0x00	; 0
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	aa e7       	ldi	r26, 0x7A	; 122
    278a:	b4 e4       	ldi	r27, 0x44	; 68
    278c:	8b 87       	std	Y+11, r24	; 0x0b
    278e:	9c 87       	std	Y+12, r25	; 0x0c
    2790:	ad 87       	std	Y+13, r26	; 0x0d
    2792:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2794:	6b 85       	ldd	r22, Y+11	; 0x0b
    2796:	7c 85       	ldd	r23, Y+12	; 0x0c
    2798:	8d 85       	ldd	r24, Y+13	; 0x0d
    279a:	9e 85       	ldd	r25, Y+14	; 0x0e
    279c:	20 e0       	ldi	r18, 0x00	; 0
    279e:	30 e0       	ldi	r19, 0x00	; 0
    27a0:	4a e7       	ldi	r20, 0x7A	; 122
    27a2:	55 e4       	ldi	r21, 0x45	; 69
    27a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27a8:	dc 01       	movw	r26, r24
    27aa:	cb 01       	movw	r24, r22
    27ac:	8f 83       	std	Y+7, r24	; 0x07
    27ae:	98 87       	std	Y+8, r25	; 0x08
    27b0:	a9 87       	std	Y+9, r26	; 0x09
    27b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	30 e0       	ldi	r19, 0x00	; 0
    27c0:	40 e8       	ldi	r20, 0x80	; 128
    27c2:	5f e3       	ldi	r21, 0x3F	; 63
    27c4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27c8:	88 23       	and	r24, r24
    27ca:	2c f4       	brge	.+10     	; 0x27d6 <SERVO_MOTOR_voidRotate+0x332>
		__ticks = 1;
    27cc:	81 e0       	ldi	r24, 0x01	; 1
    27ce:	90 e0       	ldi	r25, 0x00	; 0
    27d0:	9e 83       	std	Y+6, r25	; 0x06
    27d2:	8d 83       	std	Y+5, r24	; 0x05
    27d4:	3f c0       	rjmp	.+126    	; 0x2854 <SERVO_MOTOR_voidRotate+0x3b0>
	else if (__tmp > 65535)
    27d6:	6f 81       	ldd	r22, Y+7	; 0x07
    27d8:	78 85       	ldd	r23, Y+8	; 0x08
    27da:	89 85       	ldd	r24, Y+9	; 0x09
    27dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    27de:	20 e0       	ldi	r18, 0x00	; 0
    27e0:	3f ef       	ldi	r19, 0xFF	; 255
    27e2:	4f e7       	ldi	r20, 0x7F	; 127
    27e4:	57 e4       	ldi	r21, 0x47	; 71
    27e6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27ea:	18 16       	cp	r1, r24
    27ec:	4c f5       	brge	.+82     	; 0x2840 <SERVO_MOTOR_voidRotate+0x39c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    27f6:	20 e0       	ldi	r18, 0x00	; 0
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	40 e2       	ldi	r20, 0x20	; 32
    27fc:	51 e4       	ldi	r21, 0x41	; 65
    27fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	bc 01       	movw	r22, r24
    2808:	cd 01       	movw	r24, r26
    280a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280e:	dc 01       	movw	r26, r24
    2810:	cb 01       	movw	r24, r22
    2812:	9e 83       	std	Y+6, r25	; 0x06
    2814:	8d 83       	std	Y+5, r24	; 0x05
    2816:	0f c0       	rjmp	.+30     	; 0x2836 <SERVO_MOTOR_voidRotate+0x392>
    2818:	80 e9       	ldi	r24, 0x90	; 144
    281a:	91 e0       	ldi	r25, 0x01	; 1
    281c:	9c 83       	std	Y+4, r25	; 0x04
    281e:	8b 83       	std	Y+3, r24	; 0x03
    2820:	8b 81       	ldd	r24, Y+3	; 0x03
    2822:	9c 81       	ldd	r25, Y+4	; 0x04
    2824:	01 97       	sbiw	r24, 0x01	; 1
    2826:	f1 f7       	brne	.-4      	; 0x2824 <SERVO_MOTOR_voidRotate+0x380>
    2828:	9c 83       	std	Y+4, r25	; 0x04
    282a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    282c:	8d 81       	ldd	r24, Y+5	; 0x05
    282e:	9e 81       	ldd	r25, Y+6	; 0x06
    2830:	01 97       	sbiw	r24, 0x01	; 1
    2832:	9e 83       	std	Y+6, r25	; 0x06
    2834:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2836:	8d 81       	ldd	r24, Y+5	; 0x05
    2838:	9e 81       	ldd	r25, Y+6	; 0x06
    283a:	00 97       	sbiw	r24, 0x00	; 0
    283c:	69 f7       	brne	.-38     	; 0x2818 <SERVO_MOTOR_voidRotate+0x374>
    283e:	14 c0       	rjmp	.+40     	; 0x2868 <SERVO_MOTOR_voidRotate+0x3c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2840:	6f 81       	ldd	r22, Y+7	; 0x07
    2842:	78 85       	ldd	r23, Y+8	; 0x08
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    284c:	dc 01       	movw	r26, r24
    284e:	cb 01       	movw	r24, r22
    2850:	9e 83       	std	Y+6, r25	; 0x06
    2852:	8d 83       	std	Y+5, r24	; 0x05
    2854:	8d 81       	ldd	r24, Y+5	; 0x05
    2856:	9e 81       	ldd	r25, Y+6	; 0x06
    2858:	9a 83       	std	Y+2, r25	; 0x02
    285a:	89 83       	std	Y+1, r24	; 0x01
    285c:	89 81       	ldd	r24, Y+1	; 0x01
    285e:	9a 81       	ldd	r25, Y+2	; 0x02
    2860:	01 97       	sbiw	r24, 0x01	; 1
    2862:	f1 f7       	brne	.-4      	; 0x2860 <SERVO_MOTOR_voidRotate+0x3bc>
    2864:	9a 83       	std	Y+2, r25	; 0x02
    2866:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
}
    2868:	e8 96       	adiw	r28, 0x38	; 56
    286a:	0f b6       	in	r0, 0x3f	; 63
    286c:	f8 94       	cli
    286e:	de bf       	out	0x3e, r29	; 62
    2870:	0f be       	out	0x3f, r0	; 63
    2872:	cd bf       	out	0x3d, r28	; 61
    2874:	cf 91       	pop	r28
    2876:	df 91       	pop	r29
    2878:	08 95       	ret

0000287a <SERVO_MOTOR_voidRotateLeft>:
void SERVO_MOTOR_voidRotateLeft(void){
    287a:	df 93       	push	r29
    287c:	cf 93       	push	r28
    287e:	cd b7       	in	r28, 0x3d	; 61
    2880:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidSetOCR1A(LEFT);
    2882:	8b e7       	ldi	r24, 0x7B	; 123
    2884:	92 e0       	ldi	r25, 0x02	; 2
    2886:	0e 94 75 08 	call	0x10ea	; 0x10ea <Pwm1_voidSetOCR1A>
}
    288a:	cf 91       	pop	r28
    288c:	df 91       	pop	r29
    288e:	08 95       	ret

00002890 <SERVO_MOTOR_voidRotateRight>:
void SERVO_MOTOR_voidRotateRight(void){
    2890:	df 93       	push	r29
    2892:	cf 93       	push	r28
    2894:	cd b7       	in	r28, 0x3d	; 61
    2896:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidSetOCR1A(RIGHT);
    2898:	87 e8       	ldi	r24, 0x87	; 135
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	0e 94 75 08 	call	0x10ea	; 0x10ea <Pwm1_voidSetOCR1A>
}
    28a0:	cf 91       	pop	r28
    28a2:	df 91       	pop	r29
    28a4:	08 95       	ret

000028a6 <SERVO_MOTOR_voidRotateMiddle>:
void SERVO_MOTOR_voidRotateMiddle(void){
    28a6:	df 93       	push	r29
    28a8:	cf 93       	push	r28
    28aa:	cd b7       	in	r28, 0x3d	; 61
    28ac:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidSetOCR1A(MIDDLE);
    28ae:	81 e8       	ldi	r24, 0x81	; 129
    28b0:	91 e0       	ldi	r25, 0x01	; 1
    28b2:	0e 94 75 08 	call	0x10ea	; 0x10ea <Pwm1_voidSetOCR1A>
}
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <SERVO_MOTOR_voidTurnOff>:



void SERVO_MOTOR_voidTurnOff(void){
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	cd b7       	in	r28, 0x3d	; 61
    28c2:	de b7       	in	r29, 0x3e	; 62
	Pwm1_voidStop();
    28c4:	0e 94 a7 08 	call	0x114e	; 0x114e <Pwm1_voidStop>
	return;
}
    28c8:	cf 91       	pop	r28
    28ca:	df 91       	pop	r29
    28cc:	08 95       	ret

000028ce <MOTORS_CAR_voidInit>:
#include"../../LIBRARY/errorState.h"
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include "MOTORS_CAR_priv.h"
#include "MOTORS_CAR_conf.h"
void MOTORS_CAR_voidInit(void){
    28ce:	df 93       	push	r29
    28d0:	cf 93       	push	r28
    28d2:	cd b7       	in	r28, 0x3d	; 61
    28d4:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(MOTORS_CAR_EN1_GROUP,MOTORS_CAR_EN1_PIN,DIO_u8OUTPUT);
    28d6:	82 e0       	ldi	r24, 0x02	; 2
    28d8:	62 e0       	ldi	r22, 0x02	; 2
    28da:	41 e0       	ldi	r20, 0x01	; 1
    28dc:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_EN2_GROUP,MOTORS_CAR_EN2_PIN,DIO_u8OUTPUT);
    28e0:	82 e0       	ldi	r24, 0x02	; 2
    28e2:	63 e0       	ldi	r22, 0x03	; 3
    28e4:	41 e0       	ldi	r20, 0x01	; 1
    28e6:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8OUTPUT);
    28ea:	82 e0       	ldi	r24, 0x02	; 2
    28ec:	64 e0       	ldi	r22, 0x04	; 4
    28ee:	41 e0       	ldi	r20, 0x01	; 1
    28f0:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8OUTPUT);
    28f4:	82 e0       	ldi	r24, 0x02	; 2
    28f6:	65 e0       	ldi	r22, 0x05	; 5
    28f8:	41 e0       	ldi	r20, 0x01	; 1
    28fa:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8OUTPUT);
    28fe:	82 e0       	ldi	r24, 0x02	; 2
    2900:	66 e0       	ldi	r22, 0x06	; 6
    2902:	41 e0       	ldi	r20, 0x01	; 1
    2904:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8OUTPUT);
    2908:	82 e0       	ldi	r24, 0x02	; 2
    290a:	67 e0       	ldi	r22, 0x07	; 7
    290c:	41 e0       	ldi	r20, 0x01	; 1
    290e:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>

	DIO_voidSetPinValue(MOTORS_CAR_EN1_GROUP,MOTORS_CAR_EN1_PIN,DIO_u8HIGH);
    2912:	82 e0       	ldi	r24, 0x02	; 2
    2914:	62 e0       	ldi	r22, 0x02	; 2
    2916:	41 e0       	ldi	r20, 0x01	; 1
    2918:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_EN2_GROUP,MOTORS_CAR_EN2_PIN,DIO_u8HIGH);
    291c:	82 e0       	ldi	r24, 0x02	; 2
    291e:	63 e0       	ldi	r22, 0x03	; 3
    2920:	41 e0       	ldi	r20, 0x01	; 1
    2922:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>

}
    2926:	cf 91       	pop	r28
    2928:	df 91       	pop	r29
    292a:	08 95       	ret

0000292c <MOTORS_CAR_voidForward>:
void MOTORS_CAR_voidForward(void){
    292c:	df 93       	push	r29
    292e:	cf 93       	push	r28
    2930:	cd b7       	in	r28, 0x3d	; 61
    2932:	de b7       	in	r29, 0x3e	; 62
	/*Forward left*/
	DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8HIGH);
    2934:	82 e0       	ldi	r24, 0x02	; 2
    2936:	66 e0       	ldi	r22, 0x06	; 6
    2938:	41 e0       	ldi	r20, 0x01	; 1
    293a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8LOW);
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	67 e0       	ldi	r22, 0x07	; 7
    2942:	40 e0       	ldi	r20, 0x00	; 0
    2944:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	/* FORWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    2948:	82 e0       	ldi	r24, 0x02	; 2
    294a:	64 e0       	ldi	r22, 0x04	; 4
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8HIGH);
    2952:	82 e0       	ldi	r24, 0x02	; 2
    2954:	65 e0       	ldi	r22, 0x05	; 5
    2956:	41 e0       	ldi	r20, 0x01	; 1
    2958:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
}
    295c:	cf 91       	pop	r28
    295e:	df 91       	pop	r29
    2960:	08 95       	ret

00002962 <MOTORS_CAR_voidBackward>:
void MOTORS_CAR_voidBackward(void){
    2962:	df 93       	push	r29
    2964:	cf 93       	push	r28
    2966:	cd b7       	in	r28, 0x3d	; 61
    2968:	de b7       	in	r29, 0x3e	; 62
	/*BACKWARD LEFT*/
	DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8LOW);
    296a:	82 e0       	ldi	r24, 0x02	; 2
    296c:	66 e0       	ldi	r22, 0x06	; 6
    296e:	40 e0       	ldi	r20, 0x00	; 0
    2970:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8HIGH);
    2974:	82 e0       	ldi	r24, 0x02	; 2
    2976:	67 e0       	ldi	r22, 0x07	; 7
    2978:	41 e0       	ldi	r20, 0x01	; 1
    297a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	/*BACKWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8HIGH);
    297e:	82 e0       	ldi	r24, 0x02	; 2
    2980:	64 e0       	ldi	r22, 0x04	; 4
    2982:	41 e0       	ldi	r20, 0x01	; 1
    2984:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8LOW);
    2988:	82 e0       	ldi	r24, 0x02	; 2
    298a:	65 e0       	ldi	r22, 0x05	; 5
    298c:	40 e0       	ldi	r20, 0x00	; 0
    298e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
}
    2992:	cf 91       	pop	r28
    2994:	df 91       	pop	r29
    2996:	08 95       	ret

00002998 <MOTORS_CAR_voidRight>:
void MOTORS_CAR_voidRight(void){
    2998:	df 93       	push	r29
    299a:	cf 93       	push	r28
    299c:	cd b7       	in	r28, 0x3d	; 61
    299e:	de b7       	in	r29, 0x3e	; 62
	/*BACKWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8HIGH);
    29a0:	82 e0       	ldi	r24, 0x02	; 2
    29a2:	64 e0       	ldi	r22, 0x04	; 4
    29a4:	41 e0       	ldi	r20, 0x01	; 1
    29a6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8LOW);
    29aa:	82 e0       	ldi	r24, 0x02	; 2
    29ac:	65 e0       	ldi	r22, 0x05	; 5
    29ae:	40 e0       	ldi	r20, 0x00	; 0
    29b0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>

	/* FORWARD RIGHT*/
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    29b4:	82 e0       	ldi	r24, 0x02	; 2
    29b6:	64 e0       	ldi	r22, 0x04	; 4
    29b8:	40 e0       	ldi	r20, 0x00	; 0
    29ba:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8HIGH);
    29be:	82 e0       	ldi	r24, 0x02	; 2
    29c0:	65 e0       	ldi	r22, 0x05	; 5
    29c2:	41 e0       	ldi	r20, 0x01	; 1
    29c4:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>


}
    29c8:	cf 91       	pop	r28
    29ca:	df 91       	pop	r29
    29cc:	08 95       	ret

000029ce <MOTORS_CAR_voidLeft>:
void MOTORS_CAR_voidLeft(void){
    29ce:	df 93       	push	r29
    29d0:	cf 93       	push	r28
    29d2:	cd b7       	in	r28, 0x3d	; 61
    29d4:	de b7       	in	r29, 0x3e	; 62
	/*BACKWARD LEFT*/
		DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8LOW);
    29d6:	82 e0       	ldi	r24, 0x02	; 2
    29d8:	66 e0       	ldi	r22, 0x06	; 6
    29da:	40 e0       	ldi	r20, 0x00	; 0
    29dc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8HIGH);
    29e0:	82 e0       	ldi	r24, 0x02	; 2
    29e2:	67 e0       	ldi	r22, 0x07	; 7
    29e4:	41 e0       	ldi	r20, 0x01	; 1
    29e6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>

	/* FORWARD RIGHT*/
		DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    29ea:	82 e0       	ldi	r24, 0x02	; 2
    29ec:	64 e0       	ldi	r22, 0x04	; 4
    29ee:	40 e0       	ldi	r20, 0x00	; 0
    29f0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8HIGH);
    29f4:	82 e0       	ldi	r24, 0x02	; 2
    29f6:	65 e0       	ldi	r22, 0x05	; 5
    29f8:	41 e0       	ldi	r20, 0x01	; 1
    29fa:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
}
    29fe:	cf 91       	pop	r28
    2a00:	df 91       	pop	r29
    2a02:	08 95       	ret

00002a04 <MOTORS_CAR_voidStop>:
void MOTORS_CAR_voidStop(void){
    2a04:	df 93       	push	r29
    2a06:	cf 93       	push	r28
    2a08:	cd b7       	in	r28, 0x3d	; 61
    2a0a:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinValue(MOTORS_CAR_A1_GROUP,MOTORS_CAR_A1_PIN,DIO_u8LOW);
    2a0c:	82 e0       	ldi	r24, 0x02	; 2
    2a0e:	64 e0       	ldi	r22, 0x04	; 4
    2a10:	40 e0       	ldi	r20, 0x00	; 0
    2a12:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A2_GROUP,MOTORS_CAR_A2_PIN,DIO_u8LOW);
    2a16:	82 e0       	ldi	r24, 0x02	; 2
    2a18:	65 e0       	ldi	r22, 0x05	; 5
    2a1a:	40 e0       	ldi	r20, 0x00	; 0
    2a1c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A3_GROUP,MOTORS_CAR_A3_PIN,DIO_u8LOW);
    2a20:	82 e0       	ldi	r24, 0x02	; 2
    2a22:	66 e0       	ldi	r22, 0x06	; 6
    2a24:	40 e0       	ldi	r20, 0x00	; 0
    2a26:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(MOTORS_CAR_A4_GROUP,MOTORS_CAR_A4_PIN,DIO_u8LOW);
    2a2a:	82 e0       	ldi	r24, 0x02	; 2
    2a2c:	67 e0       	ldi	r22, 0x07	; 7
    2a2e:	40 e0       	ldi	r20, 0x00	; 0
    2a30:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
}
    2a34:	cf 91       	pop	r28
    2a36:	df 91       	pop	r29
    2a38:	08 95       	ret

00002a3a <LCD_voidWriteNLatch>:
#include"../../LIBRARY/stdTypes.h"
#include"../../MCAL/DIO/DIO_int.h"
#include"LCD_priv.h"
#include"LCD_conf.h"
#include<util/delay.h>
void LCD_voidWriteNLatch(u8 Copy_u8Byte){
    2a3a:	df 93       	push	r29
    2a3c:	cf 93       	push	r28
    2a3e:	cd b7       	in	r28, 0x3d	; 61
    2a40:	de b7       	in	r29, 0x3e	; 62
    2a42:	e9 97       	sbiw	r28, 0x39	; 57
    2a44:	0f b6       	in	r0, 0x3f	; 63
    2a46:	f8 94       	cli
    2a48:	de bf       	out	0x3e, r29	; 62
    2a4a:	0f be       	out	0x3f, r0	; 63
    2a4c:	cd bf       	out	0x3d, r28	; 61
    2a4e:	89 af       	std	Y+57, r24	; 0x39

	DIO_voidSetPinValue(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8LOW);
    2a50:	81 e0       	ldi	r24, 0x01	; 1
    2a52:	62 e0       	ldi	r22, 0x02	; 2
    2a54:	40 e0       	ldi	r20, 0x00	; 0
    2a56:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	63 e0       	ldi	r22, 0x03	; 3
    2a5e:	40 e0       	ldi	r20, 0x00	; 0
    2a60:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D3_PIN,(Copy_u8Byte>>3)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D2_PIN,(Copy_u8Byte>>2)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D1_PIN,(Copy_u8Byte>>1)&DIO_u8BIT_MASK);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D0_PIN,(Copy_u8Byte>>0)&DIO_u8BIT_MASK);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,(Copy_u8Byte>>7)&DIO_u8BIT_MASK);
    2a64:	89 ad       	ldd	r24, Y+57	; 0x39
    2a66:	98 2f       	mov	r25, r24
    2a68:	99 1f       	adc	r25, r25
    2a6a:	99 27       	eor	r25, r25
    2a6c:	99 1f       	adc	r25, r25
    2a6e:	80 e0       	ldi	r24, 0x00	; 0
    2a70:	67 e0       	ldi	r22, 0x07	; 7
    2a72:	49 2f       	mov	r20, r25
    2a74:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D6_PIN,(Copy_u8Byte>>6)&DIO_u8BIT_MASK);
    2a78:	89 ad       	ldd	r24, Y+57	; 0x39
    2a7a:	82 95       	swap	r24
    2a7c:	86 95       	lsr	r24
    2a7e:	86 95       	lsr	r24
    2a80:	83 70       	andi	r24, 0x03	; 3
    2a82:	98 2f       	mov	r25, r24
    2a84:	91 70       	andi	r25, 0x01	; 1
    2a86:	80 e0       	ldi	r24, 0x00	; 0
    2a88:	66 e0       	ldi	r22, 0x06	; 6
    2a8a:	49 2f       	mov	r20, r25
    2a8c:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D5_PIN,(Copy_u8Byte>>5)&DIO_u8BIT_MASK);
    2a90:	89 ad       	ldd	r24, Y+57	; 0x39
    2a92:	82 95       	swap	r24
    2a94:	86 95       	lsr	r24
    2a96:	87 70       	andi	r24, 0x07	; 7
    2a98:	98 2f       	mov	r25, r24
    2a9a:	91 70       	andi	r25, 0x01	; 1
    2a9c:	80 e0       	ldi	r24, 0x00	; 0
    2a9e:	65 e0       	ldi	r22, 0x05	; 5
    2aa0:	49 2f       	mov	r20, r25
    2aa2:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D4_PIN,(Copy_u8Byte>>4)&DIO_u8BIT_MASK);
    2aa6:	89 ad       	ldd	r24, Y+57	; 0x39
    2aa8:	82 95       	swap	r24
    2aaa:	8f 70       	andi	r24, 0x0F	; 15
    2aac:	98 2f       	mov	r25, r24
    2aae:	91 70       	andi	r25, 0x01	; 1
    2ab0:	80 e0       	ldi	r24, 0x00	; 0
    2ab2:	64 e0       	ldi	r22, 0x04	; 4
    2ab4:	49 2f       	mov	r20, r25
    2ab6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	63 e0       	ldi	r22, 0x03	; 3
    2abe:	41 e0       	ldi	r20, 0x01	; 1
    2ac0:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
    2ac4:	80 e0       	ldi	r24, 0x00	; 0
    2ac6:	90 e0       	ldi	r25, 0x00	; 0
    2ac8:	a0 e8       	ldi	r26, 0x80	; 128
    2aca:	bf e3       	ldi	r27, 0x3F	; 63
    2acc:	8d ab       	std	Y+53, r24	; 0x35
    2ace:	9e ab       	std	Y+54, r25	; 0x36
    2ad0:	af ab       	std	Y+55, r26	; 0x37
    2ad2:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ad4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ad6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ad8:	8f a9       	ldd	r24, Y+55	; 0x37
    2ada:	98 ad       	ldd	r25, Y+56	; 0x38
    2adc:	20 e0       	ldi	r18, 0x00	; 0
    2ade:	30 e0       	ldi	r19, 0x00	; 0
    2ae0:	4a e7       	ldi	r20, 0x7A	; 122
    2ae2:	55 e4       	ldi	r21, 0x45	; 69
    2ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ae8:	dc 01       	movw	r26, r24
    2aea:	cb 01       	movw	r24, r22
    2aec:	89 ab       	std	Y+49, r24	; 0x31
    2aee:	9a ab       	std	Y+50, r25	; 0x32
    2af0:	ab ab       	std	Y+51, r26	; 0x33
    2af2:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2af4:	69 a9       	ldd	r22, Y+49	; 0x31
    2af6:	7a a9       	ldd	r23, Y+50	; 0x32
    2af8:	8b a9       	ldd	r24, Y+51	; 0x33
    2afa:	9c a9       	ldd	r25, Y+52	; 0x34
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	30 e0       	ldi	r19, 0x00	; 0
    2b00:	40 e8       	ldi	r20, 0x80	; 128
    2b02:	5f e3       	ldi	r21, 0x3F	; 63
    2b04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b08:	88 23       	and	r24, r24
    2b0a:	2c f4       	brge	.+10     	; 0x2b16 <LCD_voidWriteNLatch+0xdc>
		__ticks = 1;
    2b0c:	81 e0       	ldi	r24, 0x01	; 1
    2b0e:	90 e0       	ldi	r25, 0x00	; 0
    2b10:	98 ab       	std	Y+48, r25	; 0x30
    2b12:	8f a7       	std	Y+47, r24	; 0x2f
    2b14:	3f c0       	rjmp	.+126    	; 0x2b94 <LCD_voidWriteNLatch+0x15a>
	else if (__tmp > 65535)
    2b16:	69 a9       	ldd	r22, Y+49	; 0x31
    2b18:	7a a9       	ldd	r23, Y+50	; 0x32
    2b1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	3f ef       	ldi	r19, 0xFF	; 255
    2b22:	4f e7       	ldi	r20, 0x7F	; 127
    2b24:	57 e4       	ldi	r21, 0x47	; 71
    2b26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b2a:	18 16       	cp	r1, r24
    2b2c:	4c f5       	brge	.+82     	; 0x2b80 <LCD_voidWriteNLatch+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b2e:	6d a9       	ldd	r22, Y+53	; 0x35
    2b30:	7e a9       	ldd	r23, Y+54	; 0x36
    2b32:	8f a9       	ldd	r24, Y+55	; 0x37
    2b34:	98 ad       	ldd	r25, Y+56	; 0x38
    2b36:	20 e0       	ldi	r18, 0x00	; 0
    2b38:	30 e0       	ldi	r19, 0x00	; 0
    2b3a:	40 e2       	ldi	r20, 0x20	; 32
    2b3c:	51 e4       	ldi	r21, 0x41	; 65
    2b3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b42:	dc 01       	movw	r26, r24
    2b44:	cb 01       	movw	r24, r22
    2b46:	bc 01       	movw	r22, r24
    2b48:	cd 01       	movw	r24, r26
    2b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b4e:	dc 01       	movw	r26, r24
    2b50:	cb 01       	movw	r24, r22
    2b52:	98 ab       	std	Y+48, r25	; 0x30
    2b54:	8f a7       	std	Y+47, r24	; 0x2f
    2b56:	0f c0       	rjmp	.+30     	; 0x2b76 <LCD_voidWriteNLatch+0x13c>
    2b58:	80 e9       	ldi	r24, 0x90	; 144
    2b5a:	91 e0       	ldi	r25, 0x01	; 1
    2b5c:	9e a7       	std	Y+46, r25	; 0x2e
    2b5e:	8d a7       	std	Y+45, r24	; 0x2d
    2b60:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b62:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b64:	01 97       	sbiw	r24, 0x01	; 1
    2b66:	f1 f7       	brne	.-4      	; 0x2b64 <LCD_voidWriteNLatch+0x12a>
    2b68:	9e a7       	std	Y+46, r25	; 0x2e
    2b6a:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b6c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b6e:	98 a9       	ldd	r25, Y+48	; 0x30
    2b70:	01 97       	sbiw	r24, 0x01	; 1
    2b72:	98 ab       	std	Y+48, r25	; 0x30
    2b74:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b76:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b78:	98 a9       	ldd	r25, Y+48	; 0x30
    2b7a:	00 97       	sbiw	r24, 0x00	; 0
    2b7c:	69 f7       	brne	.-38     	; 0x2b58 <LCD_voidWriteNLatch+0x11e>
    2b7e:	14 c0       	rjmp	.+40     	; 0x2ba8 <LCD_voidWriteNLatch+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b80:	69 a9       	ldd	r22, Y+49	; 0x31
    2b82:	7a a9       	ldd	r23, Y+50	; 0x32
    2b84:	8b a9       	ldd	r24, Y+51	; 0x33
    2b86:	9c a9       	ldd	r25, Y+52	; 0x34
    2b88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b8c:	dc 01       	movw	r26, r24
    2b8e:	cb 01       	movw	r24, r22
    2b90:	98 ab       	std	Y+48, r25	; 0x30
    2b92:	8f a7       	std	Y+47, r24	; 0x2f
    2b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b96:	98 a9       	ldd	r25, Y+48	; 0x30
    2b98:	9c a7       	std	Y+44, r25	; 0x2c
    2b9a:	8b a7       	std	Y+43, r24	; 0x2b
    2b9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ba0:	01 97       	sbiw	r24, 0x01	; 1
    2ba2:	f1 f7       	brne	.-4      	; 0x2ba0 <LCD_voidWriteNLatch+0x166>
    2ba4:	9c a7       	std	Y+44, r25	; 0x2c
    2ba6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    2ba8:	81 e0       	ldi	r24, 0x01	; 1
    2baa:	63 e0       	ldi	r22, 0x03	; 3
    2bac:	40 e0       	ldi	r20, 0x00	; 0
    2bae:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
    2bb2:	80 e0       	ldi	r24, 0x00	; 0
    2bb4:	90 e0       	ldi	r25, 0x00	; 0
    2bb6:	a0 e0       	ldi	r26, 0x00	; 0
    2bb8:	b0 e4       	ldi	r27, 0x40	; 64
    2bba:	8f a3       	std	Y+39, r24	; 0x27
    2bbc:	98 a7       	std	Y+40, r25	; 0x28
    2bbe:	a9 a7       	std	Y+41, r26	; 0x29
    2bc0:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bc2:	6f a1       	ldd	r22, Y+39	; 0x27
    2bc4:	78 a5       	ldd	r23, Y+40	; 0x28
    2bc6:	89 a5       	ldd	r24, Y+41	; 0x29
    2bc8:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bca:	20 e0       	ldi	r18, 0x00	; 0
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	4a e7       	ldi	r20, 0x7A	; 122
    2bd0:	55 e4       	ldi	r21, 0x45	; 69
    2bd2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd6:	dc 01       	movw	r26, r24
    2bd8:	cb 01       	movw	r24, r22
    2bda:	8b a3       	std	Y+35, r24	; 0x23
    2bdc:	9c a3       	std	Y+36, r25	; 0x24
    2bde:	ad a3       	std	Y+37, r26	; 0x25
    2be0:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2be2:	6b a1       	ldd	r22, Y+35	; 0x23
    2be4:	7c a1       	ldd	r23, Y+36	; 0x24
    2be6:	8d a1       	ldd	r24, Y+37	; 0x25
    2be8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <LCD_voidWriteNLatch+0x1ca>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9a a3       	std	Y+34, r25	; 0x22
    2c00:	89 a3       	std	Y+33, r24	; 0x21
    2c02:	3f c0       	rjmp	.+126    	; 0x2c82 <LCD_voidWriteNLatch+0x248>
	else if (__tmp > 65535)
    2c04:	6b a1       	ldd	r22, Y+35	; 0x23
    2c06:	7c a1       	ldd	r23, Y+36	; 0x24
    2c08:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0a:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0c:	20 e0       	ldi	r18, 0x00	; 0
    2c0e:	3f ef       	ldi	r19, 0xFF	; 255
    2c10:	4f e7       	ldi	r20, 0x7F	; 127
    2c12:	57 e4       	ldi	r21, 0x47	; 71
    2c14:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c18:	18 16       	cp	r1, r24
    2c1a:	4c f5       	brge	.+82     	; 0x2c6e <LCD_voidWriteNLatch+0x234>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c1c:	6f a1       	ldd	r22, Y+39	; 0x27
    2c1e:	78 a5       	ldd	r23, Y+40	; 0x28
    2c20:	89 a5       	ldd	r24, Y+41	; 0x29
    2c22:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c24:	20 e0       	ldi	r18, 0x00	; 0
    2c26:	30 e0       	ldi	r19, 0x00	; 0
    2c28:	40 e2       	ldi	r20, 0x20	; 32
    2c2a:	51 e4       	ldi	r21, 0x41	; 65
    2c2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c30:	dc 01       	movw	r26, r24
    2c32:	cb 01       	movw	r24, r22
    2c34:	bc 01       	movw	r22, r24
    2c36:	cd 01       	movw	r24, r26
    2c38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c3c:	dc 01       	movw	r26, r24
    2c3e:	cb 01       	movw	r24, r22
    2c40:	9a a3       	std	Y+34, r25	; 0x22
    2c42:	89 a3       	std	Y+33, r24	; 0x21
    2c44:	0f c0       	rjmp	.+30     	; 0x2c64 <LCD_voidWriteNLatch+0x22a>
    2c46:	80 e9       	ldi	r24, 0x90	; 144
    2c48:	91 e0       	ldi	r25, 0x01	; 1
    2c4a:	98 a3       	std	Y+32, r25	; 0x20
    2c4c:	8f 8f       	std	Y+31, r24	; 0x1f
    2c4e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c50:	98 a1       	ldd	r25, Y+32	; 0x20
    2c52:	01 97       	sbiw	r24, 0x01	; 1
    2c54:	f1 f7       	brne	.-4      	; 0x2c52 <LCD_voidWriteNLatch+0x218>
    2c56:	98 a3       	std	Y+32, r25	; 0x20
    2c58:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c5a:	89 a1       	ldd	r24, Y+33	; 0x21
    2c5c:	9a a1       	ldd	r25, Y+34	; 0x22
    2c5e:	01 97       	sbiw	r24, 0x01	; 1
    2c60:	9a a3       	std	Y+34, r25	; 0x22
    2c62:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c64:	89 a1       	ldd	r24, Y+33	; 0x21
    2c66:	9a a1       	ldd	r25, Y+34	; 0x22
    2c68:	00 97       	sbiw	r24, 0x00	; 0
    2c6a:	69 f7       	brne	.-38     	; 0x2c46 <LCD_voidWriteNLatch+0x20c>
    2c6c:	14 c0       	rjmp	.+40     	; 0x2c96 <LCD_voidWriteNLatch+0x25c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c6e:	6b a1       	ldd	r22, Y+35	; 0x23
    2c70:	7c a1       	ldd	r23, Y+36	; 0x24
    2c72:	8d a1       	ldd	r24, Y+37	; 0x25
    2c74:	9e a1       	ldd	r25, Y+38	; 0x26
    2c76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c7a:	dc 01       	movw	r26, r24
    2c7c:	cb 01       	movw	r24, r22
    2c7e:	9a a3       	std	Y+34, r25	; 0x22
    2c80:	89 a3       	std	Y+33, r24	; 0x21
    2c82:	89 a1       	ldd	r24, Y+33	; 0x21
    2c84:	9a a1       	ldd	r25, Y+34	; 0x22
    2c86:	9e 8f       	std	Y+30, r25	; 0x1e
    2c88:	8d 8f       	std	Y+29, r24	; 0x1d
    2c8a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c8c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c8e:	01 97       	sbiw	r24, 0x01	; 1
    2c90:	f1 f7       	brne	.-4      	; 0x2c8e <LCD_voidWriteNLatch+0x254>
    2c92:	9e 8f       	std	Y+30, r25	; 0x1e
    2c94:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(2);
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,((Copy_u8Byte>>3)&1));
    2c96:	89 ad       	ldd	r24, Y+57	; 0x39
    2c98:	86 95       	lsr	r24
    2c9a:	86 95       	lsr	r24
    2c9c:	86 95       	lsr	r24
    2c9e:	98 2f       	mov	r25, r24
    2ca0:	91 70       	andi	r25, 0x01	; 1
    2ca2:	80 e0       	ldi	r24, 0x00	; 0
    2ca4:	67 e0       	ldi	r22, 0x07	; 7
    2ca6:	49 2f       	mov	r20, r25
    2ca8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,((Copy_u8Byte>>2)&1));
    2cac:	89 ad       	ldd	r24, Y+57	; 0x39
    2cae:	86 95       	lsr	r24
    2cb0:	86 95       	lsr	r24
    2cb2:	98 2f       	mov	r25, r24
    2cb4:	91 70       	andi	r25, 0x01	; 1
    2cb6:	80 e0       	ldi	r24, 0x00	; 0
    2cb8:	66 e0       	ldi	r22, 0x06	; 6
    2cba:	49 2f       	mov	r20, r25
    2cbc:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,((Copy_u8Byte>>1)&1));
    2cc0:	89 ad       	ldd	r24, Y+57	; 0x39
    2cc2:	86 95       	lsr	r24
    2cc4:	98 2f       	mov	r25, r24
    2cc6:	91 70       	andi	r25, 0x01	; 1
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	65 e0       	ldi	r22, 0x05	; 5
    2ccc:	49 2f       	mov	r20, r25
    2cce:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,((Copy_u8Byte>>0)&1));
    2cd2:	89 ad       	ldd	r24, Y+57	; 0x39
    2cd4:	98 2f       	mov	r25, r24
    2cd6:	91 70       	andi	r25, 0x01	; 1
    2cd8:	80 e0       	ldi	r24, 0x00	; 0
    2cda:	64 e0       	ldi	r22, 0x04	; 4
    2cdc:	49 2f       	mov	r20, r25
    2cde:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    2ce2:	81 e0       	ldi	r24, 0x01	; 1
    2ce4:	63 e0       	ldi	r22, 0x03	; 3
    2ce6:	41 e0       	ldi	r20, 0x01	; 1
    2ce8:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
    2cec:	80 e0       	ldi	r24, 0x00	; 0
    2cee:	90 e0       	ldi	r25, 0x00	; 0
    2cf0:	a0 e8       	ldi	r26, 0x80	; 128
    2cf2:	bf e3       	ldi	r27, 0x3F	; 63
    2cf4:	89 8f       	std	Y+25, r24	; 0x19
    2cf6:	9a 8f       	std	Y+26, r25	; 0x1a
    2cf8:	ab 8f       	std	Y+27, r26	; 0x1b
    2cfa:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cfc:	69 8d       	ldd	r22, Y+25	; 0x19
    2cfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d00:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d02:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d04:	20 e0       	ldi	r18, 0x00	; 0
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	4a e7       	ldi	r20, 0x7A	; 122
    2d0a:	55 e4       	ldi	r21, 0x45	; 69
    2d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d10:	dc 01       	movw	r26, r24
    2d12:	cb 01       	movw	r24, r22
    2d14:	8d 8b       	std	Y+21, r24	; 0x15
    2d16:	9e 8b       	std	Y+22, r25	; 0x16
    2d18:	af 8b       	std	Y+23, r26	; 0x17
    2d1a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    2d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    2d20:	8f 89       	ldd	r24, Y+23	; 0x17
    2d22:	98 8d       	ldd	r25, Y+24	; 0x18
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	40 e8       	ldi	r20, 0x80	; 128
    2d2a:	5f e3       	ldi	r21, 0x3F	; 63
    2d2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d30:	88 23       	and	r24, r24
    2d32:	2c f4       	brge	.+10     	; 0x2d3e <LCD_voidWriteNLatch+0x304>
		__ticks = 1;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	9c 8b       	std	Y+20, r25	; 0x14
    2d3a:	8b 8b       	std	Y+19, r24	; 0x13
    2d3c:	3f c0       	rjmp	.+126    	; 0x2dbc <LCD_voidWriteNLatch+0x382>
	else if (__tmp > 65535)
    2d3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2d40:	7e 89       	ldd	r23, Y+22	; 0x16
    2d42:	8f 89       	ldd	r24, Y+23	; 0x17
    2d44:	98 8d       	ldd	r25, Y+24	; 0x18
    2d46:	20 e0       	ldi	r18, 0x00	; 0
    2d48:	3f ef       	ldi	r19, 0xFF	; 255
    2d4a:	4f e7       	ldi	r20, 0x7F	; 127
    2d4c:	57 e4       	ldi	r21, 0x47	; 71
    2d4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d52:	18 16       	cp	r1, r24
    2d54:	4c f5       	brge	.+82     	; 0x2da8 <LCD_voidWriteNLatch+0x36e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d56:	69 8d       	ldd	r22, Y+25	; 0x19
    2d58:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d5a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d5c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	30 e0       	ldi	r19, 0x00	; 0
    2d62:	40 e2       	ldi	r20, 0x20	; 32
    2d64:	51 e4       	ldi	r21, 0x41	; 65
    2d66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6a:	dc 01       	movw	r26, r24
    2d6c:	cb 01       	movw	r24, r22
    2d6e:	bc 01       	movw	r22, r24
    2d70:	cd 01       	movw	r24, r26
    2d72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d76:	dc 01       	movw	r26, r24
    2d78:	cb 01       	movw	r24, r22
    2d7a:	9c 8b       	std	Y+20, r25	; 0x14
    2d7c:	8b 8b       	std	Y+19, r24	; 0x13
    2d7e:	0f c0       	rjmp	.+30     	; 0x2d9e <LCD_voidWriteNLatch+0x364>
    2d80:	80 e9       	ldi	r24, 0x90	; 144
    2d82:	91 e0       	ldi	r25, 0x01	; 1
    2d84:	9a 8b       	std	Y+18, r25	; 0x12
    2d86:	89 8b       	std	Y+17, r24	; 0x11
    2d88:	89 89       	ldd	r24, Y+17	; 0x11
    2d8a:	9a 89       	ldd	r25, Y+18	; 0x12
    2d8c:	01 97       	sbiw	r24, 0x01	; 1
    2d8e:	f1 f7       	brne	.-4      	; 0x2d8c <LCD_voidWriteNLatch+0x352>
    2d90:	9a 8b       	std	Y+18, r25	; 0x12
    2d92:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d94:	8b 89       	ldd	r24, Y+19	; 0x13
    2d96:	9c 89       	ldd	r25, Y+20	; 0x14
    2d98:	01 97       	sbiw	r24, 0x01	; 1
    2d9a:	9c 8b       	std	Y+20, r25	; 0x14
    2d9c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d9e:	8b 89       	ldd	r24, Y+19	; 0x13
    2da0:	9c 89       	ldd	r25, Y+20	; 0x14
    2da2:	00 97       	sbiw	r24, 0x00	; 0
    2da4:	69 f7       	brne	.-38     	; 0x2d80 <LCD_voidWriteNLatch+0x346>
    2da6:	14 c0       	rjmp	.+40     	; 0x2dd0 <LCD_voidWriteNLatch+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2da8:	6d 89       	ldd	r22, Y+21	; 0x15
    2daa:	7e 89       	ldd	r23, Y+22	; 0x16
    2dac:	8f 89       	ldd	r24, Y+23	; 0x17
    2dae:	98 8d       	ldd	r25, Y+24	; 0x18
    2db0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2db4:	dc 01       	movw	r26, r24
    2db6:	cb 01       	movw	r24, r22
    2db8:	9c 8b       	std	Y+20, r25	; 0x14
    2dba:	8b 8b       	std	Y+19, r24	; 0x13
    2dbc:	8b 89       	ldd	r24, Y+19	; 0x13
    2dbe:	9c 89       	ldd	r25, Y+20	; 0x14
    2dc0:	98 8b       	std	Y+16, r25	; 0x10
    2dc2:	8f 87       	std	Y+15, r24	; 0x0f
    2dc4:	8f 85       	ldd	r24, Y+15	; 0x0f
    2dc6:	98 89       	ldd	r25, Y+16	; 0x10
    2dc8:	01 97       	sbiw	r24, 0x01	; 1
    2dca:	f1 f7       	brne	.-4      	; 0x2dc8 <LCD_voidWriteNLatch+0x38e>
    2dcc:	98 8b       	std	Y+16, r25	; 0x10
    2dce:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    2dd0:	81 e0       	ldi	r24, 0x01	; 1
    2dd2:	63 e0       	ldi	r22, 0x03	; 3
    2dd4:	40 e0       	ldi	r20, 0x00	; 0
    2dd6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
    2dda:	80 e0       	ldi	r24, 0x00	; 0
    2ddc:	90 e0       	ldi	r25, 0x00	; 0
    2dde:	a0 e0       	ldi	r26, 0x00	; 0
    2de0:	b0 e4       	ldi	r27, 0x40	; 64
    2de2:	8b 87       	std	Y+11, r24	; 0x0b
    2de4:	9c 87       	std	Y+12, r25	; 0x0c
    2de6:	ad 87       	std	Y+13, r26	; 0x0d
    2de8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2dea:	6b 85       	ldd	r22, Y+11	; 0x0b
    2dec:	7c 85       	ldd	r23, Y+12	; 0x0c
    2dee:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2df2:	20 e0       	ldi	r18, 0x00	; 0
    2df4:	30 e0       	ldi	r19, 0x00	; 0
    2df6:	4a e7       	ldi	r20, 0x7A	; 122
    2df8:	55 e4       	ldi	r21, 0x45	; 69
    2dfa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfe:	dc 01       	movw	r26, r24
    2e00:	cb 01       	movw	r24, r22
    2e02:	8f 83       	std	Y+7, r24	; 0x07
    2e04:	98 87       	std	Y+8, r25	; 0x08
    2e06:	a9 87       	std	Y+9, r26	; 0x09
    2e08:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e0a:	6f 81       	ldd	r22, Y+7	; 0x07
    2e0c:	78 85       	ldd	r23, Y+8	; 0x08
    2e0e:	89 85       	ldd	r24, Y+9	; 0x09
    2e10:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e12:	20 e0       	ldi	r18, 0x00	; 0
    2e14:	30 e0       	ldi	r19, 0x00	; 0
    2e16:	40 e8       	ldi	r20, 0x80	; 128
    2e18:	5f e3       	ldi	r21, 0x3F	; 63
    2e1a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e1e:	88 23       	and	r24, r24
    2e20:	2c f4       	brge	.+10     	; 0x2e2c <LCD_voidWriteNLatch+0x3f2>
		__ticks = 1;
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	9e 83       	std	Y+6, r25	; 0x06
    2e28:	8d 83       	std	Y+5, r24	; 0x05
    2e2a:	3f c0       	rjmp	.+126    	; 0x2eaa <LCD_voidWriteNLatch+0x470>
	else if (__tmp > 65535)
    2e2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2e2e:	78 85       	ldd	r23, Y+8	; 0x08
    2e30:	89 85       	ldd	r24, Y+9	; 0x09
    2e32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	3f ef       	ldi	r19, 0xFF	; 255
    2e38:	4f e7       	ldi	r20, 0x7F	; 127
    2e3a:	57 e4       	ldi	r21, 0x47	; 71
    2e3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e40:	18 16       	cp	r1, r24
    2e42:	4c f5       	brge	.+82     	; 0x2e96 <LCD_voidWriteNLatch+0x45c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e44:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e46:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e48:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e4a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e4c:	20 e0       	ldi	r18, 0x00	; 0
    2e4e:	30 e0       	ldi	r19, 0x00	; 0
    2e50:	40 e2       	ldi	r20, 0x20	; 32
    2e52:	51 e4       	ldi	r21, 0x41	; 65
    2e54:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e58:	dc 01       	movw	r26, r24
    2e5a:	cb 01       	movw	r24, r22
    2e5c:	bc 01       	movw	r22, r24
    2e5e:	cd 01       	movw	r24, r26
    2e60:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e64:	dc 01       	movw	r26, r24
    2e66:	cb 01       	movw	r24, r22
    2e68:	9e 83       	std	Y+6, r25	; 0x06
    2e6a:	8d 83       	std	Y+5, r24	; 0x05
    2e6c:	0f c0       	rjmp	.+30     	; 0x2e8c <LCD_voidWriteNLatch+0x452>
    2e6e:	80 e9       	ldi	r24, 0x90	; 144
    2e70:	91 e0       	ldi	r25, 0x01	; 1
    2e72:	9c 83       	std	Y+4, r25	; 0x04
    2e74:	8b 83       	std	Y+3, r24	; 0x03
    2e76:	8b 81       	ldd	r24, Y+3	; 0x03
    2e78:	9c 81       	ldd	r25, Y+4	; 0x04
    2e7a:	01 97       	sbiw	r24, 0x01	; 1
    2e7c:	f1 f7       	brne	.-4      	; 0x2e7a <LCD_voidWriteNLatch+0x440>
    2e7e:	9c 83       	std	Y+4, r25	; 0x04
    2e80:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e82:	8d 81       	ldd	r24, Y+5	; 0x05
    2e84:	9e 81       	ldd	r25, Y+6	; 0x06
    2e86:	01 97       	sbiw	r24, 0x01	; 1
    2e88:	9e 83       	std	Y+6, r25	; 0x06
    2e8a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8c:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8e:	9e 81       	ldd	r25, Y+6	; 0x06
    2e90:	00 97       	sbiw	r24, 0x00	; 0
    2e92:	69 f7       	brne	.-38     	; 0x2e6e <LCD_voidWriteNLatch+0x434>
    2e94:	14 c0       	rjmp	.+40     	; 0x2ebe <LCD_voidWriteNLatch+0x484>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e96:	6f 81       	ldd	r22, Y+7	; 0x07
    2e98:	78 85       	ldd	r23, Y+8	; 0x08
    2e9a:	89 85       	ldd	r24, Y+9	; 0x09
    2e9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea2:	dc 01       	movw	r26, r24
    2ea4:	cb 01       	movw	r24, r22
    2ea6:	9e 83       	std	Y+6, r25	; 0x06
    2ea8:	8d 83       	std	Y+5, r24	; 0x05
    2eaa:	8d 81       	ldd	r24, Y+5	; 0x05
    2eac:	9e 81       	ldd	r25, Y+6	; 0x06
    2eae:	9a 83       	std	Y+2, r25	; 0x02
    2eb0:	89 83       	std	Y+1, r24	; 0x01
    2eb2:	89 81       	ldd	r24, Y+1	; 0x01
    2eb4:	9a 81       	ldd	r25, Y+2	; 0x02
    2eb6:	01 97       	sbiw	r24, 0x01	; 1
    2eb8:	f1 f7       	brne	.-4      	; 0x2eb6 <LCD_voidWriteNLatch+0x47c>
    2eba:	9a 83       	std	Y+2, r25	; 0x02
    2ebc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);

	#endif

					return;
}
    2ebe:	e9 96       	adiw	r28, 0x39	; 57
    2ec0:	0f b6       	in	r0, 0x3f	; 63
    2ec2:	f8 94       	cli
    2ec4:	de bf       	out	0x3e, r29	; 62
    2ec6:	0f be       	out	0x3f, r0	; 63
    2ec8:	cd bf       	out	0x3d, r28	; 61
    2eca:	cf 91       	pop	r28
    2ecc:	df 91       	pop	r29
    2ece:	08 95       	ret

00002ed0 <LCD_voidInit>:
void LCD_voidInit(void){
    2ed0:	df 93       	push	r29
    2ed2:	cf 93       	push	r28
    2ed4:	cd b7       	in	r28, 0x3d	; 61
    2ed6:	de b7       	in	r29, 0x3e	; 62
    2ed8:	6c 97       	sbiw	r28, 0x1c	; 28
    2eda:	0f b6       	in	r0, 0x3f	; 63
    2edc:	f8 94       	cli
    2ede:	de bf       	out	0x3e, r29	; 62
    2ee0:	0f be       	out	0x3f, r0	; 63
    2ee2:	cd bf       	out	0x3d, r28	; 61

	DIO_voidSetPinDirection(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OUTPUT);
    2ee4:	81 e0       	ldi	r24, 0x01	; 1
    2ee6:	61 e0       	ldi	r22, 0x01	; 1
    2ee8:	41 e0       	ldi	r20, 0x01	; 1
    2eea:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8RW_GROUP,LCD_u8RW_PIN,DIO_u8OUTPUT);
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	62 e0       	ldi	r22, 0x02	; 2
    2ef2:	41 e0       	ldi	r20, 0x01	; 1
    2ef4:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8OUTPUT);
    2ef8:	81 e0       	ldi	r24, 0x01	; 1
    2efa:	63 e0       	ldi	r22, 0x03	; 3
    2efc:	41 e0       	ldi	r20, 0x01	; 1
    2efe:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(LCD_u8D7_GROUP,LCD_u8D7_PIN,DIO_u8OUTPUT);
    2f02:	80 e0       	ldi	r24, 0x00	; 0
    2f04:	67 e0       	ldi	r22, 0x07	; 7
    2f06:	41 e0       	ldi	r20, 0x01	; 1
    2f08:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D6_GROUP,LCD_u8D6_PIN,DIO_u8OUTPUT);
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	66 e0       	ldi	r22, 0x06	; 6
    2f10:	41 e0       	ldi	r20, 0x01	; 1
    2f12:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D5_GROUP,LCD_u8D5_PIN,DIO_u8OUTPUT);
    2f16:	80 e0       	ldi	r24, 0x00	; 0
    2f18:	65 e0       	ldi	r22, 0x05	; 5
    2f1a:	41 e0       	ldi	r20, 0x01	; 1
    2f1c:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D4_GROUP,LCD_u8D4_PIN,DIO_u8OUTPUT);
    2f20:	80 e0       	ldi	r24, 0x00	; 0
    2f22:	64 e0       	ldi	r22, 0x04	; 4
    2f24:	41 e0       	ldi	r20, 0x01	; 1
    2f26:	0e 94 97 0d 	call	0x1b2e	; 0x1b2e <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_u8D0_GROUP,LCD_u8D0_PIN,DIO_u8OUTPUT);

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8OW);
	LCD_voidWriteNLatch(0x38);
#elif LCD_MODE==FOUR_BIT
	DIO_voidSetPinValue(LCD_u8D7_GROUP,LCD_u8D7_PIN,0);
    2f2a:	80 e0       	ldi	r24, 0x00	; 0
    2f2c:	67 e0       	ldi	r22, 0x07	; 7
    2f2e:	40 e0       	ldi	r20, 0x00	; 0
    2f30:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D6_GROUP,LCD_u8D6_PIN,0);
    2f34:	80 e0       	ldi	r24, 0x00	; 0
    2f36:	66 e0       	ldi	r22, 0x06	; 6
    2f38:	40 e0       	ldi	r20, 0x00	; 0
    2f3a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D5_GROUP,LCD_u8D5_PIN,1);
    2f3e:	80 e0       	ldi	r24, 0x00	; 0
    2f40:	65 e0       	ldi	r22, 0x05	; 5
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8D4_GROUP,LCD_u8D4_PIN,0);
    2f48:	80 e0       	ldi	r24, 0x00	; 0
    2f4a:	64 e0       	ldi	r22, 0x04	; 4
    2f4c:	40 e0       	ldi	r20, 0x00	; 0
    2f4e:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8HIGH);
    2f52:	81 e0       	ldi	r24, 0x01	; 1
    2f54:	63 e0       	ldi	r22, 0x03	; 3
    2f56:	41 e0       	ldi	r20, 0x01	; 1
    2f58:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
    2f5c:	80 e0       	ldi	r24, 0x00	; 0
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	a0 e8       	ldi	r26, 0x80	; 128
    2f62:	bf e3       	ldi	r27, 0x3F	; 63
    2f64:	89 8f       	std	Y+25, r24	; 0x19
    2f66:	9a 8f       	std	Y+26, r25	; 0x1a
    2f68:	ab 8f       	std	Y+27, r26	; 0x1b
    2f6a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f6c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f6e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f70:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f72:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f74:	20 e0       	ldi	r18, 0x00	; 0
    2f76:	30 e0       	ldi	r19, 0x00	; 0
    2f78:	4a e7       	ldi	r20, 0x7A	; 122
    2f7a:	55 e4       	ldi	r21, 0x45	; 69
    2f7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f80:	dc 01       	movw	r26, r24
    2f82:	cb 01       	movw	r24, r22
    2f84:	8d 8b       	std	Y+21, r24	; 0x15
    2f86:	9e 8b       	std	Y+22, r25	; 0x16
    2f88:	af 8b       	std	Y+23, r26	; 0x17
    2f8a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f8c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f8e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f90:	8f 89       	ldd	r24, Y+23	; 0x17
    2f92:	98 8d       	ldd	r25, Y+24	; 0x18
    2f94:	20 e0       	ldi	r18, 0x00	; 0
    2f96:	30 e0       	ldi	r19, 0x00	; 0
    2f98:	40 e8       	ldi	r20, 0x80	; 128
    2f9a:	5f e3       	ldi	r21, 0x3F	; 63
    2f9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2fa0:	88 23       	and	r24, r24
    2fa2:	2c f4       	brge	.+10     	; 0x2fae <LCD_voidInit+0xde>
		__ticks = 1;
    2fa4:	81 e0       	ldi	r24, 0x01	; 1
    2fa6:	90 e0       	ldi	r25, 0x00	; 0
    2fa8:	9c 8b       	std	Y+20, r25	; 0x14
    2faa:	8b 8b       	std	Y+19, r24	; 0x13
    2fac:	3f c0       	rjmp	.+126    	; 0x302c <LCD_voidInit+0x15c>
	else if (__tmp > 65535)
    2fae:	6d 89       	ldd	r22, Y+21	; 0x15
    2fb0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fb2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fb4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fb6:	20 e0       	ldi	r18, 0x00	; 0
    2fb8:	3f ef       	ldi	r19, 0xFF	; 255
    2fba:	4f e7       	ldi	r20, 0x7F	; 127
    2fbc:	57 e4       	ldi	r21, 0x47	; 71
    2fbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2fc2:	18 16       	cp	r1, r24
    2fc4:	4c f5       	brge	.+82     	; 0x3018 <LCD_voidInit+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2fc6:	69 8d       	ldd	r22, Y+25	; 0x19
    2fc8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fcc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fce:	20 e0       	ldi	r18, 0x00	; 0
    2fd0:	30 e0       	ldi	r19, 0x00	; 0
    2fd2:	40 e2       	ldi	r20, 0x20	; 32
    2fd4:	51 e4       	ldi	r21, 0x41	; 65
    2fd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fda:	dc 01       	movw	r26, r24
    2fdc:	cb 01       	movw	r24, r22
    2fde:	bc 01       	movw	r22, r24
    2fe0:	cd 01       	movw	r24, r26
    2fe2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fe6:	dc 01       	movw	r26, r24
    2fe8:	cb 01       	movw	r24, r22
    2fea:	9c 8b       	std	Y+20, r25	; 0x14
    2fec:	8b 8b       	std	Y+19, r24	; 0x13
    2fee:	0f c0       	rjmp	.+30     	; 0x300e <LCD_voidInit+0x13e>
    2ff0:	80 e9       	ldi	r24, 0x90	; 144
    2ff2:	91 e0       	ldi	r25, 0x01	; 1
    2ff4:	9a 8b       	std	Y+18, r25	; 0x12
    2ff6:	89 8b       	std	Y+17, r24	; 0x11
    2ff8:	89 89       	ldd	r24, Y+17	; 0x11
    2ffa:	9a 89       	ldd	r25, Y+18	; 0x12
    2ffc:	01 97       	sbiw	r24, 0x01	; 1
    2ffe:	f1 f7       	brne	.-4      	; 0x2ffc <LCD_voidInit+0x12c>
    3000:	9a 8b       	std	Y+18, r25	; 0x12
    3002:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3004:	8b 89       	ldd	r24, Y+19	; 0x13
    3006:	9c 89       	ldd	r25, Y+20	; 0x14
    3008:	01 97       	sbiw	r24, 0x01	; 1
    300a:	9c 8b       	std	Y+20, r25	; 0x14
    300c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    300e:	8b 89       	ldd	r24, Y+19	; 0x13
    3010:	9c 89       	ldd	r25, Y+20	; 0x14
    3012:	00 97       	sbiw	r24, 0x00	; 0
    3014:	69 f7       	brne	.-38     	; 0x2ff0 <LCD_voidInit+0x120>
    3016:	14 c0       	rjmp	.+40     	; 0x3040 <LCD_voidInit+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3018:	6d 89       	ldd	r22, Y+21	; 0x15
    301a:	7e 89       	ldd	r23, Y+22	; 0x16
    301c:	8f 89       	ldd	r24, Y+23	; 0x17
    301e:	98 8d       	ldd	r25, Y+24	; 0x18
    3020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3024:	dc 01       	movw	r26, r24
    3026:	cb 01       	movw	r24, r22
    3028:	9c 8b       	std	Y+20, r25	; 0x14
    302a:	8b 8b       	std	Y+19, r24	; 0x13
    302c:	8b 89       	ldd	r24, Y+19	; 0x13
    302e:	9c 89       	ldd	r25, Y+20	; 0x14
    3030:	98 8b       	std	Y+16, r25	; 0x10
    3032:	8f 87       	std	Y+15, r24	; 0x0f
    3034:	8f 85       	ldd	r24, Y+15	; 0x0f
    3036:	98 89       	ldd	r25, Y+16	; 0x10
    3038:	01 97       	sbiw	r24, 0x01	; 1
    303a:	f1 f7       	brne	.-4      	; 0x3038 <LCD_voidInit+0x168>
    303c:	98 8b       	std	Y+16, r25	; 0x10
    303e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	DIO_voidSetPinValue(LCD_u8EN_GROUP,LCD_u8EN_PIN,DIO_u8LOW);
    3040:	81 e0       	ldi	r24, 0x01	; 1
    3042:	63 e0       	ldi	r22, 0x03	; 3
    3044:	40 e0       	ldi	r20, 0x00	; 0
    3046:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a0 e0       	ldi	r26, 0x00	; 0
    3050:	b0 e4       	ldi	r27, 0x40	; 64
    3052:	8b 87       	std	Y+11, r24	; 0x0b
    3054:	9c 87       	std	Y+12, r25	; 0x0c
    3056:	ad 87       	std	Y+13, r26	; 0x0d
    3058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    305a:	6b 85       	ldd	r22, Y+11	; 0x0b
    305c:	7c 85       	ldd	r23, Y+12	; 0x0c
    305e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3060:	9e 85       	ldd	r25, Y+14	; 0x0e
    3062:	20 e0       	ldi	r18, 0x00	; 0
    3064:	30 e0       	ldi	r19, 0x00	; 0
    3066:	4a e7       	ldi	r20, 0x7A	; 122
    3068:	55 e4       	ldi	r21, 0x45	; 69
    306a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    306e:	dc 01       	movw	r26, r24
    3070:	cb 01       	movw	r24, r22
    3072:	8f 83       	std	Y+7, r24	; 0x07
    3074:	98 87       	std	Y+8, r25	; 0x08
    3076:	a9 87       	std	Y+9, r26	; 0x09
    3078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    307a:	6f 81       	ldd	r22, Y+7	; 0x07
    307c:	78 85       	ldd	r23, Y+8	; 0x08
    307e:	89 85       	ldd	r24, Y+9	; 0x09
    3080:	9a 85       	ldd	r25, Y+10	; 0x0a
    3082:	20 e0       	ldi	r18, 0x00	; 0
    3084:	30 e0       	ldi	r19, 0x00	; 0
    3086:	40 e8       	ldi	r20, 0x80	; 128
    3088:	5f e3       	ldi	r21, 0x3F	; 63
    308a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    308e:	88 23       	and	r24, r24
    3090:	2c f4       	brge	.+10     	; 0x309c <LCD_voidInit+0x1cc>
		__ticks = 1;
    3092:	81 e0       	ldi	r24, 0x01	; 1
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	9e 83       	std	Y+6, r25	; 0x06
    3098:	8d 83       	std	Y+5, r24	; 0x05
    309a:	3f c0       	rjmp	.+126    	; 0x311a <LCD_voidInit+0x24a>
	else if (__tmp > 65535)
    309c:	6f 81       	ldd	r22, Y+7	; 0x07
    309e:	78 85       	ldd	r23, Y+8	; 0x08
    30a0:	89 85       	ldd	r24, Y+9	; 0x09
    30a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    30a4:	20 e0       	ldi	r18, 0x00	; 0
    30a6:	3f ef       	ldi	r19, 0xFF	; 255
    30a8:	4f e7       	ldi	r20, 0x7F	; 127
    30aa:	57 e4       	ldi	r21, 0x47	; 71
    30ac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    30b0:	18 16       	cp	r1, r24
    30b2:	4c f5       	brge	.+82     	; 0x3106 <LCD_voidInit+0x236>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    30b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    30bc:	20 e0       	ldi	r18, 0x00	; 0
    30be:	30 e0       	ldi	r19, 0x00	; 0
    30c0:	40 e2       	ldi	r20, 0x20	; 32
    30c2:	51 e4       	ldi	r21, 0x41	; 65
    30c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30c8:	dc 01       	movw	r26, r24
    30ca:	cb 01       	movw	r24, r22
    30cc:	bc 01       	movw	r22, r24
    30ce:	cd 01       	movw	r24, r26
    30d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30d4:	dc 01       	movw	r26, r24
    30d6:	cb 01       	movw	r24, r22
    30d8:	9e 83       	std	Y+6, r25	; 0x06
    30da:	8d 83       	std	Y+5, r24	; 0x05
    30dc:	0f c0       	rjmp	.+30     	; 0x30fc <LCD_voidInit+0x22c>
    30de:	80 e9       	ldi	r24, 0x90	; 144
    30e0:	91 e0       	ldi	r25, 0x01	; 1
    30e2:	9c 83       	std	Y+4, r25	; 0x04
    30e4:	8b 83       	std	Y+3, r24	; 0x03
    30e6:	8b 81       	ldd	r24, Y+3	; 0x03
    30e8:	9c 81       	ldd	r25, Y+4	; 0x04
    30ea:	01 97       	sbiw	r24, 0x01	; 1
    30ec:	f1 f7       	brne	.-4      	; 0x30ea <LCD_voidInit+0x21a>
    30ee:	9c 83       	std	Y+4, r25	; 0x04
    30f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30f2:	8d 81       	ldd	r24, Y+5	; 0x05
    30f4:	9e 81       	ldd	r25, Y+6	; 0x06
    30f6:	01 97       	sbiw	r24, 0x01	; 1
    30f8:	9e 83       	std	Y+6, r25	; 0x06
    30fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30fc:	8d 81       	ldd	r24, Y+5	; 0x05
    30fe:	9e 81       	ldd	r25, Y+6	; 0x06
    3100:	00 97       	sbiw	r24, 0x00	; 0
    3102:	69 f7       	brne	.-38     	; 0x30de <LCD_voidInit+0x20e>
    3104:	14 c0       	rjmp	.+40     	; 0x312e <LCD_voidInit+0x25e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3112:	dc 01       	movw	r26, r24
    3114:	cb 01       	movw	r24, r22
    3116:	9e 83       	std	Y+6, r25	; 0x06
    3118:	8d 83       	std	Y+5, r24	; 0x05
    311a:	8d 81       	ldd	r24, Y+5	; 0x05
    311c:	9e 81       	ldd	r25, Y+6	; 0x06
    311e:	9a 83       	std	Y+2, r25	; 0x02
    3120:	89 83       	std	Y+1, r24	; 0x01
    3122:	89 81       	ldd	r24, Y+1	; 0x01
    3124:	9a 81       	ldd	r25, Y+2	; 0x02
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <LCD_voidInit+0x256>
    312a:	9a 83       	std	Y+2, r25	; 0x02
    312c:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2);
		DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	61 e0       	ldi	r22, 0x01	; 1
    3132:	40 e0       	ldi	r20, 0x00	; 0
    3134:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>

	      LCD_voidWriteNLatch(0x28);
    3138:	88 e2       	ldi	r24, 0x28	; 40
    313a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>

#endif
	      //desplay on off

	     	      DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    313e:	81 e0       	ldi	r24, 0x01	; 1
    3140:	61 e0       	ldi	r22, 0x01	; 1
    3142:	40 e0       	ldi	r20, 0x00	; 0
    3144:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	     	      LCD_voidWriteNLatch(0X0F);
    3148:	8f e0       	ldi	r24, 0x0F	; 15
    314a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>
	     	      //desplay clear
	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    314e:	81 e0       	ldi	r24, 0x01	; 1
    3150:	61 e0       	ldi	r22, 0x01	; 1
    3152:	40 e0       	ldi	r20, 0x00	; 0
    3154:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	     	    	     	      LCD_voidWriteNLatch(0X01);
    3158:	81 e0       	ldi	r24, 0x01	; 1
    315a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>
	     	    	     	      //set mode (increasing or decreasing)and the cursor
	     	    	     	     DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    315e:	81 e0       	ldi	r24, 0x01	; 1
    3160:	61 e0       	ldi	r22, 0x01	; 1
    3162:	40 e0       	ldi	r20, 0x00	; 0
    3164:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	     	    	     	    	      LCD_voidWriteNLatch(0X06);
    3168:	86 e0       	ldi	r24, 0x06	; 6
    316a:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>
	      return;
}
    316e:	6c 96       	adiw	r28, 0x1c	; 28
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	cf 91       	pop	r28
    317c:	df 91       	pop	r29
    317e:	08 95       	ret

00003180 <LCD_voidWriteData>:
void LCD_voidWriteData(u8 Copy_u8Data){
    3180:	df 93       	push	r29
    3182:	cf 93       	push	r28
    3184:	0f 92       	push	r0
    3186:	cd b7       	in	r28, 0x3d	; 61
    3188:	de b7       	in	r29, 0x3e	; 62
    318a:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    318c:	81 e0       	ldi	r24, 0x01	; 1
    318e:	61 e0       	ldi	r22, 0x01	; 1
    3190:	41 e0       	ldi	r20, 0x01	; 1
    3192:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(Copy_u8Data);
    3196:	89 81       	ldd	r24, Y+1	; 0x01
    3198:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>
	return;
}
    319c:	0f 90       	pop	r0
    319e:	cf 91       	pop	r28
    31a0:	df 91       	pop	r29
    31a2:	08 95       	ret

000031a4 <LCD_voidWriteCommand>:
void LCD_voidWriteCommand(u8 Copy_u8Command){
    31a4:	df 93       	push	r29
    31a6:	cf 93       	push	r28
    31a8:	0f 92       	push	r0
    31aa:	cd b7       	in	r28, 0x3d	; 61
    31ac:	de b7       	in	r29, 0x3e	; 62
    31ae:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    31b0:	81 e0       	ldi	r24, 0x01	; 1
    31b2:	61 e0       	ldi	r22, 0x01	; 1
    31b4:	40 e0       	ldi	r20, 0x00	; 0
    31b6:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
			      LCD_voidWriteNLatch(Copy_u8Command);
    31ba:	89 81       	ldd	r24, Y+1	; 0x01
    31bc:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>
			      return;
}
    31c0:	0f 90       	pop	r0
    31c2:	cf 91       	pop	r28
    31c4:	df 91       	pop	r29
    31c6:	08 95       	ret

000031c8 <LCD_voidWriteString>:

void LCD_voidWriteString(const char*Copy_String){
    31c8:	df 93       	push	r29
    31ca:	cf 93       	push	r28
    31cc:	00 d0       	rcall	.+0      	; 0x31ce <LCD_voidWriteString+0x6>
    31ce:	cd b7       	in	r28, 0x3d	; 61
    31d0:	de b7       	in	r29, 0x3e	; 62
    31d2:	9a 83       	std	Y+2, r25	; 0x02
    31d4:	89 83       	std	Y+1, r24	; 0x01
    31d6:	10 c0       	rjmp	.+32     	; 0x31f8 <LCD_voidWriteString+0x30>

	while(*Copy_String!=0){
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
    31d8:	81 e0       	ldi	r24, 0x01	; 1
    31da:	61 e0       	ldi	r22, 0x01	; 1
    31dc:	41 e0       	ldi	r20, 0x01	; 1
    31de:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
			LCD_voidWriteNLatch(*Copy_String++);
    31e2:	e9 81       	ldd	r30, Y+1	; 0x01
    31e4:	fa 81       	ldd	r31, Y+2	; 0x02
    31e6:	20 81       	ld	r18, Z
    31e8:	89 81       	ldd	r24, Y+1	; 0x01
    31ea:	9a 81       	ldd	r25, Y+2	; 0x02
    31ec:	01 96       	adiw	r24, 0x01	; 1
    31ee:	9a 83       	std	Y+2, r25	; 0x02
    31f0:	89 83       	std	Y+1, r24	; 0x01
    31f2:	82 2f       	mov	r24, r18
    31f4:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>
			      return;
}

void LCD_voidWriteString(const char*Copy_String){

	while(*Copy_String!=0){
    31f8:	e9 81       	ldd	r30, Y+1	; 0x01
    31fa:	fa 81       	ldd	r31, Y+2	; 0x02
    31fc:	80 81       	ld	r24, Z
    31fe:	88 23       	and	r24, r24
    3200:	59 f7       	brne	.-42     	; 0x31d8 <LCD_voidWriteString+0x10>
			DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8HIGH);
			LCD_voidWriteNLatch(*Copy_String++);
		}
	return;
}
    3202:	0f 90       	pop	r0
    3204:	0f 90       	pop	r0
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <LCD_voidClearScreen>:
void LCD_voidClearScreen(void){
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	cd b7       	in	r28, 0x3d	; 61
    3212:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinValue(LCD_u8RS_GROUP,LCD_u8RS_PIN,DIO_u8LOW);
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	61 e0       	ldi	r22, 0x01	; 1
    3218:	40 e0       	ldi	r20, 0x00	; 0
    321a:	0e 94 7b 0e 	call	0x1cf6	; 0x1cf6 <DIO_voidSetPinValue>
	LCD_voidWriteNLatch(0x01);
    321e:	81 e0       	ldi	r24, 0x01	; 1
    3220:	0e 94 1d 15 	call	0x2a3a	; 0x2a3a <LCD_voidWriteNLatch>
	LCD_voidWriteCommand(0x80);           //GO TO POSITION ZER0
    3224:	80 e8       	ldi	r24, 0x80	; 128
    3226:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidWriteCommand>
	return;
}
    322a:	cf 91       	pop	r28
    322c:	df 91       	pop	r29
    322e:	08 95       	ret

00003230 <LCD_voidShiftDisplayRight>:
void LCD_voidShiftDisplayRight(void){
    3230:	df 93       	push	r29
    3232:	cf 93       	push	r28
    3234:	cd b7       	in	r28, 0x3d	; 61
    3236:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x18);
    3238:	88 e1       	ldi	r24, 0x18	; 24
    323a:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidWriteCommand>
	return ;
}
    323e:	cf 91       	pop	r28
    3240:	df 91       	pop	r29
    3242:	08 95       	ret

00003244 <LCD_voidDisplayLeft>:
void LCD_voidDisplayLeft(void){
    3244:	df 93       	push	r29
    3246:	cf 93       	push	r28
    3248:	cd b7       	in	r28, 0x3d	; 61
    324a:	de b7       	in	r29, 0x3e	; 62

	LCD_voidWriteCommand(0x1c);
    324c:	8c e1       	ldi	r24, 0x1C	; 28
    324e:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidWriteCommand>
	return ;
}
    3252:	cf 91       	pop	r28
    3254:	df 91       	pop	r29
    3256:	08 95       	ret

00003258 <LCD_voidSetCgram>:
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){
    3258:	df 93       	push	r29
    325a:	cf 93       	push	r28
    325c:	00 d0       	rcall	.+0      	; 0x325e <LCD_voidSetCgram+0x6>
    325e:	00 d0       	rcall	.+0      	; 0x3260 <LCD_voidSetCgram+0x8>
    3260:	0f 92       	push	r0
    3262:	cd b7       	in	r28, 0x3d	; 61
    3264:	de b7       	in	r29, 0x3e	; 62
    3266:	9b 83       	std	Y+3, r25	; 0x03
    3268:	8a 83       	std	Y+2, r24	; 0x02
    326a:	6c 83       	std	Y+4, r22	; 0x04
    326c:	4d 83       	std	Y+5, r20	; 0x05

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
    326e:	8c 81       	ldd	r24, Y+4	; 0x04
    3270:	88 2f       	mov	r24, r24
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	08 96       	adiw	r24, 0x08	; 8
    3276:	88 0f       	add	r24, r24
    3278:	99 1f       	adc	r25, r25
    327a:	88 0f       	add	r24, r24
    327c:	99 1f       	adc	r25, r25
    327e:	88 0f       	add	r24, r24
    3280:	99 1f       	adc	r25, r25
    3282:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidWriteCommand>
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    3286:	19 82       	std	Y+1, r1	; 0x01
    3288:	0e c0       	rjmp	.+28     	; 0x32a6 <LCD_voidSetCgram+0x4e>
			LCD_voidWriteData(Copy_u8Array[i]);
    328a:	89 81       	ldd	r24, Y+1	; 0x01
    328c:	28 2f       	mov	r18, r24
    328e:	30 e0       	ldi	r19, 0x00	; 0
    3290:	8a 81       	ldd	r24, Y+2	; 0x02
    3292:	9b 81       	ldd	r25, Y+3	; 0x03
    3294:	fc 01       	movw	r30, r24
    3296:	e2 0f       	add	r30, r18
    3298:	f3 1f       	adc	r31, r19
    329a:	80 81       	ld	r24, Z
    329c:	0e 94 c0 18 	call	0x3180	; 0x3180 <LCD_voidWriteData>
}
void LCD_voidSetCgram(u8 * Copy_u8Array,u8 Copy_u8Position,u8 Copy_u8Num_Char){

	LCD_voidWriteCommand(0x40+8*Copy_u8Position);
		u8 i;
		for(i=0;i<8*Copy_u8Num_Char;i++){
    32a0:	89 81       	ldd	r24, Y+1	; 0x01
    32a2:	8f 5f       	subi	r24, 0xFF	; 255
    32a4:	89 83       	std	Y+1, r24	; 0x01
    32a6:	89 81       	ldd	r24, Y+1	; 0x01
    32a8:	28 2f       	mov	r18, r24
    32aa:	30 e0       	ldi	r19, 0x00	; 0
    32ac:	8d 81       	ldd	r24, Y+5	; 0x05
    32ae:	88 2f       	mov	r24, r24
    32b0:	90 e0       	ldi	r25, 0x00	; 0
    32b2:	88 0f       	add	r24, r24
    32b4:	99 1f       	adc	r25, r25
    32b6:	88 0f       	add	r24, r24
    32b8:	99 1f       	adc	r25, r25
    32ba:	88 0f       	add	r24, r24
    32bc:	99 1f       	adc	r25, r25
    32be:	28 17       	cp	r18, r24
    32c0:	39 07       	cpc	r19, r25
    32c2:	1c f3       	brlt	.-58     	; 0x328a <LCD_voidSetCgram+0x32>
			LCD_voidWriteData(Copy_u8Array[i]);

		}
		return;
}
    32c4:	0f 90       	pop	r0
    32c6:	0f 90       	pop	r0
    32c8:	0f 90       	pop	r0
    32ca:	0f 90       	pop	r0
    32cc:	0f 90       	pop	r0
    32ce:	cf 91       	pop	r28
    32d0:	df 91       	pop	r29
    32d2:	08 95       	ret

000032d4 <LCD_voidSetDdram>:
void LCD_voidSetDdram(u8 Copy_u8Position){
    32d4:	df 93       	push	r29
    32d6:	cf 93       	push	r28
    32d8:	0f 92       	push	r0
    32da:	cd b7       	in	r28, 0x3d	; 61
    32dc:	de b7       	in	r29, 0x3e	; 62
    32de:	89 83       	std	Y+1, r24	; 0x01

		LCD_voidWriteCommand(0X80+(8*Copy_u8Position));
    32e0:	89 81       	ldd	r24, Y+1	; 0x01
    32e2:	88 2f       	mov	r24, r24
    32e4:	90 e0       	ldi	r25, 0x00	; 0
    32e6:	40 96       	adiw	r24, 0x10	; 16
    32e8:	88 0f       	add	r24, r24
    32ea:	99 1f       	adc	r25, r25
    32ec:	88 0f       	add	r24, r24
    32ee:	99 1f       	adc	r25, r25
    32f0:	88 0f       	add	r24, r24
    32f2:	99 1f       	adc	r25, r25
    32f4:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidWriteCommand>
		return;
}
    32f8:	0f 90       	pop	r0
    32fa:	cf 91       	pop	r28
    32fc:	df 91       	pop	r29
    32fe:	08 95       	ret

00003300 <LCD_voidWriteCharacter>:
void LCD_voidWriteCharacter(u8 Copy_u8Char){
    3300:	df 93       	push	r29
    3302:	cf 93       	push	r28
    3304:	0f 92       	push	r0
    3306:	cd b7       	in	r28, 0x3d	; 61
    3308:	de b7       	in	r29, 0x3e	; 62
    330a:	89 83       	std	Y+1, r24	; 0x01

	LCD_voidWriteData(Copy_u8Char);
    330c:	89 81       	ldd	r24, Y+1	; 0x01
    330e:	0e 94 c0 18 	call	0x3180	; 0x3180 <LCD_voidWriteData>
	return;
}
    3312:	0f 90       	pop	r0
    3314:	cf 91       	pop	r28
    3316:	df 91       	pop	r29
    3318:	08 95       	ret

0000331a <LCD_voidWritInteger>:
void LCD_voidWritInteger(u16 Copy_intNumber){
    331a:	df 93       	push	r29
    331c:	cf 93       	push	r28
    331e:	cd b7       	in	r28, 0x3d	; 61
    3320:	de b7       	in	r29, 0x3e	; 62
    3322:	2f 97       	sbiw	r28, 0x0f	; 15
    3324:	0f b6       	in	r0, 0x3f	; 63
    3326:	f8 94       	cli
    3328:	de bf       	out	0x3e, r29	; 62
    332a:	0f be       	out	0x3f, r0	; 63
    332c:	cd bf       	out	0x3d, r28	; 61
    332e:	99 87       	std	Y+9, r25	; 0x09
    3330:	88 87       	std	Y+8, r24	; 0x08
}
for(u8 i=0;i<local_u8Length;i++){
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    3332:	2d b7       	in	r18, 0x3d	; 61
    3334:	3e b7       	in	r19, 0x3e	; 62
    3336:	3f 87       	std	Y+15, r19	; 0x0f
    3338:	2e 87       	std	Y+14, r18	; 0x0e
void LCD_voidWriteCharacter(u8 Copy_u8Char){

	LCD_voidWriteData(Copy_u8Char);
	return;
}
void LCD_voidWritInteger(u16 Copy_intNumber){
    333a:	8d b7       	in	r24, 0x3d	; 61
    333c:	9e b7       	in	r25, 0x3e	; 62
    333e:	9b 87       	std	Y+11, r25	; 0x0b
    3340:	8a 87       	std	Y+10, r24	; 0x0a

int local_intTempNum=Copy_intNumber;
    3342:	88 85       	ldd	r24, Y+8	; 0x08
    3344:	99 85       	ldd	r25, Y+9	; 0x09
    3346:	9d 83       	std	Y+5, r25	; 0x05
    3348:	8c 83       	std	Y+4, r24	; 0x04
u8 local_u8Length=0;
    334a:	1b 82       	std	Y+3, r1	; 0x03
if(Copy_intNumber==0){
    334c:	88 85       	ldd	r24, Y+8	; 0x08
    334e:	99 85       	ldd	r25, Y+9	; 0x09
    3350:	00 97       	sbiw	r24, 0x00	; 0
    3352:	89 f4       	brne	.+34     	; 0x3376 <LCD_voidWritInteger+0x5c>
	LCD_voidWriteCharacter('0');
    3354:	80 e3       	ldi	r24, 0x30	; 48
    3356:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_voidWriteCharacter>
    335a:	69 c0       	rjmp	.+210    	; 0x342e <LCD_voidWritInteger+0x114>
	return;
}
while(local_intTempNum!=0){
	local_intTempNum/=10;
    335c:	8c 81       	ldd	r24, Y+4	; 0x04
    335e:	9d 81       	ldd	r25, Y+5	; 0x05
    3360:	2a e0       	ldi	r18, 0x0A	; 10
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	b9 01       	movw	r22, r18
    3366:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__divmodhi4>
    336a:	cb 01       	movw	r24, r22
    336c:	9d 83       	std	Y+5, r25	; 0x05
    336e:	8c 83       	std	Y+4, r24	; 0x04
	local_u8Length++;
    3370:	8b 81       	ldd	r24, Y+3	; 0x03
    3372:	8f 5f       	subi	r24, 0xFF	; 255
    3374:	8b 83       	std	Y+3, r24	; 0x03
u8 local_u8Length=0;
if(Copy_intNumber==0){
	LCD_voidWriteCharacter('0');
	return;
}
while(local_intTempNum!=0){
    3376:	8c 81       	ldd	r24, Y+4	; 0x04
    3378:	9d 81       	ldd	r25, Y+5	; 0x05
    337a:	00 97       	sbiw	r24, 0x00	; 0
    337c:	79 f7       	brne	.-34     	; 0x335c <LCD_voidWritInteger+0x42>
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
    337e:	8b 81       	ldd	r24, Y+3	; 0x03
    3380:	88 2f       	mov	r24, r24
    3382:	90 e0       	ldi	r25, 0x00	; 0
    3384:	2d b7       	in	r18, 0x3d	; 61
    3386:	3e b7       	in	r19, 0x3e	; 62
    3388:	28 1b       	sub	r18, r24
    338a:	39 0b       	sbc	r19, r25
    338c:	0f b6       	in	r0, 0x3f	; 63
    338e:	f8 94       	cli
    3390:	3e bf       	out	0x3e, r19	; 62
    3392:	0f be       	out	0x3f, r0	; 63
    3394:	2d bf       	out	0x3d, r18	; 61
    3396:	8d b7       	in	r24, 0x3d	; 61
    3398:	9e b7       	in	r25, 0x3e	; 62
    339a:	01 96       	adiw	r24, 0x01	; 1
    339c:	9d 87       	std	Y+13, r25	; 0x0d
    339e:	8c 87       	std	Y+12, r24	; 0x0c
    33a0:	8c 85       	ldd	r24, Y+12	; 0x0c
    33a2:	9d 85       	ldd	r25, Y+13	; 0x0d
    33a4:	00 96       	adiw	r24, 0x00	; 0
    33a6:	9d 87       	std	Y+13, r25	; 0x0d
    33a8:	8c 87       	std	Y+12, r24	; 0x0c
    33aa:	2c 85       	ldd	r18, Y+12	; 0x0c
    33ac:	3d 85       	ldd	r19, Y+13	; 0x0d
    33ae:	3f 83       	std	Y+7, r19	; 0x07
    33b0:	2e 83       	std	Y+6, r18	; 0x06
local_intTempNum=Copy_intNumber;
    33b2:	88 85       	ldd	r24, Y+8	; 0x08
    33b4:	99 85       	ldd	r25, Y+9	; 0x09
    33b6:	9d 83       	std	Y+5, r25	; 0x05
    33b8:	8c 83       	std	Y+4, r24	; 0x04
for(u8 i=local_u8Length;i>0;i--){
    33ba:	8b 81       	ldd	r24, Y+3	; 0x03
    33bc:	8a 83       	std	Y+2, r24	; 0x02
    33be:	20 c0       	rjmp	.+64     	; 0x3400 <LCD_voidWritInteger+0xe6>
	array[i-1]=local_intTempNum%10+'0';
    33c0:	8a 81       	ldd	r24, Y+2	; 0x02
    33c2:	88 2f       	mov	r24, r24
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	fc 01       	movw	r30, r24
    33c8:	31 97       	sbiw	r30, 0x01	; 1
    33ca:	8c 81       	ldd	r24, Y+4	; 0x04
    33cc:	9d 81       	ldd	r25, Y+5	; 0x05
    33ce:	2a e0       	ldi	r18, 0x0A	; 10
    33d0:	30 e0       	ldi	r19, 0x00	; 0
    33d2:	b9 01       	movw	r22, r18
    33d4:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__divmodhi4>
    33d8:	28 2f       	mov	r18, r24
    33da:	20 5d       	subi	r18, 0xD0	; 208
    33dc:	8e 81       	ldd	r24, Y+6	; 0x06
    33de:	9f 81       	ldd	r25, Y+7	; 0x07
    33e0:	e8 0f       	add	r30, r24
    33e2:	f9 1f       	adc	r31, r25
    33e4:	20 83       	st	Z, r18
	local_intTempNum/=10;
    33e6:	8c 81       	ldd	r24, Y+4	; 0x04
    33e8:	9d 81       	ldd	r25, Y+5	; 0x05
    33ea:	2a e0       	ldi	r18, 0x0A	; 10
    33ec:	30 e0       	ldi	r19, 0x00	; 0
    33ee:	b9 01       	movw	r22, r18
    33f0:	0e 94 25 1e 	call	0x3c4a	; 0x3c4a <__divmodhi4>
    33f4:	cb 01       	movw	r24, r22
    33f6:	9d 83       	std	Y+5, r25	; 0x05
    33f8:	8c 83       	std	Y+4, r24	; 0x04
	local_intTempNum/=10;
	local_u8Length++;
}
u8 array[local_u8Length];
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
    33fa:	8a 81       	ldd	r24, Y+2	; 0x02
    33fc:	81 50       	subi	r24, 0x01	; 1
    33fe:	8a 83       	std	Y+2, r24	; 0x02
    3400:	8a 81       	ldd	r24, Y+2	; 0x02
    3402:	88 23       	and	r24, r24
    3404:	e9 f6       	brne	.-70     	; 0x33c0 <LCD_voidWritInteger+0xa6>
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    3406:	19 82       	std	Y+1, r1	; 0x01
    3408:	0e c0       	rjmp	.+28     	; 0x3426 <LCD_voidWritInteger+0x10c>
	LCD_voidWriteCharacter(array[i]);
    340a:	89 81       	ldd	r24, Y+1	; 0x01
    340c:	28 2f       	mov	r18, r24
    340e:	30 e0       	ldi	r19, 0x00	; 0
    3410:	8e 81       	ldd	r24, Y+6	; 0x06
    3412:	9f 81       	ldd	r25, Y+7	; 0x07
    3414:	fc 01       	movw	r30, r24
    3416:	e2 0f       	add	r30, r18
    3418:	f3 1f       	adc	r31, r19
    341a:	80 81       	ld	r24, Z
    341c:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_voidWriteCharacter>
local_intTempNum=Copy_intNumber;
for(u8 i=local_u8Length;i>0;i--){
	array[i-1]=local_intTempNum%10+'0';
	local_intTempNum/=10;
}
for(u8 i=0;i<local_u8Length;i++){
    3420:	89 81       	ldd	r24, Y+1	; 0x01
    3422:	8f 5f       	subi	r24, 0xFF	; 255
    3424:	89 83       	std	Y+1, r24	; 0x01
    3426:	99 81       	ldd	r25, Y+1	; 0x01
    3428:	8b 81       	ldd	r24, Y+3	; 0x03
    342a:	98 17       	cp	r25, r24
    342c:	70 f3       	brcs	.-36     	; 0x340a <LCD_voidWritInteger+0xf0>
    342e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3430:	9b 85       	ldd	r25, Y+11	; 0x0b
    3432:	0f b6       	in	r0, 0x3f	; 63
    3434:	f8 94       	cli
    3436:	9e bf       	out	0x3e, r25	; 62
    3438:	0f be       	out	0x3f, r0	; 63
    343a:	8d bf       	out	0x3d, r24	; 61
	LCD_voidWriteCharacter(array[i]);
}
return;
}
    343c:	2e 85       	ldd	r18, Y+14	; 0x0e
    343e:	3f 85       	ldd	r19, Y+15	; 0x0f
    3440:	0f b6       	in	r0, 0x3f	; 63
    3442:	f8 94       	cli
    3444:	3e bf       	out	0x3e, r19	; 62
    3446:	0f be       	out	0x3f, r0	; 63
    3448:	2d bf       	out	0x3d, r18	; 61
    344a:	2f 96       	adiw	r28, 0x0f	; 15
    344c:	0f b6       	in	r0, 0x3f	; 63
    344e:	f8 94       	cli
    3450:	de bf       	out	0x3e, r29	; 62
    3452:	0f be       	out	0x3f, r0	; 63
    3454:	cd bf       	out	0x3d, r28	; 61
    3456:	cf 91       	pop	r28
    3458:	df 91       	pop	r29
    345a:	08 95       	ret

0000345c <LCD_voidWriteFloat>:
void LCD_voidWriteFloat(f32 Copy_floatNumber){
    345c:	df 93       	push	r29
    345e:	cf 93       	push	r28
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	2c 97       	sbiw	r28, 0x0c	; 12
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	69 87       	std	Y+9, r22	; 0x09
    3472:	7a 87       	std	Y+10, r23	; 0x0a
    3474:	8b 87       	std	Y+11, r24	; 0x0b
    3476:	9c 87       	std	Y+12, r25	; 0x0c

	u32 Local_u32int=(u32)(Copy_floatNumber);
    3478:	69 85       	ldd	r22, Y+9	; 0x09
    347a:	7a 85       	ldd	r23, Y+10	; 0x0a
    347c:	8b 85       	ldd	r24, Y+11	; 0x0b
    347e:	9c 85       	ldd	r25, Y+12	; 0x0c
    3480:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3484:	dc 01       	movw	r26, r24
    3486:	cb 01       	movw	r24, r22
    3488:	8d 83       	std	Y+5, r24	; 0x05
    348a:	9e 83       	std	Y+6, r25	; 0x06
    348c:	af 83       	std	Y+7, r26	; 0x07
    348e:	b8 87       	std	Y+8, r27	; 0x08
	LCD_voidWritInteger(Local_u32int);
    3490:	8d 81       	ldd	r24, Y+5	; 0x05
    3492:	9e 81       	ldd	r25, Y+6	; 0x06
    3494:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_voidWritInteger>
	LCD_voidWriteCharacter('.');
    3498:	8e e2       	ldi	r24, 0x2E	; 46
    349a:	0e 94 80 19 	call	0x3300	; 0x3300 <LCD_voidWriteCharacter>
	u32 Local_u32float=(u32)(1000.0*(Copy_floatNumber-(u32)(Local_u32int)));
    349e:	6d 81       	ldd	r22, Y+5	; 0x05
    34a0:	7e 81       	ldd	r23, Y+6	; 0x06
    34a2:	8f 81       	ldd	r24, Y+7	; 0x07
    34a4:	98 85       	ldd	r25, Y+8	; 0x08
    34a6:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    34aa:	9b 01       	movw	r18, r22
    34ac:	ac 01       	movw	r20, r24
    34ae:	69 85       	ldd	r22, Y+9	; 0x09
    34b0:	7a 85       	ldd	r23, Y+10	; 0x0a
    34b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    34b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    34b6:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
    34ba:	dc 01       	movw	r26, r24
    34bc:	cb 01       	movw	r24, r22
    34be:	bc 01       	movw	r22, r24
    34c0:	cd 01       	movw	r24, r26
    34c2:	20 e0       	ldi	r18, 0x00	; 0
    34c4:	30 e0       	ldi	r19, 0x00	; 0
    34c6:	4a e7       	ldi	r20, 0x7A	; 122
    34c8:	54 e4       	ldi	r21, 0x44	; 68
    34ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34ce:	dc 01       	movw	r26, r24
    34d0:	cb 01       	movw	r24, r22
    34d2:	bc 01       	movw	r22, r24
    34d4:	cd 01       	movw	r24, r26
    34d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34da:	dc 01       	movw	r26, r24
    34dc:	cb 01       	movw	r24, r22
    34de:	89 83       	std	Y+1, r24	; 0x01
    34e0:	9a 83       	std	Y+2, r25	; 0x02
    34e2:	ab 83       	std	Y+3, r26	; 0x03
    34e4:	bc 83       	std	Y+4, r27	; 0x04
    LCD_voidWritInteger(Local_u32float);
    34e6:	89 81       	ldd	r24, Y+1	; 0x01
    34e8:	9a 81       	ldd	r25, Y+2	; 0x02
    34ea:	0e 94 8d 19 	call	0x331a	; 0x331a <LCD_voidWritInteger>

	return;
}
    34ee:	2c 96       	adiw	r28, 0x0c	; 12
    34f0:	0f b6       	in	r0, 0x3f	; 63
    34f2:	f8 94       	cli
    34f4:	de bf       	out	0x3e, r29	; 62
    34f6:	0f be       	out	0x3f, r0	; 63
    34f8:	cd bf       	out	0x3d, r28	; 61
    34fa:	cf 91       	pop	r28
    34fc:	df 91       	pop	r29
    34fe:	08 95       	ret

00003500 <LCD_voidGoToPosition>:
void LCD_voidGoToPosition(u8 Copy_u8Row,u8 Copy_u8Col){
    3500:	df 93       	push	r29
    3502:	cf 93       	push	r28
    3504:	00 d0       	rcall	.+0      	; 0x3506 <LCD_voidGoToPosition+0x6>
    3506:	cd b7       	in	r28, 0x3d	; 61
    3508:	de b7       	in	r29, 0x3e	; 62
    350a:	89 83       	std	Y+1, r24	; 0x01
    350c:	6a 83       	std	Y+2, r22	; 0x02

	if(Copy_u8Row<=1&&Copy_u8Col<=16){
    350e:	89 81       	ldd	r24, Y+1	; 0x01
    3510:	82 30       	cpi	r24, 0x02	; 2
    3512:	90 f4       	brcc	.+36     	; 0x3538 <LCD_voidGoToPosition+0x38>
    3514:	8a 81       	ldd	r24, Y+2	; 0x02
    3516:	81 31       	cpi	r24, 0x11	; 17
    3518:	78 f4       	brcc	.+30     	; 0x3538 <LCD_voidGoToPosition+0x38>
		if(Copy_u8Row==0){
    351a:	89 81       	ldd	r24, Y+1	; 0x01
    351c:	88 23       	and	r24, r24
    351e:	29 f4       	brne	.+10     	; 0x352a <LCD_voidGoToPosition+0x2a>
			LCD_voidWriteCommand((0x80+Copy_u8Col));
    3520:	8a 81       	ldd	r24, Y+2	; 0x02
    3522:	80 58       	subi	r24, 0x80	; 128
    3524:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidWriteCommand>
    3528:	07 c0       	rjmp	.+14     	; 0x3538 <LCD_voidGoToPosition+0x38>
		}
		else if(Copy_u8Row==1){
    352a:	89 81       	ldd	r24, Y+1	; 0x01
    352c:	81 30       	cpi	r24, 0x01	; 1
    352e:	21 f4       	brne	.+8      	; 0x3538 <LCD_voidGoToPosition+0x38>
			LCD_voidWriteCommand((0xC0+Copy_u8Col));
    3530:	8a 81       	ldd	r24, Y+2	; 0x02
    3532:	80 54       	subi	r24, 0x40	; 64
    3534:	0e 94 d2 18 	call	0x31a4	; 0x31a4 <LCD_voidWriteCommand>
		}
	}

		return;

}
    3538:	0f 90       	pop	r0
    353a:	0f 90       	pop	r0
    353c:	cf 91       	pop	r28
    353e:	df 91       	pop	r29
    3540:	08 95       	ret

00003542 <main>:
#define RIGHT '4'
#define STOP '5'
#define NO_CHANGE '0'
u8 DIRECTION=FORWARD;

int main(){
    3542:	0f 93       	push	r16
    3544:	1f 93       	push	r17
    3546:	df 93       	push	r29
    3548:	cf 93       	push	r28
    354a:	cd b7       	in	r28, 0x3d	; 61
    354c:	de b7       	in	r29, 0x3e	; 62
    354e:	c6 55       	subi	r28, 0x56	; 86
    3550:	d0 40       	sbci	r29, 0x00	; 0
    3552:	0f b6       	in	r0, 0x3f	; 63
    3554:	f8 94       	cli
    3556:	de bf       	out	0x3e, r29	; 62
    3558:	0f be       	out	0x3f, r0	; 63
    355a:	cd bf       	out	0x3d, r28	; 61
	LCD_voidInit();
    355c:	0e 94 68 17 	call	0x2ed0	; 0x2ed0 <LCD_voidInit>
	EXTI_voidInit();
    3560:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <EXTI_voidInit>
	UART_voidInit();
    3564:	0e 94 17 07 	call	0xe2e	; 0xe2e <UART_voidInit>
	ULTRASONIC_SENSOR_voidInit();
    3568:	0e 94 15 11 	call	0x222a	; 0x222a <ULTRASONIC_SENSOR_voidInit>
	MOTORS_CAR_voidInit();
    356c:	0e 94 67 14 	call	0x28ce	; 0x28ce <MOTORS_CAR_voidInit>

	LCD_voidWriteString("car is ON ");
    3570:	80 e6       	ldi	r24, 0x60	; 96
    3572:	90 e0       	ldi	r25, 0x00	; 0
    3574:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <LCD_voidWriteString>
    3578:	fe 01       	movw	r30, r28
    357a:	ef 5a       	subi	r30, 0xAF	; 175
    357c:	ff 4f       	sbci	r31, 0xFF	; 255
    357e:	80 e0       	ldi	r24, 0x00	; 0
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	aa ef       	ldi	r26, 0xFA	; 250
    3584:	b4 e4       	ldi	r27, 0x44	; 68
    3586:	80 83       	st	Z, r24
    3588:	91 83       	std	Z+1, r25	; 0x01
    358a:	a2 83       	std	Z+2, r26	; 0x02
    358c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    358e:	8e 01       	movw	r16, r28
    3590:	03 5b       	subi	r16, 0xB3	; 179
    3592:	1f 4f       	sbci	r17, 0xFF	; 255
    3594:	fe 01       	movw	r30, r28
    3596:	ef 5a       	subi	r30, 0xAF	; 175
    3598:	ff 4f       	sbci	r31, 0xFF	; 255
    359a:	60 81       	ld	r22, Z
    359c:	71 81       	ldd	r23, Z+1	; 0x01
    359e:	82 81       	ldd	r24, Z+2	; 0x02
    35a0:	93 81       	ldd	r25, Z+3	; 0x03
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	4a e7       	ldi	r20, 0x7A	; 122
    35a8:	55 e4       	ldi	r21, 0x45	; 69
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	f8 01       	movw	r30, r16
    35b4:	80 83       	st	Z, r24
    35b6:	91 83       	std	Z+1, r25	; 0x01
    35b8:	a2 83       	std	Z+2, r26	; 0x02
    35ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35bc:	fe 01       	movw	r30, r28
    35be:	e3 5b       	subi	r30, 0xB3	; 179
    35c0:	ff 4f       	sbci	r31, 0xFF	; 255
    35c2:	60 81       	ld	r22, Z
    35c4:	71 81       	ldd	r23, Z+1	; 0x01
    35c6:	82 81       	ldd	r24, Z+2	; 0x02
    35c8:	93 81       	ldd	r25, Z+3	; 0x03
    35ca:	20 e0       	ldi	r18, 0x00	; 0
    35cc:	30 e0       	ldi	r19, 0x00	; 0
    35ce:	40 e8       	ldi	r20, 0x80	; 128
    35d0:	5f e3       	ldi	r21, 0x3F	; 63
    35d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    35d6:	88 23       	and	r24, r24
    35d8:	44 f4       	brge	.+16     	; 0x35ea <main+0xa8>
		__ticks = 1;
    35da:	fe 01       	movw	r30, r28
    35dc:	e5 5b       	subi	r30, 0xB5	; 181
    35de:	ff 4f       	sbci	r31, 0xFF	; 255
    35e0:	81 e0       	ldi	r24, 0x01	; 1
    35e2:	90 e0       	ldi	r25, 0x00	; 0
    35e4:	91 83       	std	Z+1, r25	; 0x01
    35e6:	80 83       	st	Z, r24
    35e8:	64 c0       	rjmp	.+200    	; 0x36b2 <main+0x170>
	else if (__tmp > 65535)
    35ea:	fe 01       	movw	r30, r28
    35ec:	e3 5b       	subi	r30, 0xB3	; 179
    35ee:	ff 4f       	sbci	r31, 0xFF	; 255
    35f0:	60 81       	ld	r22, Z
    35f2:	71 81       	ldd	r23, Z+1	; 0x01
    35f4:	82 81       	ldd	r24, Z+2	; 0x02
    35f6:	93 81       	ldd	r25, Z+3	; 0x03
    35f8:	20 e0       	ldi	r18, 0x00	; 0
    35fa:	3f ef       	ldi	r19, 0xFF	; 255
    35fc:	4f e7       	ldi	r20, 0x7F	; 127
    35fe:	57 e4       	ldi	r21, 0x47	; 71
    3600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3604:	18 16       	cp	r1, r24
    3606:	0c f0       	brlt	.+2      	; 0x360a <main+0xc8>
    3608:	43 c0       	rjmp	.+134    	; 0x3690 <main+0x14e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    360a:	fe 01       	movw	r30, r28
    360c:	ef 5a       	subi	r30, 0xAF	; 175
    360e:	ff 4f       	sbci	r31, 0xFF	; 255
    3610:	60 81       	ld	r22, Z
    3612:	71 81       	ldd	r23, Z+1	; 0x01
    3614:	82 81       	ldd	r24, Z+2	; 0x02
    3616:	93 81       	ldd	r25, Z+3	; 0x03
    3618:	20 e0       	ldi	r18, 0x00	; 0
    361a:	30 e0       	ldi	r19, 0x00	; 0
    361c:	40 e2       	ldi	r20, 0x20	; 32
    361e:	51 e4       	ldi	r21, 0x41	; 65
    3620:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3624:	dc 01       	movw	r26, r24
    3626:	cb 01       	movw	r24, r22
    3628:	8e 01       	movw	r16, r28
    362a:	05 5b       	subi	r16, 0xB5	; 181
    362c:	1f 4f       	sbci	r17, 0xFF	; 255
    362e:	bc 01       	movw	r22, r24
    3630:	cd 01       	movw	r24, r26
    3632:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	f8 01       	movw	r30, r16
    363c:	91 83       	std	Z+1, r25	; 0x01
    363e:	80 83       	st	Z, r24
    3640:	1f c0       	rjmp	.+62     	; 0x3680 <main+0x13e>
    3642:	fe 01       	movw	r30, r28
    3644:	e7 5b       	subi	r30, 0xB7	; 183
    3646:	ff 4f       	sbci	r31, 0xFF	; 255
    3648:	80 e9       	ldi	r24, 0x90	; 144
    364a:	91 e0       	ldi	r25, 0x01	; 1
    364c:	91 83       	std	Z+1, r25	; 0x01
    364e:	80 83       	st	Z, r24
    3650:	fe 01       	movw	r30, r28
    3652:	e7 5b       	subi	r30, 0xB7	; 183
    3654:	ff 4f       	sbci	r31, 0xFF	; 255
    3656:	80 81       	ld	r24, Z
    3658:	91 81       	ldd	r25, Z+1	; 0x01
    365a:	01 97       	sbiw	r24, 0x01	; 1
    365c:	f1 f7       	brne	.-4      	; 0x365a <main+0x118>
    365e:	fe 01       	movw	r30, r28
    3660:	e7 5b       	subi	r30, 0xB7	; 183
    3662:	ff 4f       	sbci	r31, 0xFF	; 255
    3664:	91 83       	std	Z+1, r25	; 0x01
    3666:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3668:	de 01       	movw	r26, r28
    366a:	a5 5b       	subi	r26, 0xB5	; 181
    366c:	bf 4f       	sbci	r27, 0xFF	; 255
    366e:	fe 01       	movw	r30, r28
    3670:	e5 5b       	subi	r30, 0xB5	; 181
    3672:	ff 4f       	sbci	r31, 0xFF	; 255
    3674:	80 81       	ld	r24, Z
    3676:	91 81       	ldd	r25, Z+1	; 0x01
    3678:	01 97       	sbiw	r24, 0x01	; 1
    367a:	11 96       	adiw	r26, 0x01	; 1
    367c:	9c 93       	st	X, r25
    367e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3680:	fe 01       	movw	r30, r28
    3682:	e5 5b       	subi	r30, 0xB5	; 181
    3684:	ff 4f       	sbci	r31, 0xFF	; 255
    3686:	80 81       	ld	r24, Z
    3688:	91 81       	ldd	r25, Z+1	; 0x01
    368a:	00 97       	sbiw	r24, 0x00	; 0
    368c:	d1 f6       	brne	.-76     	; 0x3642 <main+0x100>
    368e:	27 c0       	rjmp	.+78     	; 0x36de <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3690:	8e 01       	movw	r16, r28
    3692:	05 5b       	subi	r16, 0xB5	; 181
    3694:	1f 4f       	sbci	r17, 0xFF	; 255
    3696:	fe 01       	movw	r30, r28
    3698:	e3 5b       	subi	r30, 0xB3	; 179
    369a:	ff 4f       	sbci	r31, 0xFF	; 255
    369c:	60 81       	ld	r22, Z
    369e:	71 81       	ldd	r23, Z+1	; 0x01
    36a0:	82 81       	ldd	r24, Z+2	; 0x02
    36a2:	93 81       	ldd	r25, Z+3	; 0x03
    36a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36a8:	dc 01       	movw	r26, r24
    36aa:	cb 01       	movw	r24, r22
    36ac:	f8 01       	movw	r30, r16
    36ae:	91 83       	std	Z+1, r25	; 0x01
    36b0:	80 83       	st	Z, r24
    36b2:	de 01       	movw	r26, r28
    36b4:	a9 5b       	subi	r26, 0xB9	; 185
    36b6:	bf 4f       	sbci	r27, 0xFF	; 255
    36b8:	fe 01       	movw	r30, r28
    36ba:	e5 5b       	subi	r30, 0xB5	; 181
    36bc:	ff 4f       	sbci	r31, 0xFF	; 255
    36be:	80 81       	ld	r24, Z
    36c0:	91 81       	ldd	r25, Z+1	; 0x01
    36c2:	8d 93       	st	X+, r24
    36c4:	9c 93       	st	X, r25
    36c6:	fe 01       	movw	r30, r28
    36c8:	e9 5b       	subi	r30, 0xB9	; 185
    36ca:	ff 4f       	sbci	r31, 0xFF	; 255
    36cc:	80 81       	ld	r24, Z
    36ce:	91 81       	ldd	r25, Z+1	; 0x01
    36d0:	01 97       	sbiw	r24, 0x01	; 1
    36d2:	f1 f7       	brne	.-4      	; 0x36d0 <main+0x18e>
    36d4:	fe 01       	movw	r30, r28
    36d6:	e9 5b       	subi	r30, 0xB9	; 185
    36d8:	ff 4f       	sbci	r31, 0xFF	; 255
    36da:	91 83       	std	Z+1, r25	; 0x01
    36dc:	80 83       	st	Z, r24

	_delay_ms(2000);

	while(1){

		UART_voidRecieveChar(&DIRECTION);
    36de:	8b e9       	ldi	r24, 0x9B	; 155
    36e0:	91 e0       	ldi	r25, 0x01	; 1
    36e2:	0e 94 7d 07 	call	0xefa	; 0xefa <UART_voidRecieveChar>
		switch(DIRECTION){
    36e6:	80 91 9b 01 	lds	r24, 0x019B
    36ea:	28 2f       	mov	r18, r24
    36ec:	30 e0       	ldi	r19, 0x00	; 0
    36ee:	67 96       	adiw	r28, 0x17	; 23
    36f0:	3f af       	std	Y+63, r19	; 0x3f
    36f2:	2e af       	std	Y+62, r18	; 0x3e
    36f4:	67 97       	sbiw	r28, 0x17	; 23
    36f6:	67 96       	adiw	r28, 0x17	; 23
    36f8:	8e ad       	ldd	r24, Y+62	; 0x3e
    36fa:	9f ad       	ldd	r25, Y+63	; 0x3f
    36fc:	67 97       	sbiw	r28, 0x17	; 23
    36fe:	83 33       	cpi	r24, 0x33	; 51
    3700:	91 05       	cpc	r25, r1
    3702:	09 f4       	brne	.+2      	; 0x3706 <main+0x1c4>
    3704:	31 c1       	rjmp	.+610    	; 0x3968 <main+0x426>
    3706:	67 96       	adiw	r28, 0x17	; 23
    3708:	ee ad       	ldd	r30, Y+62	; 0x3e
    370a:	ff ad       	ldd	r31, Y+63	; 0x3f
    370c:	67 97       	sbiw	r28, 0x17	; 23
    370e:	e4 33       	cpi	r30, 0x34	; 52
    3710:	f1 05       	cpc	r31, r1
    3712:	84 f4       	brge	.+32     	; 0x3734 <main+0x1f2>
    3714:	67 96       	adiw	r28, 0x17	; 23
    3716:	2e ad       	ldd	r18, Y+62	; 0x3e
    3718:	3f ad       	ldd	r19, Y+63	; 0x3f
    371a:	67 97       	sbiw	r28, 0x17	; 23
    371c:	21 33       	cpi	r18, 0x31	; 49
    371e:	31 05       	cpc	r19, r1
    3720:	d1 f0       	breq	.+52     	; 0x3756 <main+0x214>
    3722:	67 96       	adiw	r28, 0x17	; 23
    3724:	8e ad       	ldd	r24, Y+62	; 0x3e
    3726:	9f ad       	ldd	r25, Y+63	; 0x3f
    3728:	67 97       	sbiw	r28, 0x17	; 23
    372a:	82 33       	cpi	r24, 0x32	; 50
    372c:	91 05       	cpc	r25, r1
    372e:	09 f4       	brne	.+2      	; 0x3732 <main+0x1f0>
    3730:	96 c1       	rjmp	.+812    	; 0x3a5e <main+0x51c>
    3732:	d5 cf       	rjmp	.-86     	; 0x36de <main+0x19c>
    3734:	67 96       	adiw	r28, 0x17	; 23
    3736:	ee ad       	ldd	r30, Y+62	; 0x3e
    3738:	ff ad       	ldd	r31, Y+63	; 0x3f
    373a:	67 97       	sbiw	r28, 0x17	; 23
    373c:	e4 33       	cpi	r30, 0x34	; 52
    373e:	f1 05       	cpc	r31, r1
    3740:	09 f4       	brne	.+2      	; 0x3744 <main+0x202>
    3742:	97 c0       	rjmp	.+302    	; 0x3872 <main+0x330>
    3744:	67 96       	adiw	r28, 0x17	; 23
    3746:	2e ad       	ldd	r18, Y+62	; 0x3e
    3748:	3f ad       	ldd	r19, Y+63	; 0x3f
    374a:	67 97       	sbiw	r28, 0x17	; 23
    374c:	25 33       	cpi	r18, 0x35	; 53
    374e:	31 05       	cpc	r19, r1
    3750:	09 f4       	brne	.+2      	; 0x3754 <main+0x212>
    3752:	00 c2       	rjmp	.+1024   	; 0x3b54 <main+0x612>
    3754:	c4 cf       	rjmp	.-120    	; 0x36de <main+0x19c>
		case FORWARD:
			LCD_voidClearScreen();
    3756:	0e 94 06 19 	call	0x320c	; 0x320c <LCD_voidClearScreen>
			LCD_voidWriteString("FORWARD ");
    375a:	8b e6       	ldi	r24, 0x6B	; 107
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <LCD_voidWriteString>
			MOTORS_CAR_voidForward();
    3762:	0e 94 96 14 	call	0x292c	; 0x292c <MOTORS_CAR_voidForward>
    3766:	fe 01       	movw	r30, r28
    3768:	ed 5b       	subi	r30, 0xBD	; 189
    376a:	ff 4f       	sbci	r31, 0xFF	; 255
    376c:	80 e0       	ldi	r24, 0x00	; 0
    376e:	90 e0       	ldi	r25, 0x00	; 0
    3770:	aa e7       	ldi	r26, 0x7A	; 122
    3772:	b4 e4       	ldi	r27, 0x44	; 68
    3774:	80 83       	st	Z, r24
    3776:	91 83       	std	Z+1, r25	; 0x01
    3778:	a2 83       	std	Z+2, r26	; 0x02
    377a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    377c:	8e 01       	movw	r16, r28
    377e:	01 5c       	subi	r16, 0xC1	; 193
    3780:	1f 4f       	sbci	r17, 0xFF	; 255
    3782:	fe 01       	movw	r30, r28
    3784:	ed 5b       	subi	r30, 0xBD	; 189
    3786:	ff 4f       	sbci	r31, 0xFF	; 255
    3788:	60 81       	ld	r22, Z
    378a:	71 81       	ldd	r23, Z+1	; 0x01
    378c:	82 81       	ldd	r24, Z+2	; 0x02
    378e:	93 81       	ldd	r25, Z+3	; 0x03
    3790:	20 e0       	ldi	r18, 0x00	; 0
    3792:	30 e0       	ldi	r19, 0x00	; 0
    3794:	4a e7       	ldi	r20, 0x7A	; 122
    3796:	55 e4       	ldi	r21, 0x45	; 69
    3798:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    379c:	dc 01       	movw	r26, r24
    379e:	cb 01       	movw	r24, r22
    37a0:	f8 01       	movw	r30, r16
    37a2:	80 83       	st	Z, r24
    37a4:	91 83       	std	Z+1, r25	; 0x01
    37a6:	a2 83       	std	Z+2, r26	; 0x02
    37a8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37aa:	fe 01       	movw	r30, r28
    37ac:	ff 96       	adiw	r30, 0x3f	; 63
    37ae:	60 81       	ld	r22, Z
    37b0:	71 81       	ldd	r23, Z+1	; 0x01
    37b2:	82 81       	ldd	r24, Z+2	; 0x02
    37b4:	93 81       	ldd	r25, Z+3	; 0x03
    37b6:	20 e0       	ldi	r18, 0x00	; 0
    37b8:	30 e0       	ldi	r19, 0x00	; 0
    37ba:	40 e8       	ldi	r20, 0x80	; 128
    37bc:	5f e3       	ldi	r21, 0x3F	; 63
    37be:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    37c2:	88 23       	and	r24, r24
    37c4:	2c f4       	brge	.+10     	; 0x37d0 <main+0x28e>
		__ticks = 1;
    37c6:	81 e0       	ldi	r24, 0x01	; 1
    37c8:	90 e0       	ldi	r25, 0x00	; 0
    37ca:	9e af       	std	Y+62, r25	; 0x3e
    37cc:	8d af       	std	Y+61, r24	; 0x3d
    37ce:	46 c0       	rjmp	.+140    	; 0x385c <main+0x31a>
	else if (__tmp > 65535)
    37d0:	fe 01       	movw	r30, r28
    37d2:	ff 96       	adiw	r30, 0x3f	; 63
    37d4:	60 81       	ld	r22, Z
    37d6:	71 81       	ldd	r23, Z+1	; 0x01
    37d8:	82 81       	ldd	r24, Z+2	; 0x02
    37da:	93 81       	ldd	r25, Z+3	; 0x03
    37dc:	20 e0       	ldi	r18, 0x00	; 0
    37de:	3f ef       	ldi	r19, 0xFF	; 255
    37e0:	4f e7       	ldi	r20, 0x7F	; 127
    37e2:	57 e4       	ldi	r21, 0x47	; 71
    37e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37e8:	18 16       	cp	r1, r24
    37ea:	64 f5       	brge	.+88     	; 0x3844 <main+0x302>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37ec:	fe 01       	movw	r30, r28
    37ee:	ed 5b       	subi	r30, 0xBD	; 189
    37f0:	ff 4f       	sbci	r31, 0xFF	; 255
    37f2:	60 81       	ld	r22, Z
    37f4:	71 81       	ldd	r23, Z+1	; 0x01
    37f6:	82 81       	ldd	r24, Z+2	; 0x02
    37f8:	93 81       	ldd	r25, Z+3	; 0x03
    37fa:	20 e0       	ldi	r18, 0x00	; 0
    37fc:	30 e0       	ldi	r19, 0x00	; 0
    37fe:	40 e2       	ldi	r20, 0x20	; 32
    3800:	51 e4       	ldi	r21, 0x41	; 65
    3802:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3806:	dc 01       	movw	r26, r24
    3808:	cb 01       	movw	r24, r22
    380a:	bc 01       	movw	r22, r24
    380c:	cd 01       	movw	r24, r26
    380e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	9e af       	std	Y+62, r25	; 0x3e
    3818:	8d af       	std	Y+61, r24	; 0x3d
    381a:	0f c0       	rjmp	.+30     	; 0x383a <main+0x2f8>
    381c:	80 e9       	ldi	r24, 0x90	; 144
    381e:	91 e0       	ldi	r25, 0x01	; 1
    3820:	9c af       	std	Y+60, r25	; 0x3c
    3822:	8b af       	std	Y+59, r24	; 0x3b
    3824:	8b ad       	ldd	r24, Y+59	; 0x3b
    3826:	9c ad       	ldd	r25, Y+60	; 0x3c
    3828:	01 97       	sbiw	r24, 0x01	; 1
    382a:	f1 f7       	brne	.-4      	; 0x3828 <main+0x2e6>
    382c:	9c af       	std	Y+60, r25	; 0x3c
    382e:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3830:	8d ad       	ldd	r24, Y+61	; 0x3d
    3832:	9e ad       	ldd	r25, Y+62	; 0x3e
    3834:	01 97       	sbiw	r24, 0x01	; 1
    3836:	9e af       	std	Y+62, r25	; 0x3e
    3838:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    383a:	8d ad       	ldd	r24, Y+61	; 0x3d
    383c:	9e ad       	ldd	r25, Y+62	; 0x3e
    383e:	00 97       	sbiw	r24, 0x00	; 0
    3840:	69 f7       	brne	.-38     	; 0x381c <main+0x2da>
    3842:	4d cf       	rjmp	.-358    	; 0x36de <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3844:	fe 01       	movw	r30, r28
    3846:	ff 96       	adiw	r30, 0x3f	; 63
    3848:	60 81       	ld	r22, Z
    384a:	71 81       	ldd	r23, Z+1	; 0x01
    384c:	82 81       	ldd	r24, Z+2	; 0x02
    384e:	93 81       	ldd	r25, Z+3	; 0x03
    3850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3854:	dc 01       	movw	r26, r24
    3856:	cb 01       	movw	r24, r22
    3858:	9e af       	std	Y+62, r25	; 0x3e
    385a:	8d af       	std	Y+61, r24	; 0x3d
    385c:	8d ad       	ldd	r24, Y+61	; 0x3d
    385e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3860:	9a af       	std	Y+58, r25	; 0x3a
    3862:	89 af       	std	Y+57, r24	; 0x39
    3864:	89 ad       	ldd	r24, Y+57	; 0x39
    3866:	9a ad       	ldd	r25, Y+58	; 0x3a
    3868:	01 97       	sbiw	r24, 0x01	; 1
    386a:	f1 f7       	brne	.-4      	; 0x3868 <main+0x326>
    386c:	9a af       	std	Y+58, r25	; 0x3a
    386e:	89 af       	std	Y+57, r24	; 0x39
    3870:	36 cf       	rjmp	.-404    	; 0x36de <main+0x19c>
			_delay_ms(1000);
			break;
		case RIGHT:
			LCD_voidClearScreen();
    3872:	0e 94 06 19 	call	0x320c	; 0x320c <LCD_voidClearScreen>
			LCD_voidWriteString("RIGHT");
    3876:	84 e7       	ldi	r24, 0x74	; 116
    3878:	90 e0       	ldi	r25, 0x00	; 0
    387a:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <LCD_voidWriteString>
			MOTORS_CAR_voidRight();
    387e:	0e 94 cc 14 	call	0x2998	; 0x2998 <MOTORS_CAR_voidRight>
    3882:	80 e0       	ldi	r24, 0x00	; 0
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	aa e7       	ldi	r26, 0x7A	; 122
    3888:	b4 e4       	ldi	r27, 0x44	; 68
    388a:	8d ab       	std	Y+53, r24	; 0x35
    388c:	9e ab       	std	Y+54, r25	; 0x36
    388e:	af ab       	std	Y+55, r26	; 0x37
    3890:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3892:	6d a9       	ldd	r22, Y+53	; 0x35
    3894:	7e a9       	ldd	r23, Y+54	; 0x36
    3896:	8f a9       	ldd	r24, Y+55	; 0x37
    3898:	98 ad       	ldd	r25, Y+56	; 0x38
    389a:	20 e0       	ldi	r18, 0x00	; 0
    389c:	30 e0       	ldi	r19, 0x00	; 0
    389e:	4a e7       	ldi	r20, 0x7A	; 122
    38a0:	55 e4       	ldi	r21, 0x45	; 69
    38a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38a6:	dc 01       	movw	r26, r24
    38a8:	cb 01       	movw	r24, r22
    38aa:	89 ab       	std	Y+49, r24	; 0x31
    38ac:	9a ab       	std	Y+50, r25	; 0x32
    38ae:	ab ab       	std	Y+51, r26	; 0x33
    38b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    38b2:	69 a9       	ldd	r22, Y+49	; 0x31
    38b4:	7a a9       	ldd	r23, Y+50	; 0x32
    38b6:	8b a9       	ldd	r24, Y+51	; 0x33
    38b8:	9c a9       	ldd	r25, Y+52	; 0x34
    38ba:	20 e0       	ldi	r18, 0x00	; 0
    38bc:	30 e0       	ldi	r19, 0x00	; 0
    38be:	40 e8       	ldi	r20, 0x80	; 128
    38c0:	5f e3       	ldi	r21, 0x3F	; 63
    38c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    38c6:	88 23       	and	r24, r24
    38c8:	2c f4       	brge	.+10     	; 0x38d4 <main+0x392>
		__ticks = 1;
    38ca:	81 e0       	ldi	r24, 0x01	; 1
    38cc:	90 e0       	ldi	r25, 0x00	; 0
    38ce:	98 ab       	std	Y+48, r25	; 0x30
    38d0:	8f a7       	std	Y+47, r24	; 0x2f
    38d2:	3f c0       	rjmp	.+126    	; 0x3952 <main+0x410>
	else if (__tmp > 65535)
    38d4:	69 a9       	ldd	r22, Y+49	; 0x31
    38d6:	7a a9       	ldd	r23, Y+50	; 0x32
    38d8:	8b a9       	ldd	r24, Y+51	; 0x33
    38da:	9c a9       	ldd	r25, Y+52	; 0x34
    38dc:	20 e0       	ldi	r18, 0x00	; 0
    38de:	3f ef       	ldi	r19, 0xFF	; 255
    38e0:	4f e7       	ldi	r20, 0x7F	; 127
    38e2:	57 e4       	ldi	r21, 0x47	; 71
    38e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38e8:	18 16       	cp	r1, r24
    38ea:	4c f5       	brge	.+82     	; 0x393e <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38ec:	6d a9       	ldd	r22, Y+53	; 0x35
    38ee:	7e a9       	ldd	r23, Y+54	; 0x36
    38f0:	8f a9       	ldd	r24, Y+55	; 0x37
    38f2:	98 ad       	ldd	r25, Y+56	; 0x38
    38f4:	20 e0       	ldi	r18, 0x00	; 0
    38f6:	30 e0       	ldi	r19, 0x00	; 0
    38f8:	40 e2       	ldi	r20, 0x20	; 32
    38fa:	51 e4       	ldi	r21, 0x41	; 65
    38fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3900:	dc 01       	movw	r26, r24
    3902:	cb 01       	movw	r24, r22
    3904:	bc 01       	movw	r22, r24
    3906:	cd 01       	movw	r24, r26
    3908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    390c:	dc 01       	movw	r26, r24
    390e:	cb 01       	movw	r24, r22
    3910:	98 ab       	std	Y+48, r25	; 0x30
    3912:	8f a7       	std	Y+47, r24	; 0x2f
    3914:	0f c0       	rjmp	.+30     	; 0x3934 <main+0x3f2>
    3916:	80 e9       	ldi	r24, 0x90	; 144
    3918:	91 e0       	ldi	r25, 0x01	; 1
    391a:	9e a7       	std	Y+46, r25	; 0x2e
    391c:	8d a7       	std	Y+45, r24	; 0x2d
    391e:	8d a5       	ldd	r24, Y+45	; 0x2d
    3920:	9e a5       	ldd	r25, Y+46	; 0x2e
    3922:	01 97       	sbiw	r24, 0x01	; 1
    3924:	f1 f7       	brne	.-4      	; 0x3922 <main+0x3e0>
    3926:	9e a7       	std	Y+46, r25	; 0x2e
    3928:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    392a:	8f a5       	ldd	r24, Y+47	; 0x2f
    392c:	98 a9       	ldd	r25, Y+48	; 0x30
    392e:	01 97       	sbiw	r24, 0x01	; 1
    3930:	98 ab       	std	Y+48, r25	; 0x30
    3932:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3934:	8f a5       	ldd	r24, Y+47	; 0x2f
    3936:	98 a9       	ldd	r25, Y+48	; 0x30
    3938:	00 97       	sbiw	r24, 0x00	; 0
    393a:	69 f7       	brne	.-38     	; 0x3916 <main+0x3d4>
    393c:	d0 ce       	rjmp	.-608    	; 0x36de <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    393e:	69 a9       	ldd	r22, Y+49	; 0x31
    3940:	7a a9       	ldd	r23, Y+50	; 0x32
    3942:	8b a9       	ldd	r24, Y+51	; 0x33
    3944:	9c a9       	ldd	r25, Y+52	; 0x34
    3946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    394a:	dc 01       	movw	r26, r24
    394c:	cb 01       	movw	r24, r22
    394e:	98 ab       	std	Y+48, r25	; 0x30
    3950:	8f a7       	std	Y+47, r24	; 0x2f
    3952:	8f a5       	ldd	r24, Y+47	; 0x2f
    3954:	98 a9       	ldd	r25, Y+48	; 0x30
    3956:	9c a7       	std	Y+44, r25	; 0x2c
    3958:	8b a7       	std	Y+43, r24	; 0x2b
    395a:	8b a5       	ldd	r24, Y+43	; 0x2b
    395c:	9c a5       	ldd	r25, Y+44	; 0x2c
    395e:	01 97       	sbiw	r24, 0x01	; 1
    3960:	f1 f7       	brne	.-4      	; 0x395e <main+0x41c>
    3962:	9c a7       	std	Y+44, r25	; 0x2c
    3964:	8b a7       	std	Y+43, r24	; 0x2b
    3966:	bb ce       	rjmp	.-650    	; 0x36de <main+0x19c>
			_delay_ms(1000);
			break;
		case LEFT:
			LCD_voidClearScreen();
    3968:	0e 94 06 19 	call	0x320c	; 0x320c <LCD_voidClearScreen>
			LCD_voidWriteString("LEFT");
    396c:	8a e7       	ldi	r24, 0x7A	; 122
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <LCD_voidWriteString>
			MOTORS_CAR_voidLeft();
    3974:	0e 94 e7 14 	call	0x29ce	; 0x29ce <MOTORS_CAR_voidLeft>
    3978:	80 e0       	ldi	r24, 0x00	; 0
    397a:	90 e0       	ldi	r25, 0x00	; 0
    397c:	aa e7       	ldi	r26, 0x7A	; 122
    397e:	b4 e4       	ldi	r27, 0x44	; 68
    3980:	8f a3       	std	Y+39, r24	; 0x27
    3982:	98 a7       	std	Y+40, r25	; 0x28
    3984:	a9 a7       	std	Y+41, r26	; 0x29
    3986:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3988:	6f a1       	ldd	r22, Y+39	; 0x27
    398a:	78 a5       	ldd	r23, Y+40	; 0x28
    398c:	89 a5       	ldd	r24, Y+41	; 0x29
    398e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3990:	20 e0       	ldi	r18, 0x00	; 0
    3992:	30 e0       	ldi	r19, 0x00	; 0
    3994:	4a e7       	ldi	r20, 0x7A	; 122
    3996:	55 e4       	ldi	r21, 0x45	; 69
    3998:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    399c:	dc 01       	movw	r26, r24
    399e:	cb 01       	movw	r24, r22
    39a0:	8b a3       	std	Y+35, r24	; 0x23
    39a2:	9c a3       	std	Y+36, r25	; 0x24
    39a4:	ad a3       	std	Y+37, r26	; 0x25
    39a6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    39a8:	6b a1       	ldd	r22, Y+35	; 0x23
    39aa:	7c a1       	ldd	r23, Y+36	; 0x24
    39ac:	8d a1       	ldd	r24, Y+37	; 0x25
    39ae:	9e a1       	ldd	r25, Y+38	; 0x26
    39b0:	20 e0       	ldi	r18, 0x00	; 0
    39b2:	30 e0       	ldi	r19, 0x00	; 0
    39b4:	40 e8       	ldi	r20, 0x80	; 128
    39b6:	5f e3       	ldi	r21, 0x3F	; 63
    39b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    39bc:	88 23       	and	r24, r24
    39be:	2c f4       	brge	.+10     	; 0x39ca <main+0x488>
		__ticks = 1;
    39c0:	81 e0       	ldi	r24, 0x01	; 1
    39c2:	90 e0       	ldi	r25, 0x00	; 0
    39c4:	9a a3       	std	Y+34, r25	; 0x22
    39c6:	89 a3       	std	Y+33, r24	; 0x21
    39c8:	3f c0       	rjmp	.+126    	; 0x3a48 <main+0x506>
	else if (__tmp > 65535)
    39ca:	6b a1       	ldd	r22, Y+35	; 0x23
    39cc:	7c a1       	ldd	r23, Y+36	; 0x24
    39ce:	8d a1       	ldd	r24, Y+37	; 0x25
    39d0:	9e a1       	ldd	r25, Y+38	; 0x26
    39d2:	20 e0       	ldi	r18, 0x00	; 0
    39d4:	3f ef       	ldi	r19, 0xFF	; 255
    39d6:	4f e7       	ldi	r20, 0x7F	; 127
    39d8:	57 e4       	ldi	r21, 0x47	; 71
    39da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39de:	18 16       	cp	r1, r24
    39e0:	4c f5       	brge	.+82     	; 0x3a34 <main+0x4f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39e2:	6f a1       	ldd	r22, Y+39	; 0x27
    39e4:	78 a5       	ldd	r23, Y+40	; 0x28
    39e6:	89 a5       	ldd	r24, Y+41	; 0x29
    39e8:	9a a5       	ldd	r25, Y+42	; 0x2a
    39ea:	20 e0       	ldi	r18, 0x00	; 0
    39ec:	30 e0       	ldi	r19, 0x00	; 0
    39ee:	40 e2       	ldi	r20, 0x20	; 32
    39f0:	51 e4       	ldi	r21, 0x41	; 65
    39f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39f6:	dc 01       	movw	r26, r24
    39f8:	cb 01       	movw	r24, r22
    39fa:	bc 01       	movw	r22, r24
    39fc:	cd 01       	movw	r24, r26
    39fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a02:	dc 01       	movw	r26, r24
    3a04:	cb 01       	movw	r24, r22
    3a06:	9a a3       	std	Y+34, r25	; 0x22
    3a08:	89 a3       	std	Y+33, r24	; 0x21
    3a0a:	0f c0       	rjmp	.+30     	; 0x3a2a <main+0x4e8>
    3a0c:	80 e9       	ldi	r24, 0x90	; 144
    3a0e:	91 e0       	ldi	r25, 0x01	; 1
    3a10:	98 a3       	std	Y+32, r25	; 0x20
    3a12:	8f 8f       	std	Y+31, r24	; 0x1f
    3a14:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3a16:	98 a1       	ldd	r25, Y+32	; 0x20
    3a18:	01 97       	sbiw	r24, 0x01	; 1
    3a1a:	f1 f7       	brne	.-4      	; 0x3a18 <main+0x4d6>
    3a1c:	98 a3       	std	Y+32, r25	; 0x20
    3a1e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a20:	89 a1       	ldd	r24, Y+33	; 0x21
    3a22:	9a a1       	ldd	r25, Y+34	; 0x22
    3a24:	01 97       	sbiw	r24, 0x01	; 1
    3a26:	9a a3       	std	Y+34, r25	; 0x22
    3a28:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a2a:	89 a1       	ldd	r24, Y+33	; 0x21
    3a2c:	9a a1       	ldd	r25, Y+34	; 0x22
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	69 f7       	brne	.-38     	; 0x3a0c <main+0x4ca>
    3a32:	55 ce       	rjmp	.-854    	; 0x36de <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a34:	6b a1       	ldd	r22, Y+35	; 0x23
    3a36:	7c a1       	ldd	r23, Y+36	; 0x24
    3a38:	8d a1       	ldd	r24, Y+37	; 0x25
    3a3a:	9e a1       	ldd	r25, Y+38	; 0x26
    3a3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a40:	dc 01       	movw	r26, r24
    3a42:	cb 01       	movw	r24, r22
    3a44:	9a a3       	std	Y+34, r25	; 0x22
    3a46:	89 a3       	std	Y+33, r24	; 0x21
    3a48:	89 a1       	ldd	r24, Y+33	; 0x21
    3a4a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a4c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a4e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a50:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a52:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a54:	01 97       	sbiw	r24, 0x01	; 1
    3a56:	f1 f7       	brne	.-4      	; 0x3a54 <main+0x512>
    3a58:	9e 8f       	std	Y+30, r25	; 0x1e
    3a5a:	8d 8f       	std	Y+29, r24	; 0x1d
    3a5c:	40 ce       	rjmp	.-896    	; 0x36de <main+0x19c>
			_delay_ms(1000);

			break;
		case BACKWARD:
			LCD_voidClearScreen();
    3a5e:	0e 94 06 19 	call	0x320c	; 0x320c <LCD_voidClearScreen>
			LCD_voidWriteString("BACKWARD");
    3a62:	8f e7       	ldi	r24, 0x7F	; 127
    3a64:	90 e0       	ldi	r25, 0x00	; 0
    3a66:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <LCD_voidWriteString>
			MOTORS_CAR_voidBackward();
    3a6a:	0e 94 b1 14 	call	0x2962	; 0x2962 <MOTORS_CAR_voidBackward>
    3a6e:	80 e0       	ldi	r24, 0x00	; 0
    3a70:	90 e0       	ldi	r25, 0x00	; 0
    3a72:	aa e7       	ldi	r26, 0x7A	; 122
    3a74:	b4 e4       	ldi	r27, 0x44	; 68
    3a76:	89 8f       	std	Y+25, r24	; 0x19
    3a78:	9a 8f       	std	Y+26, r25	; 0x1a
    3a7a:	ab 8f       	std	Y+27, r26	; 0x1b
    3a7c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a7e:	69 8d       	ldd	r22, Y+25	; 0x19
    3a80:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a82:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a84:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a86:	20 e0       	ldi	r18, 0x00	; 0
    3a88:	30 e0       	ldi	r19, 0x00	; 0
    3a8a:	4a e7       	ldi	r20, 0x7A	; 122
    3a8c:	55 e4       	ldi	r21, 0x45	; 69
    3a8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a92:	dc 01       	movw	r26, r24
    3a94:	cb 01       	movw	r24, r22
    3a96:	8d 8b       	std	Y+21, r24	; 0x15
    3a98:	9e 8b       	std	Y+22, r25	; 0x16
    3a9a:	af 8b       	std	Y+23, r26	; 0x17
    3a9c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a9e:	6d 89       	ldd	r22, Y+21	; 0x15
    3aa0:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa2:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa4:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa6:	20 e0       	ldi	r18, 0x00	; 0
    3aa8:	30 e0       	ldi	r19, 0x00	; 0
    3aaa:	40 e8       	ldi	r20, 0x80	; 128
    3aac:	5f e3       	ldi	r21, 0x3F	; 63
    3aae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ab2:	88 23       	and	r24, r24
    3ab4:	2c f4       	brge	.+10     	; 0x3ac0 <main+0x57e>
		__ticks = 1;
    3ab6:	81 e0       	ldi	r24, 0x01	; 1
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	9c 8b       	std	Y+20, r25	; 0x14
    3abc:	8b 8b       	std	Y+19, r24	; 0x13
    3abe:	3f c0       	rjmp	.+126    	; 0x3b3e <main+0x5fc>
	else if (__tmp > 65535)
    3ac0:	6d 89       	ldd	r22, Y+21	; 0x15
    3ac2:	7e 89       	ldd	r23, Y+22	; 0x16
    3ac4:	8f 89       	ldd	r24, Y+23	; 0x17
    3ac6:	98 8d       	ldd	r25, Y+24	; 0x18
    3ac8:	20 e0       	ldi	r18, 0x00	; 0
    3aca:	3f ef       	ldi	r19, 0xFF	; 255
    3acc:	4f e7       	ldi	r20, 0x7F	; 127
    3ace:	57 e4       	ldi	r21, 0x47	; 71
    3ad0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3ad4:	18 16       	cp	r1, r24
    3ad6:	4c f5       	brge	.+82     	; 0x3b2a <main+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ad8:	69 8d       	ldd	r22, Y+25	; 0x19
    3ada:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3adc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3ade:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e2       	ldi	r20, 0x20	; 32
    3ae6:	51 e4       	ldi	r21, 0x41	; 65
    3ae8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aec:	dc 01       	movw	r26, r24
    3aee:	cb 01       	movw	r24, r22
    3af0:	bc 01       	movw	r22, r24
    3af2:	cd 01       	movw	r24, r26
    3af4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af8:	dc 01       	movw	r26, r24
    3afa:	cb 01       	movw	r24, r22
    3afc:	9c 8b       	std	Y+20, r25	; 0x14
    3afe:	8b 8b       	std	Y+19, r24	; 0x13
    3b00:	0f c0       	rjmp	.+30     	; 0x3b20 <main+0x5de>
    3b02:	80 e9       	ldi	r24, 0x90	; 144
    3b04:	91 e0       	ldi	r25, 0x01	; 1
    3b06:	9a 8b       	std	Y+18, r25	; 0x12
    3b08:	89 8b       	std	Y+17, r24	; 0x11
    3b0a:	89 89       	ldd	r24, Y+17	; 0x11
    3b0c:	9a 89       	ldd	r25, Y+18	; 0x12
    3b0e:	01 97       	sbiw	r24, 0x01	; 1
    3b10:	f1 f7       	brne	.-4      	; 0x3b0e <main+0x5cc>
    3b12:	9a 8b       	std	Y+18, r25	; 0x12
    3b14:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b16:	8b 89       	ldd	r24, Y+19	; 0x13
    3b18:	9c 89       	ldd	r25, Y+20	; 0x14
    3b1a:	01 97       	sbiw	r24, 0x01	; 1
    3b1c:	9c 8b       	std	Y+20, r25	; 0x14
    3b1e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b20:	8b 89       	ldd	r24, Y+19	; 0x13
    3b22:	9c 89       	ldd	r25, Y+20	; 0x14
    3b24:	00 97       	sbiw	r24, 0x00	; 0
    3b26:	69 f7       	brne	.-38     	; 0x3b02 <main+0x5c0>
    3b28:	da cd       	rjmp	.-1100   	; 0x36de <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b2a:	6d 89       	ldd	r22, Y+21	; 0x15
    3b2c:	7e 89       	ldd	r23, Y+22	; 0x16
    3b2e:	8f 89       	ldd	r24, Y+23	; 0x17
    3b30:	98 8d       	ldd	r25, Y+24	; 0x18
    3b32:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b36:	dc 01       	movw	r26, r24
    3b38:	cb 01       	movw	r24, r22
    3b3a:	9c 8b       	std	Y+20, r25	; 0x14
    3b3c:	8b 8b       	std	Y+19, r24	; 0x13
    3b3e:	8b 89       	ldd	r24, Y+19	; 0x13
    3b40:	9c 89       	ldd	r25, Y+20	; 0x14
    3b42:	98 8b       	std	Y+16, r25	; 0x10
    3b44:	8f 87       	std	Y+15, r24	; 0x0f
    3b46:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b48:	98 89       	ldd	r25, Y+16	; 0x10
    3b4a:	01 97       	sbiw	r24, 0x01	; 1
    3b4c:	f1 f7       	brne	.-4      	; 0x3b4a <main+0x608>
    3b4e:	98 8b       	std	Y+16, r25	; 0x10
    3b50:	8f 87       	std	Y+15, r24	; 0x0f
    3b52:	c5 cd       	rjmp	.-1142   	; 0x36de <main+0x19c>
			_delay_ms(1000);
			break;
		case STOP:
			LCD_voidClearScreen();
    3b54:	0e 94 06 19 	call	0x320c	; 0x320c <LCD_voidClearScreen>
			LCD_voidWriteString("CAR IS OFF");
    3b58:	88 e8       	ldi	r24, 0x88	; 136
    3b5a:	90 e0       	ldi	r25, 0x00	; 0
    3b5c:	0e 94 e4 18 	call	0x31c8	; 0x31c8 <LCD_voidWriteString>
			MOTORS_CAR_voidStop();
    3b60:	0e 94 02 15 	call	0x2a04	; 0x2a04 <MOTORS_CAR_voidStop>
    3b64:	80 e0       	ldi	r24, 0x00	; 0
    3b66:	90 e0       	ldi	r25, 0x00	; 0
    3b68:	aa e7       	ldi	r26, 0x7A	; 122
    3b6a:	b4 e4       	ldi	r27, 0x44	; 68
    3b6c:	8b 87       	std	Y+11, r24	; 0x0b
    3b6e:	9c 87       	std	Y+12, r25	; 0x0c
    3b70:	ad 87       	std	Y+13, r26	; 0x0d
    3b72:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b74:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b76:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b78:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b7a:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b7c:	20 e0       	ldi	r18, 0x00	; 0
    3b7e:	30 e0       	ldi	r19, 0x00	; 0
    3b80:	4a e7       	ldi	r20, 0x7A	; 122
    3b82:	55 e4       	ldi	r21, 0x45	; 69
    3b84:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b88:	dc 01       	movw	r26, r24
    3b8a:	cb 01       	movw	r24, r22
    3b8c:	8f 83       	std	Y+7, r24	; 0x07
    3b8e:	98 87       	std	Y+8, r25	; 0x08
    3b90:	a9 87       	std	Y+9, r26	; 0x09
    3b92:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b94:	6f 81       	ldd	r22, Y+7	; 0x07
    3b96:	78 85       	ldd	r23, Y+8	; 0x08
    3b98:	89 85       	ldd	r24, Y+9	; 0x09
    3b9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b9c:	20 e0       	ldi	r18, 0x00	; 0
    3b9e:	30 e0       	ldi	r19, 0x00	; 0
    3ba0:	40 e8       	ldi	r20, 0x80	; 128
    3ba2:	5f e3       	ldi	r21, 0x3F	; 63
    3ba4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ba8:	88 23       	and	r24, r24
    3baa:	2c f4       	brge	.+10     	; 0x3bb6 <main+0x674>
		__ticks = 1;
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	9e 83       	std	Y+6, r25	; 0x06
    3bb2:	8d 83       	std	Y+5, r24	; 0x05
    3bb4:	3f c0       	rjmp	.+126    	; 0x3c34 <main+0x6f2>
	else if (__tmp > 65535)
    3bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    3bb8:	78 85       	ldd	r23, Y+8	; 0x08
    3bba:	89 85       	ldd	r24, Y+9	; 0x09
    3bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bbe:	20 e0       	ldi	r18, 0x00	; 0
    3bc0:	3f ef       	ldi	r19, 0xFF	; 255
    3bc2:	4f e7       	ldi	r20, 0x7F	; 127
    3bc4:	57 e4       	ldi	r21, 0x47	; 71
    3bc6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3bca:	18 16       	cp	r1, r24
    3bcc:	4c f5       	brge	.+82     	; 0x3c20 <main+0x6de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3bce:	6b 85       	ldd	r22, Y+11	; 0x0b
    3bd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3bd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3bd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	40 e2       	ldi	r20, 0x20	; 32
    3bdc:	51 e4       	ldi	r21, 0x41	; 65
    3bde:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3be2:	dc 01       	movw	r26, r24
    3be4:	cb 01       	movw	r24, r22
    3be6:	bc 01       	movw	r22, r24
    3be8:	cd 01       	movw	r24, r26
    3bea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bee:	dc 01       	movw	r26, r24
    3bf0:	cb 01       	movw	r24, r22
    3bf2:	9e 83       	std	Y+6, r25	; 0x06
    3bf4:	8d 83       	std	Y+5, r24	; 0x05
    3bf6:	0f c0       	rjmp	.+30     	; 0x3c16 <main+0x6d4>
    3bf8:	80 e9       	ldi	r24, 0x90	; 144
    3bfa:	91 e0       	ldi	r25, 0x01	; 1
    3bfc:	9c 83       	std	Y+4, r25	; 0x04
    3bfe:	8b 83       	std	Y+3, r24	; 0x03
    3c00:	8b 81       	ldd	r24, Y+3	; 0x03
    3c02:	9c 81       	ldd	r25, Y+4	; 0x04
    3c04:	01 97       	sbiw	r24, 0x01	; 1
    3c06:	f1 f7       	brne	.-4      	; 0x3c04 <main+0x6c2>
    3c08:	9c 83       	std	Y+4, r25	; 0x04
    3c0a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3c0c:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0e:	9e 81       	ldd	r25, Y+6	; 0x06
    3c10:	01 97       	sbiw	r24, 0x01	; 1
    3c12:	9e 83       	std	Y+6, r25	; 0x06
    3c14:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3c16:	8d 81       	ldd	r24, Y+5	; 0x05
    3c18:	9e 81       	ldd	r25, Y+6	; 0x06
    3c1a:	00 97       	sbiw	r24, 0x00	; 0
    3c1c:	69 f7       	brne	.-38     	; 0x3bf8 <main+0x6b6>
    3c1e:	5f cd       	rjmp	.-1346   	; 0x36de <main+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3c20:	6f 81       	ldd	r22, Y+7	; 0x07
    3c22:	78 85       	ldd	r23, Y+8	; 0x08
    3c24:	89 85       	ldd	r24, Y+9	; 0x09
    3c26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c2c:	dc 01       	movw	r26, r24
    3c2e:	cb 01       	movw	r24, r22
    3c30:	9e 83       	std	Y+6, r25	; 0x06
    3c32:	8d 83       	std	Y+5, r24	; 0x05
    3c34:	8d 81       	ldd	r24, Y+5	; 0x05
    3c36:	9e 81       	ldd	r25, Y+6	; 0x06
    3c38:	9a 83       	std	Y+2, r25	; 0x02
    3c3a:	89 83       	std	Y+1, r24	; 0x01
    3c3c:	89 81       	ldd	r24, Y+1	; 0x01
    3c3e:	9a 81       	ldd	r25, Y+2	; 0x02
    3c40:	01 97       	sbiw	r24, 0x01	; 1
    3c42:	f1 f7       	brne	.-4      	; 0x3c40 <main+0x6fe>
    3c44:	9a 83       	std	Y+2, r25	; 0x02
    3c46:	89 83       	std	Y+1, r24	; 0x01
    3c48:	4a cd       	rjmp	.-1388   	; 0x36de <main+0x19c>

00003c4a <__divmodhi4>:
    3c4a:	97 fb       	bst	r25, 7
    3c4c:	09 2e       	mov	r0, r25
    3c4e:	07 26       	eor	r0, r23
    3c50:	0a d0       	rcall	.+20     	; 0x3c66 <__divmodhi4_neg1>
    3c52:	77 fd       	sbrc	r23, 7
    3c54:	04 d0       	rcall	.+8      	; 0x3c5e <__divmodhi4_neg2>
    3c56:	27 d0       	rcall	.+78     	; 0x3ca6 <__udivmodhi4>
    3c58:	06 d0       	rcall	.+12     	; 0x3c66 <__divmodhi4_neg1>
    3c5a:	00 20       	and	r0, r0
    3c5c:	1a f4       	brpl	.+6      	; 0x3c64 <__divmodhi4_exit>

00003c5e <__divmodhi4_neg2>:
    3c5e:	70 95       	com	r23
    3c60:	61 95       	neg	r22
    3c62:	7f 4f       	sbci	r23, 0xFF	; 255

00003c64 <__divmodhi4_exit>:
    3c64:	08 95       	ret

00003c66 <__divmodhi4_neg1>:
    3c66:	f6 f7       	brtc	.-4      	; 0x3c64 <__divmodhi4_exit>
    3c68:	90 95       	com	r25
    3c6a:	81 95       	neg	r24
    3c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6e:	08 95       	ret

00003c70 <__divmodsi4>:
    3c70:	97 fb       	bst	r25, 7
    3c72:	09 2e       	mov	r0, r25
    3c74:	05 26       	eor	r0, r21
    3c76:	0e d0       	rcall	.+28     	; 0x3c94 <__divmodsi4_neg1>
    3c78:	57 fd       	sbrc	r21, 7
    3c7a:	04 d0       	rcall	.+8      	; 0x3c84 <__divmodsi4_neg2>
    3c7c:	28 d0       	rcall	.+80     	; 0x3cce <__udivmodsi4>
    3c7e:	0a d0       	rcall	.+20     	; 0x3c94 <__divmodsi4_neg1>
    3c80:	00 1c       	adc	r0, r0
    3c82:	38 f4       	brcc	.+14     	; 0x3c92 <__divmodsi4_exit>

00003c84 <__divmodsi4_neg2>:
    3c84:	50 95       	com	r21
    3c86:	40 95       	com	r20
    3c88:	30 95       	com	r19
    3c8a:	21 95       	neg	r18
    3c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3c8e:	4f 4f       	sbci	r20, 0xFF	; 255
    3c90:	5f 4f       	sbci	r21, 0xFF	; 255

00003c92 <__divmodsi4_exit>:
    3c92:	08 95       	ret

00003c94 <__divmodsi4_neg1>:
    3c94:	f6 f7       	brtc	.-4      	; 0x3c92 <__divmodsi4_exit>
    3c96:	90 95       	com	r25
    3c98:	80 95       	com	r24
    3c9a:	70 95       	com	r23
    3c9c:	61 95       	neg	r22
    3c9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3ca0:	8f 4f       	sbci	r24, 0xFF	; 255
    3ca2:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca4:	08 95       	ret

00003ca6 <__udivmodhi4>:
    3ca6:	aa 1b       	sub	r26, r26
    3ca8:	bb 1b       	sub	r27, r27
    3caa:	51 e1       	ldi	r21, 0x11	; 17
    3cac:	07 c0       	rjmp	.+14     	; 0x3cbc <__udivmodhi4_ep>

00003cae <__udivmodhi4_loop>:
    3cae:	aa 1f       	adc	r26, r26
    3cb0:	bb 1f       	adc	r27, r27
    3cb2:	a6 17       	cp	r26, r22
    3cb4:	b7 07       	cpc	r27, r23
    3cb6:	10 f0       	brcs	.+4      	; 0x3cbc <__udivmodhi4_ep>
    3cb8:	a6 1b       	sub	r26, r22
    3cba:	b7 0b       	sbc	r27, r23

00003cbc <__udivmodhi4_ep>:
    3cbc:	88 1f       	adc	r24, r24
    3cbe:	99 1f       	adc	r25, r25
    3cc0:	5a 95       	dec	r21
    3cc2:	a9 f7       	brne	.-22     	; 0x3cae <__udivmodhi4_loop>
    3cc4:	80 95       	com	r24
    3cc6:	90 95       	com	r25
    3cc8:	bc 01       	movw	r22, r24
    3cca:	cd 01       	movw	r24, r26
    3ccc:	08 95       	ret

00003cce <__udivmodsi4>:
    3cce:	a1 e2       	ldi	r26, 0x21	; 33
    3cd0:	1a 2e       	mov	r1, r26
    3cd2:	aa 1b       	sub	r26, r26
    3cd4:	bb 1b       	sub	r27, r27
    3cd6:	fd 01       	movw	r30, r26
    3cd8:	0d c0       	rjmp	.+26     	; 0x3cf4 <__udivmodsi4_ep>

00003cda <__udivmodsi4_loop>:
    3cda:	aa 1f       	adc	r26, r26
    3cdc:	bb 1f       	adc	r27, r27
    3cde:	ee 1f       	adc	r30, r30
    3ce0:	ff 1f       	adc	r31, r31
    3ce2:	a2 17       	cp	r26, r18
    3ce4:	b3 07       	cpc	r27, r19
    3ce6:	e4 07       	cpc	r30, r20
    3ce8:	f5 07       	cpc	r31, r21
    3cea:	20 f0       	brcs	.+8      	; 0x3cf4 <__udivmodsi4_ep>
    3cec:	a2 1b       	sub	r26, r18
    3cee:	b3 0b       	sbc	r27, r19
    3cf0:	e4 0b       	sbc	r30, r20
    3cf2:	f5 0b       	sbc	r31, r21

00003cf4 <__udivmodsi4_ep>:
    3cf4:	66 1f       	adc	r22, r22
    3cf6:	77 1f       	adc	r23, r23
    3cf8:	88 1f       	adc	r24, r24
    3cfa:	99 1f       	adc	r25, r25
    3cfc:	1a 94       	dec	r1
    3cfe:	69 f7       	brne	.-38     	; 0x3cda <__udivmodsi4_loop>
    3d00:	60 95       	com	r22
    3d02:	70 95       	com	r23
    3d04:	80 95       	com	r24
    3d06:	90 95       	com	r25
    3d08:	9b 01       	movw	r18, r22
    3d0a:	ac 01       	movw	r20, r24
    3d0c:	bd 01       	movw	r22, r26
    3d0e:	cf 01       	movw	r24, r30
    3d10:	08 95       	ret

00003d12 <__prologue_saves__>:
    3d12:	2f 92       	push	r2
    3d14:	3f 92       	push	r3
    3d16:	4f 92       	push	r4
    3d18:	5f 92       	push	r5
    3d1a:	6f 92       	push	r6
    3d1c:	7f 92       	push	r7
    3d1e:	8f 92       	push	r8
    3d20:	9f 92       	push	r9
    3d22:	af 92       	push	r10
    3d24:	bf 92       	push	r11
    3d26:	cf 92       	push	r12
    3d28:	df 92       	push	r13
    3d2a:	ef 92       	push	r14
    3d2c:	ff 92       	push	r15
    3d2e:	0f 93       	push	r16
    3d30:	1f 93       	push	r17
    3d32:	cf 93       	push	r28
    3d34:	df 93       	push	r29
    3d36:	cd b7       	in	r28, 0x3d	; 61
    3d38:	de b7       	in	r29, 0x3e	; 62
    3d3a:	ca 1b       	sub	r28, r26
    3d3c:	db 0b       	sbc	r29, r27
    3d3e:	0f b6       	in	r0, 0x3f	; 63
    3d40:	f8 94       	cli
    3d42:	de bf       	out	0x3e, r29	; 62
    3d44:	0f be       	out	0x3f, r0	; 63
    3d46:	cd bf       	out	0x3d, r28	; 61
    3d48:	09 94       	ijmp

00003d4a <__epilogue_restores__>:
    3d4a:	2a 88       	ldd	r2, Y+18	; 0x12
    3d4c:	39 88       	ldd	r3, Y+17	; 0x11
    3d4e:	48 88       	ldd	r4, Y+16	; 0x10
    3d50:	5f 84       	ldd	r5, Y+15	; 0x0f
    3d52:	6e 84       	ldd	r6, Y+14	; 0x0e
    3d54:	7d 84       	ldd	r7, Y+13	; 0x0d
    3d56:	8c 84       	ldd	r8, Y+12	; 0x0c
    3d58:	9b 84       	ldd	r9, Y+11	; 0x0b
    3d5a:	aa 84       	ldd	r10, Y+10	; 0x0a
    3d5c:	b9 84       	ldd	r11, Y+9	; 0x09
    3d5e:	c8 84       	ldd	r12, Y+8	; 0x08
    3d60:	df 80       	ldd	r13, Y+7	; 0x07
    3d62:	ee 80       	ldd	r14, Y+6	; 0x06
    3d64:	fd 80       	ldd	r15, Y+5	; 0x05
    3d66:	0c 81       	ldd	r16, Y+4	; 0x04
    3d68:	1b 81       	ldd	r17, Y+3	; 0x03
    3d6a:	aa 81       	ldd	r26, Y+2	; 0x02
    3d6c:	b9 81       	ldd	r27, Y+1	; 0x01
    3d6e:	ce 0f       	add	r28, r30
    3d70:	d1 1d       	adc	r29, r1
    3d72:	0f b6       	in	r0, 0x3f	; 63
    3d74:	f8 94       	cli
    3d76:	de bf       	out	0x3e, r29	; 62
    3d78:	0f be       	out	0x3f, r0	; 63
    3d7a:	cd bf       	out	0x3d, r28	; 61
    3d7c:	ed 01       	movw	r28, r26
    3d7e:	08 95       	ret

00003d80 <ceil>:
    3d80:	3b d0       	rcall	.+118    	; 0x3df8 <__fp_trunc>
    3d82:	80 f0       	brcs	.+32     	; 0x3da4 <ceil+0x24>
    3d84:	9f 37       	cpi	r25, 0x7F	; 127
    3d86:	40 f4       	brcc	.+16     	; 0x3d98 <ceil+0x18>
    3d88:	91 11       	cpse	r25, r1
    3d8a:	0e f4       	brtc	.+2      	; 0x3d8e <ceil+0xe>
    3d8c:	4d c0       	rjmp	.+154    	; 0x3e28 <__fp_szero>
    3d8e:	60 e0       	ldi	r22, 0x00	; 0
    3d90:	70 e0       	ldi	r23, 0x00	; 0
    3d92:	80 e8       	ldi	r24, 0x80	; 128
    3d94:	9f e3       	ldi	r25, 0x3F	; 63
    3d96:	08 95       	ret
    3d98:	26 f0       	brts	.+8      	; 0x3da2 <ceil+0x22>
    3d9a:	1b 16       	cp	r1, r27
    3d9c:	61 1d       	adc	r22, r1
    3d9e:	71 1d       	adc	r23, r1
    3da0:	81 1d       	adc	r24, r1
    3da2:	01 c0       	rjmp	.+2      	; 0x3da6 <__fp_mintl>
    3da4:	1b c0       	rjmp	.+54     	; 0x3ddc <__fp_mpack>

00003da6 <__fp_mintl>:
    3da6:	88 23       	and	r24, r24
    3da8:	71 f4       	brne	.+28     	; 0x3dc6 <__fp_mintl+0x20>
    3daa:	77 23       	and	r23, r23
    3dac:	21 f0       	breq	.+8      	; 0x3db6 <__fp_mintl+0x10>
    3dae:	98 50       	subi	r25, 0x08	; 8
    3db0:	87 2b       	or	r24, r23
    3db2:	76 2f       	mov	r23, r22
    3db4:	07 c0       	rjmp	.+14     	; 0x3dc4 <__fp_mintl+0x1e>
    3db6:	66 23       	and	r22, r22
    3db8:	11 f4       	brne	.+4      	; 0x3dbe <__fp_mintl+0x18>
    3dba:	99 27       	eor	r25, r25
    3dbc:	0d c0       	rjmp	.+26     	; 0x3dd8 <__fp_mintl+0x32>
    3dbe:	90 51       	subi	r25, 0x10	; 16
    3dc0:	86 2b       	or	r24, r22
    3dc2:	70 e0       	ldi	r23, 0x00	; 0
    3dc4:	60 e0       	ldi	r22, 0x00	; 0
    3dc6:	2a f0       	brmi	.+10     	; 0x3dd2 <__fp_mintl+0x2c>
    3dc8:	9a 95       	dec	r25
    3dca:	66 0f       	add	r22, r22
    3dcc:	77 1f       	adc	r23, r23
    3dce:	88 1f       	adc	r24, r24
    3dd0:	da f7       	brpl	.-10     	; 0x3dc8 <__fp_mintl+0x22>
    3dd2:	88 0f       	add	r24, r24
    3dd4:	96 95       	lsr	r25
    3dd6:	87 95       	ror	r24
    3dd8:	97 f9       	bld	r25, 7
    3dda:	08 95       	ret

00003ddc <__fp_mpack>:
    3ddc:	9f 3f       	cpi	r25, 0xFF	; 255
    3dde:	31 f0       	breq	.+12     	; 0x3dec <__fp_mpack_finite+0xc>

00003de0 <__fp_mpack_finite>:
    3de0:	91 50       	subi	r25, 0x01	; 1
    3de2:	20 f4       	brcc	.+8      	; 0x3dec <__fp_mpack_finite+0xc>
    3de4:	87 95       	ror	r24
    3de6:	77 95       	ror	r23
    3de8:	67 95       	ror	r22
    3dea:	b7 95       	ror	r27
    3dec:	88 0f       	add	r24, r24
    3dee:	91 1d       	adc	r25, r1
    3df0:	96 95       	lsr	r25
    3df2:	87 95       	ror	r24
    3df4:	97 f9       	bld	r25, 7
    3df6:	08 95       	ret

00003df8 <__fp_trunc>:
    3df8:	25 d0       	rcall	.+74     	; 0x3e44 <__fp_splitA>
    3dfa:	a0 f0       	brcs	.+40     	; 0x3e24 <__fp_trunc+0x2c>
    3dfc:	be e7       	ldi	r27, 0x7E	; 126
    3dfe:	b9 17       	cp	r27, r25
    3e00:	88 f4       	brcc	.+34     	; 0x3e24 <__fp_trunc+0x2c>
    3e02:	bb 27       	eor	r27, r27
    3e04:	9f 38       	cpi	r25, 0x8F	; 143
    3e06:	60 f4       	brcc	.+24     	; 0x3e20 <__fp_trunc+0x28>
    3e08:	16 16       	cp	r1, r22
    3e0a:	b1 1d       	adc	r27, r1
    3e0c:	67 2f       	mov	r22, r23
    3e0e:	78 2f       	mov	r23, r24
    3e10:	88 27       	eor	r24, r24
    3e12:	98 5f       	subi	r25, 0xF8	; 248
    3e14:	f7 cf       	rjmp	.-18     	; 0x3e04 <__fp_trunc+0xc>
    3e16:	86 95       	lsr	r24
    3e18:	77 95       	ror	r23
    3e1a:	67 95       	ror	r22
    3e1c:	b1 1d       	adc	r27, r1
    3e1e:	93 95       	inc	r25
    3e20:	96 39       	cpi	r25, 0x96	; 150
    3e22:	c8 f3       	brcs	.-14     	; 0x3e16 <__fp_trunc+0x1e>
    3e24:	08 95       	ret

00003e26 <__fp_zero>:
    3e26:	e8 94       	clt

00003e28 <__fp_szero>:
    3e28:	bb 27       	eor	r27, r27
    3e2a:	66 27       	eor	r22, r22
    3e2c:	77 27       	eor	r23, r23
    3e2e:	cb 01       	movw	r24, r22
    3e30:	97 f9       	bld	r25, 7
    3e32:	08 95       	ret

00003e34 <__fp_split3>:
    3e34:	57 fd       	sbrc	r21, 7
    3e36:	90 58       	subi	r25, 0x80	; 128
    3e38:	44 0f       	add	r20, r20
    3e3a:	55 1f       	adc	r21, r21
    3e3c:	59 f0       	breq	.+22     	; 0x3e54 <__fp_splitA+0x10>
    3e3e:	5f 3f       	cpi	r21, 0xFF	; 255
    3e40:	71 f0       	breq	.+28     	; 0x3e5e <__fp_splitA+0x1a>
    3e42:	47 95       	ror	r20

00003e44 <__fp_splitA>:
    3e44:	88 0f       	add	r24, r24
    3e46:	97 fb       	bst	r25, 7
    3e48:	99 1f       	adc	r25, r25
    3e4a:	61 f0       	breq	.+24     	; 0x3e64 <__fp_splitA+0x20>
    3e4c:	9f 3f       	cpi	r25, 0xFF	; 255
    3e4e:	79 f0       	breq	.+30     	; 0x3e6e <__fp_splitA+0x2a>
    3e50:	87 95       	ror	r24
    3e52:	08 95       	ret
    3e54:	12 16       	cp	r1, r18
    3e56:	13 06       	cpc	r1, r19
    3e58:	14 06       	cpc	r1, r20
    3e5a:	55 1f       	adc	r21, r21
    3e5c:	f2 cf       	rjmp	.-28     	; 0x3e42 <__fp_split3+0xe>
    3e5e:	46 95       	lsr	r20
    3e60:	f1 df       	rcall	.-30     	; 0x3e44 <__fp_splitA>
    3e62:	08 c0       	rjmp	.+16     	; 0x3e74 <__fp_splitA+0x30>
    3e64:	16 16       	cp	r1, r22
    3e66:	17 06       	cpc	r1, r23
    3e68:	18 06       	cpc	r1, r24
    3e6a:	99 1f       	adc	r25, r25
    3e6c:	f1 cf       	rjmp	.-30     	; 0x3e50 <__fp_splitA+0xc>
    3e6e:	86 95       	lsr	r24
    3e70:	71 05       	cpc	r23, r1
    3e72:	61 05       	cpc	r22, r1
    3e74:	08 94       	sec
    3e76:	08 95       	ret

00003e78 <_exit>:
    3e78:	f8 94       	cli

00003e7a <__stop_program>:
    3e7a:	ff cf       	rjmp	.-2      	; 0x3e7a <__stop_program>
